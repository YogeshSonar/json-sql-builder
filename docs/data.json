var docs = [{"comment":"/**\n\t * @name $avg\n\t * @summary Specifies the AVG aggregation.\n\t * @memberOf Aggregation\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to used on AVG aggregate.\n\t */","meta":{"range":[2015,2322],"filename":"aggregation.js","lineno":62,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$avg","summary":"Specifies the AVG aggregation.","memberof":"Aggregation","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to used on AVG aggregate.","name":"identifier","typeStr":"String"}],"scope":"static","longname":"Aggregation.$avg","kind":"member","___id":"T000007R000008","___s":true,"longnameLower":"aggregation.$avg","depths":["Aggregation","$avg"],"depth0":"Aggregation","depth1":"$avg","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, identifier","gitRelative":"/lib/ansi/operators/aggregation.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/aggregation.js#L62","hashId":"Aggregation-avg","_id":"nt6s96nA0X5inKLR"},{"comment":"/**\n\t * @name $count\n\t * @summary Specifies the COUNT aggregation.\n\t * @memberOf Aggregation\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to count.\n\t */","meta":{"range":[95,390],"filename":"aggregation.js","lineno":6,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$count","summary":"Specifies the COUNT aggregation.","memberof":"Aggregation","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to count.","name":"identifier","typeStr":"String"}],"scope":"static","longname":"Aggregation.$count","kind":"member","___id":"T000007R000004","___s":true,"longnameLower":"aggregation.$count","depths":["Aggregation","$count"],"depth0":"Aggregation","depth1":"$count","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, identifier","gitRelative":"/lib/ansi/operators/aggregation.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/aggregation.js#L6","hashId":"Aggregation-count","_id":"9r9j71hGdiaWI5H8"},{"comment":"/**\n\t * @name $groupConcat\n\t * @summary Specifies the `GROUP_CONCAT` aggregation function using language dialect MySQL.\n\t *\n\t * **Syntax:**\n\t * ```syntax\n\t * GROUP_CONCAT ( [$distinct] <$column> [$sort] [$orderBy] [$separator] )\n\t * ```\n\t *\n\t * @memberOf Aggregation\n\t * @ishelper true\n\t * @mysql true\n\t *\n\t * @param groupConcat\t {String | Object}\n\t * - groupConcat as **String** like: `$select: { $columns: ['first_name', { $groupConcat: 'last_name' } ], ... }`\n\t * - groupConcat as **Object** like: `$select: { $columns: ['first_name', { $groupConcat: { $sort: { last_name: -1 }, $separator: ' - ' } } ] ... }`\n\t */","meta":{"range":[134,751],"filename":"aggregation.js","lineno":8,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$groupConcat","summary":"Specifies the `GROUP_CONCAT` aggregation function using language dialect MySQL.\n\n**Syntax:**\n```syntax\nGROUP_CONCAT ( [$distinct] <$column> [$sort] [$orderBy] [$separator] )\n```","memberof":"Aggregation","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["String","Object"]},"description":"- groupConcat as **String** like: `$select: { $columns: ['first_name', { $groupConcat: 'last_name' } ], ... }`\n- groupConcat as **Object** like: `$select: { $columns: ['first_name', { $groupConcat: { $sort: { last_name: -1 }, $separator: ' - ' } } ] ... }`","name":"groupConcat","typeStr":"String | Object"}],"scope":"static","longname":"Aggregation.$groupConcat","kind":"member","___id":"T000027R000005","___s":true,"longnameLower":"aggregation.$groupconcat","depths":["Aggregation","$groupConcat"],"depth0":"Aggregation","depth1":"$groupConcat","ishelper":true,"mysql":"true","category":"Helpers","arguments":"groupConcat","gitRelative":"/lib/mysql/aggregation.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/aggregation.js#L8","hashId":"Aggregation-groupConcat","_id":"UeT0bOWHrigm2Qtt"},{"comment":"/**\n\t * @name $separator\n\t * @summary Specifies the `SEPERATOR` option for the `GROUP_CONCAT` aggregation function using language dialect MySQL.\n\t *\n\t * @memberOf Aggregation.$groupConcat\n\t * @ishelper true\n\t * @mysql true\n\t *\n\t * @param separator\t {String}\n\t * - `$select: { $columns: ['first_name', { $groupConcat: { $sort: { last_name: -1 }, $separator: ' - ' } } ] ... }`\n\t */","meta":{"range":[1316,1696],"filename":"aggregation.js","lineno":34,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$separator","summary":"Specifies the `SEPERATOR` option for the `GROUP_CONCAT` aggregation function using language dialect MySQL.","memberof":"Aggregation.$groupConcat","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"- `$select: { $columns: ['first_name', { $groupConcat: { $sort: { last_name: -1 }, $separator: ' - ' } } ] ... }`","name":"separator","typeStr":"String"}],"scope":"static","longname":"Aggregation.$groupConcat.$separator","kind":"member","___id":"T000027R000006","___s":true,"longnameLower":"aggregation.$groupconcat.$separator","depths":["Aggregation","$groupConcat","$separator"],"depth0":"Aggregation","depth1":"$groupConcat","depth2":"$separator","ishelper":true,"mysql":"true","category":"Helpers","arguments":"separator","gitRelative":"/lib/mysql/aggregation.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/aggregation.js#L34","hashId":"Aggregation-groupConcat-separator","_id":"79cymkjE5szIxUS3"},{"comment":"/**\n\t * @name $max\n\t * @summary Specifies the MAX aggregation.\n\t * @memberOf Aggregation\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to used on MAX aggregate.\n\t */","meta":{"range":[1533,1840],"filename":"aggregation.js","lineno":48,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$max","summary":"Specifies the MAX aggregation.","memberof":"Aggregation","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to used on MAX aggregate.","name":"identifier","typeStr":"String"}],"scope":"static","longname":"Aggregation.$max","kind":"member","___id":"T000007R000007","___s":true,"longnameLower":"aggregation.$max","depths":["Aggregation","$max"],"depth0":"Aggregation","depth1":"$max","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, identifier","gitRelative":"/lib/ansi/operators/aggregation.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/aggregation.js#L48","hashId":"Aggregation-max","_id":"sojmFLTkvZeAqZzF"},{"comment":"/**\n\t * @name $min\n\t * @summary Specifies the MIN aggregation.\n\t * @memberOf Aggregation\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to used on MIN aggregate.\n\t */","meta":{"range":[1051,1358],"filename":"aggregation.js","lineno":34,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$min","summary":"Specifies the MIN aggregation.","memberof":"Aggregation","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to used on MIN aggregate.","name":"identifier","typeStr":"String"}],"scope":"static","longname":"Aggregation.$min","kind":"member","___id":"T000007R000006","___s":true,"longnameLower":"aggregation.$min","depths":["Aggregation","$min"],"depth0":"Aggregation","depth1":"$min","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, identifier","gitRelative":"/lib/ansi/operators/aggregation.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/aggregation.js#L34","hashId":"Aggregation-min","_id":"bDYpOwHw5NwzHHyb"},{"comment":"/**\n\t * @name $sum\n\t * @summary Specifies the SUM aggregation.\n\t * @memberOf Aggregation\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to used on SUM aggregate.\n\t */","meta":{"range":[569,876],"filename":"aggregation.js","lineno":20,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$sum","summary":"Specifies the SUM aggregation.","memberof":"Aggregation","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to used on SUM aggregate.","name":"identifier","typeStr":"String"}],"scope":"static","longname":"Aggregation.$sum","kind":"member","___id":"T000007R000005","___s":true,"longnameLower":"aggregation.$sum","depths":["Aggregation","$sum"],"depth0":"Aggregation","depth1":"$sum","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, identifier","gitRelative":"/lib/ansi/operators/aggregation.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/aggregation.js#L20","hashId":"Aggregation-sum","_id":"cZEJkQ2nwHJTV2hI"},{"comment":"/**\n\t * @name $alias\n\t * @memberOf Basics\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @summary Specifies an alias for a column, table or any other expression.\n\t *\n\t * @param {Property} identifier\tSpecifies original column, table, ... name.\n\t * @param {String} alias  \t\tSpecifies alias name.\n\t */","meta":{"range":[593,886],"filename":"basic.js","lineno":26,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$alias","memberof":"Basics","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies an alias for a column, table or any other expression.","params":[{"type":{"names":["Property"]},"description":"Specifies original column, table, ... name.","name":"identifier","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies alias name.","name":"alias","typeStr":"String"}],"scope":"static","longname":"Basics.$alias","kind":"member","___id":"T000008R000005","___s":true,"longnameLower":"basics.$alias","depths":["Basics","$alias"],"depth0":"Basics","depth1":"$alias","ishelper":true,"ansi":"true","category":"Helpers","arguments":"identifier, alias","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L26","hashId":"Basics-alias","_id":"MzalG8cguJbaEPiq"},{"comment":"/**\n\t * @name $as\n\t * @memberOf Basics\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @summary Specifies an alias for a column, table or any other expression.\n\t *\n\t * @param {Property} identifier\tSpecifies original column, table, ... name.\n\t * @param {String} alias  \t\tSpecifies alias name.\n\t */","meta":{"range":[86,376],"filename":"basic.js","lineno":7,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$as","memberof":"Basics","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies an alias for a column, table or any other expression.","params":[{"type":{"names":["Property"]},"description":"Specifies original column, table, ... name.","name":"identifier","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies alias name.","name":"alias","typeStr":"String"}],"scope":"static","longname":"Basics.$as","kind":"member","___id":"T000008R000004","___s":true,"longnameLower":"basics.$as","depths":["Basics","$as"],"depth0":"Basics","depth1":"$as","ishelper":true,"ansi":"true","category":"Helpers","arguments":"identifier, alias","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L7","hashId":"Basics-as","_id":"qRFPU9byqNcux0Jx"},{"comment":"/**\n\t * @name $column\n\t * @memberOf Basics\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @summary Specifies a single quoted column-name to use as helper if the column\n\t * is a String.\n\t *\n\t * **Support Object-Type**\n\t *\n\t * Changed since 1.0.13 to $column definition used by [$create -> $table -> $define](DDL-CreateTable.html#CreateTable-define-column)\n\t *\n\t * @param {String | Object} column\tSpecifies a column-identifier.\n\t */","meta":{"range":[1367,1792],"filename":"basic.js","lineno":56,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$column","memberof":"Basics","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies a single quoted column-name to use as helper if the column\nis a String.\n\n**Support Object-Type**\n\nChanged since 1.0.13 to $column definition used by [$create -> $table -> $define](DDL-CreateTable.html#CreateTable-define-column)","params":[{"type":{"names":["String","Object"]},"description":"Specifies a column-identifier.","name":"column","typeStr":"String | Object"}],"scope":"static","longname":"Basics.$column","kind":"member","___id":"T000008R000007","___s":true,"longnameLower":"basics.$column","depths":["Basics","$column"],"depth0":"Basics","depth1":"$column","ishelper":true,"ansi":"true","category":"Helpers","arguments":"column","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L56","hashId":"Basics-column","_id":"ls1qa9oVBGBbuG31"},{"comment":"/**\n\t * @name $cor\n\t * @summary Specifies the `OR REPLACE` keyword, option\n\t *\n\t * @memberOf Basics\n\t * @ishelper true\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param value\t {Boolean}\n\t * If the value is set to `true` the `OR REPLACE` option will be used.\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$view: { $cor: 'people' },\n\t * \t// or instead used as boolean expr.\n\t * \t$cor: true,\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[5836,6256],"filename":"basic.js","lineno":210,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$cor","summary":"Specifies the `OR REPLACE` keyword, option","memberof":"Basics","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"If the value is set to `true` the `OR REPLACE` option will be used.\n**Example**\n```javascript\n$create: {\n\t$view: { $cor: 'people' },\n\t// or instead used as boolean expr.\n\t$cor: true,\n\t...\n}\n```","name":"value","typeStr":"Boolean"}],"scope":"static","longname":"Basics.$cor","kind":"member","___id":"T000008R000013","___s":true,"longnameLower":"basics.$cor","depths":["Basics","$cor"],"depth0":"Basics","depth1":"$cor","ishelper":true,"isddl":true,"ansi":"true","category":"Helpers","arguments":"value","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L210","hashId":"Basics-cor","_id":"JwKr3kxh3Mn4hUJ4"},{"comment":"/**\n\t * @name $dec\n\t * @memberOf Basics\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @summary Specifies a decrement operator for a column.\n\t *\n\t * @param {Property} identifier\tSpecifies the column-identifier.\n\t * @param {Number} value  \t\tSpecifies the decrement as Number.\n\t */","meta":{"range":[4445,4719],"filename":"basic.js","lineno":156,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$dec","memberof":"Basics","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies a decrement operator for a column.","params":[{"type":{"names":["Property"]},"description":"Specifies the column-identifier.","name":"identifier","typeStr":"Property"},{"type":{"names":["Number"]},"description":"Specifies the decrement as Number.","name":"value","typeStr":"Number"}],"scope":"static","longname":"Basics.$dec","kind":"member","___id":"T000008R000011","___s":true,"longnameLower":"basics.$dec","depths":["Basics","$dec"],"depth0":"Basics","depth1":"$dec","ishelper":true,"ansi":"true","category":"Helpers","arguments":"identifier, value","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L156","hashId":"Basics-dec","_id":"ODaOiOJgpXEVASHZ"},{"comment":"/**\n\t * @name $expr\n\t * @memberOf Basics\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @summary Specifies an expression\n\t *\n\t * @param {Object} expr\tSpecifies the expression as Object.\n\t */","meta":{"range":[1067,1252],"filename":"basic.js","lineno":42,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$expr","memberof":"Basics","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies an expression","params":[{"type":{"names":["Object"]},"description":"Specifies the expression as Object.","name":"expr","typeStr":"Object"}],"scope":"static","longname":"Basics.$expr","kind":"member","___id":"T000008R000006","___s":true,"longnameLower":"basics.$expr","depths":["Basics","$expr"],"depth0":"Basics","depth1":"$expr","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L42","hashId":"Basics-expr","_id":"5RMCfhHA1EvXFv2q"},{"comment":"/**\n\t * @name $inc\n\t * @memberOf Basics\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @summary Specifies an increment operator for a column.\n\t *\n\t * @param {Property} identifier\tSpecifies the column-identifier.\n\t * @param {Number} value  \t\tSpecifies the increment as Number.\n\t */","meta":{"range":[3948,4223],"filename":"basic.js","lineno":137,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$inc","memberof":"Basics","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies an increment operator for a column.","params":[{"type":{"names":["Property"]},"description":"Specifies the column-identifier.","name":"identifier","typeStr":"Property"},{"type":{"names":["Number"]},"description":"Specifies the increment as Number.","name":"value","typeStr":"Number"}],"scope":"static","longname":"Basics.$inc","kind":"member","___id":"T000008R000010","___s":true,"longnameLower":"basics.$inc","depths":["Basics","$inc"],"depth0":"Basics","depth1":"$inc","ishelper":true,"ansi":"true","category":"Helpers","arguments":"identifier, value","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L137","hashId":"Basics-inc","_id":"ckyjBQ9xuEomKFVO"},{"comment":"/**\n\t * @name $ine\n\t * @summary Specifies the `IF NOT EXISTS` keyword, option\n\t *\n\t * @memberOf Basics\n\t * @ishelper true\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param value\t {Boolean}\n\t * If the value is set to `true` the `IF NOT EXISTS` clause will be used.\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: { $ine: 'people' },\n\t * \t// or instead used as boolean expr.\n\t * \t$ine: true,\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[4941,5368],"filename":"basic.js","lineno":175,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$ine","summary":"Specifies the `IF NOT EXISTS` keyword, option","memberof":"Basics","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"If the value is set to `true` the `IF NOT EXISTS` clause will be used.\n**Example**\n```javascript\n$create: {\n\t$table: { $ine: 'people' },\n\t// or instead used as boolean expr.\n\t$ine: true,\n\t...\n}\n```","name":"value","typeStr":"Boolean"}],"scope":"static","longname":"Basics.$ine","kind":"member","___id":"T000008R000012","___s":true,"longnameLower":"basics.$ine","depths":["Basics","$ine"],"depth0":"Basics","depth1":"$ine","ishelper":true,"isddl":true,"ansi":"true","category":"Helpers","arguments":"value","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L175","hashId":"Basics-ine","_id":"lJGnCZPdZuUBgk71"},{"comment":"/**\n\t * @name $table\n\t * @memberOf Basics\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @summary Specifies a table identifier.\n\t *\n\t * @param {String | Object} table\n\t * Specifies a table-identifier\n\t * - value is a **String** like: `$table: 'people'`\n\t * - value is an **Object** like: `$table: { people: { $as: 'alias_people' } }`\n\t */","meta":{"range":[2086,2419],"filename":"basic.js","lineno":80,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$table","memberof":"Basics","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies a table identifier.","params":[{"type":{"names":["String","Object"]},"description":"Specifies a table-identifier\n- value is a **String** like: `$table: 'people'`\n- value is an **Object** like: `$table: { people: { $as: 'alias_people' } }`","name":"table","typeStr":"String | Object"}],"scope":"static","longname":"Basics.$table","kind":"member","___id":"T000008R000008","___s":true,"longnameLower":"basics.$table","depths":["Basics","$table"],"depth0":"Basics","depth1":"$table","ishelper":true,"ansi":"true","category":"Helpers","arguments":"table","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L80","hashId":"Basics-table","_id":"X1I9EgK5ytgdaUh4"},{"comment":"/**\n\t * @name $val\n\t * @memberOf Basics\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @summary Specifies a fixed value.\n\t *\n\t * @param {Property} identifier\tSpecifies the identifier\n\t * @param {Primitive} val\tSpecifies the value\n\t */","meta":{"range":[3357,3586],"filename":"basic.js","lineno":117,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$val","memberof":"Basics","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies a fixed value.","params":[{"type":{"names":["Property"]},"description":"Specifies the identifier","name":"identifier","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value","name":"val","typeStr":"Primitive"}],"scope":"static","longname":"Basics.$val","kind":"member","___id":"T000008R000009","___s":true,"longnameLower":"basics.$val","depths":["Basics","$val"],"depth0":"Basics","depth1":"$val","ishelper":true,"ansi":"true","category":"Helpers","arguments":"identifier, val","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L117","hashId":"Basics-val","_id":"F5XPaYQ57GqxZtQj"},{"comment":"/**\n\t * @name $between\n\t * @summary Comparison where expression is between the given array item 0 and item 1.\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {Array}\tSpecifies the range, from and til. It must be an Array with exactly 2 items.\n\t *\n\t * @return {String}\t\t`expr` BETWEEN item1 AND item2\n\t */","meta":{"range":[8081,8513],"filename":"comparison.js","lineno":249,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$between","summary":"Comparison where expression is between the given array item 0 and item 1.","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["Array"]},"description":"Specifies the range, from and til. It must be an Array with exactly 2 items.","name":"value","typeStr":"Array"}],"returns":[{"type":{"names":["String"]},"description":"`expr` BETWEEN item1 AND item2"}],"scope":"static","longname":"Comparison.$between","kind":"member","___id":"T000014R000028","___s":true,"longnameLower":"comparison.$between","depths":["Comparison","$between"],"depth0":"Comparison","depth1":"$between","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L249","hashId":"Comparison-between","_id":"3Xru61WvbpA7r32c"},{"comment":"/**\n\t * @name $contains\n\t * @summary Comparison where expression contains a value\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {String}\tSpecifies the value to compare with\n\t *\n\t * @return {String}\t\t`expr` LIKE '%value%'\n\t */","meta":{"range":[6167,6522],"filename":"comparison.js","lineno":190,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$contains","summary":"Comparison where expression contains a value","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the value to compare with","name":"value","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"`expr` LIKE '%value%'"}],"scope":"static","longname":"Comparison.$contains","kind":"member","___id":"T000014R000022","___s":true,"longnameLower":"comparison.$contains","depths":["Comparison","$contains"],"depth0":"Comparison","depth1":"$contains","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L190","hashId":"Comparison-contains","_id":"DRVtFHADSRbygCOh"},{"comment":"/**\n\t * @name $endsWith\n\t * @summary Comparison where expression ends with a value\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {String}\tSpecifies the value to compare with\n\t *\n\t * @return {String}\t\t`expr` LIKE '%value'\n\t */","meta":{"range":[5612,5967],"filename":"comparison.js","lineno":174,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$endsWith","summary":"Comparison where expression ends with a value","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the value to compare with","name":"value","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"`expr` LIKE '%value'"}],"scope":"static","longname":"Comparison.$endsWith","kind":"member","___id":"T000014R000021","___s":true,"longnameLower":"comparison.$endswith","depths":["Comparison","$endsWith"],"depth0":"Comparison","depth1":"$endsWith","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L174","hashId":"Comparison-endsWith","_id":"4ALAeESCHwMufrKf"},{"comment":"/**\n\t * @name $eq\n\t * @summary Comparison where expression is equal to a value\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[1263,1572],"filename":"comparison.js","lineno":46,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$eq","summary":"Comparison where expression is equal to a value","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$eq","kind":"member","___id":"T000014R000012","___s":true,"longnameLower":"comparison.$eq","depths":["Comparison","$eq"],"depth0":"Comparison","depth1":"$eq","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L46","hashId":"Comparison-eq","_id":"Sk0Cpkb35N0vVrhZ"},{"comment":"/**\n\t * @name $gt\n\t * @summary Comparison where expression is greater than a value\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[2196,2509],"filename":"comparison.js","lineno":74,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$gt","summary":"Comparison where expression is greater than a value","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$gt","kind":"member","___id":"T000014R000014","___s":true,"longnameLower":"comparison.$gt","depths":["Comparison","$gt"],"depth0":"Comparison","depth1":"$gt","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L74","hashId":"Comparison-gt","_id":"xifzyB57ElvKDgwT"},{"comment":"/**\n\t * @name $gte\n\t * @summary Comparison where expression is greater or equal than a value\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[2664,2987],"filename":"comparison.js","lineno":88,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$gte","summary":"Comparison where expression is greater or equal than a value","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$gte","kind":"member","___id":"T000014R000015","___s":true,"longnameLower":"comparison.$gte","depths":["Comparison","$gte"],"depth0":"Comparison","depth1":"$gte","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L88","hashId":"Comparison-gte","_id":"eGKqmxqEXKblcAYd"},{"comment":"/**\n\t * @name $in\n\t * @summary Comparison where expression is in the given list of items\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {Array}\tSpecifies the items of the IN clause\n\t */","meta":{"range":[4088,4404],"filename":"comparison.js","lineno":130,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$in","summary":"Comparison where expression is in the given list of items","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Array"]},"description":"Specifies the items of the IN clause","name":"value","typeStr":"Array"}],"scope":"static","longname":"Comparison.$in","kind":"member","___id":"T000014R000018","___s":true,"longnameLower":"comparison.$in","depths":["Comparison","$in"],"depth0":"Comparison","depth1":"$in","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L130","hashId":"Comparison-in","_id":"z5G31bItu06gByav"},{"comment":"/**\n\t * @name $isNull\n\t * @summary Comparison where expression IS NULL or IS NOT NULL, depending on the given value `true` or `false`.\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {Boolean}\tSpecifies IS NULL (true) or IS NOT NULL (false)\n\t *\n\t * @return {String}\t\t`expr` IS NULL or `expr` IS NOT NULL\n\t */","meta":{"range":[7269,7705],"filename":"comparison.js","lineno":222,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$isNull","summary":"Comparison where expression IS NULL or IS NOT NULL, depending on the given value `true` or `false`.","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["Boolean"]},"description":"Specifies IS NULL (true) or IS NOT NULL (false)","name":"value","typeStr":"Boolean"}],"returns":[{"type":{"names":["String"]},"description":"`expr` IS NULL or `expr` IS NOT NULL"}],"scope":"static","longname":"Comparison.$isNull","kind":"member","___id":"T000014R000024","___s":true,"longnameLower":"comparison.$isnull","depths":["Comparison","$isNull"],"depth0":"Comparison","depth1":"$isNull","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L222","hashId":"Comparison-isNull","_id":"PYXHBAy8t5rnT6rX"},{"comment":"/**\n\t * @name $like\n\t * @summary Comparison where expression equals a pattern value\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {String}\tSpecifies the value to compare with\n\t *\n\t * @return {String}\t\t`expr` LIKE <value>\n\t */","meta":{"range":[6742,7097],"filename":"comparison.js","lineno":206,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$like","summary":"Comparison where expression equals a pattern value","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the value to compare with","name":"value","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"`expr` LIKE <value>"}],"scope":"static","longname":"Comparison.$like","kind":"member","___id":"T000014R000023","___s":true,"longnameLower":"comparison.$like","depths":["Comparison","$like"],"depth0":"Comparison","depth1":"$like","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L206","hashId":"Comparison-like","_id":"jBgKZd1IjCawU2yy"},{"comment":"/**\n\t * @name $lt\n\t * @summary Comparison where expression is lower than a value\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[3144,3455],"filename":"comparison.js","lineno":102,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$lt","summary":"Comparison where expression is lower than a value","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$lt","kind":"member","___id":"T000014R000016","___s":true,"longnameLower":"comparison.$lt","depths":["Comparison","$lt"],"depth0":"Comparison","depth1":"$lt","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L102","hashId":"Comparison-lt","_id":"juEN3EkwydVIkTUV"},{"comment":"/**\n\t * @name $lte\n\t * @summary Comparison where expression is lower or equal than a value\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[3610,3931],"filename":"comparison.js","lineno":116,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$lte","summary":"Comparison where expression is lower or equal than a value","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$lte","kind":"member","___id":"T000014R000017","___s":true,"longnameLower":"comparison.$lte","depths":["Comparison","$lte"],"depth0":"Comparison","depth1":"$lte","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L116","hashId":"Comparison-lte","_id":"MBhL0q9eBThrmoth"},{"comment":"/**\n\t * @name $ne\n\t * @summary Comparison where expression is not equal to a value\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[1727,2040],"filename":"comparison.js","lineno":60,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$ne","summary":"Comparison where expression is not equal to a value","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$ne","kind":"member","___id":"T000014R000013","___s":true,"longnameLower":"comparison.$ne","depths":["Comparison","$ne"],"depth0":"Comparison","depth1":"$ne","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L60","hashId":"Comparison-ne","_id":"js6y7tzSglzjP62N"},{"comment":"/**\n\t * @name $nin\n\t * @summary Comparison where expression is not in the given list of items\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {Array}\tSpecifies the items of the IN clause\n\t */","meta":{"range":[4564,4883],"filename":"comparison.js","lineno":144,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$nin","summary":"Comparison where expression is not in the given list of items","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["Array"]},"description":"Specifies the items of the IN clause","name":"value","typeStr":"Array"}],"scope":"static","longname":"Comparison.$nin","kind":"member","___id":"T000014R000019","___s":true,"longnameLower":"comparison.$nin","depths":["Comparison","$nin"],"depth0":"Comparison","depth1":"$nin","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L144","hashId":"Comparison-nin","_id":"RmrqNqj2DPkTyKQi"},{"comment":"/**\n\t * @name $startsWith\n\t * @summary Comparison where expression starts with a value\n\t * @memberOf Comparison\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {String}\tSpecifies the value to compare with\n\t *\n\t * @return {String}\t\t`expr` LIKE 'value%'\n\t */","meta":{"range":[5049,5408],"filename":"comparison.js","lineno":158,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$startsWith","summary":"Comparison where expression starts with a value","memberof":"Comparison","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the value to compare with","name":"value","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"`expr` LIKE 'value%'"}],"scope":"static","longname":"Comparison.$startsWith","kind":"member","___id":"T000014R000020","___s":true,"longnameLower":"comparison.$startswith","depths":["Comparison","$startsWith"],"depth0":"Comparison","depth1":"$startsWith","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L158","hashId":"Comparison-startsWith","_id":"d0NCyr8lUKkr0J3Q"},{"comment":"/**\n\t * @before\n\t *\n\t * # CREATE INDEX Statements\n\t *\n\t * To create a new Index in the database you have to use the `$create` operator.\n\t * Check the Syntax and Examples.\n\t *\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$index: 'idx_last_name',\n\t * \t$table: 'people',\n\t * \t$columns: {\n\t * \t\tlast_name: { $asc: true },\n\t * \t\tfirst_name: { $asc: true }\n\t * \t},\n\t * \t$using: 'btree'\n\t * }\n\t * ```\n\t *\n\t * @name CreateIndex\n\t * @summary Main operator to generate an `CREATE INDEX` Statement\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * CREATE { UNIQUE [$unique] } INDEX { IF NOT EXISTS [$ine] } <$index>\n\t * \tON <$table> { USING [$using] } ( <$columns> );\n\t * ```\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details of the $create operator\n\t */","meta":{"range":[303,1078],"filename":"create-index.js","lineno":14,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"tags":[{"originalTitle":"before","title":"before","text":"# CREATE INDEX Statements\n\nTo create a new Index in the database you have to use the `$create` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$create: {\n\t$index: 'idx_last_name',\n\t$table: 'people',\n\t$columns: {\n\t\tlast_name: { $asc: true },\n\t\tfirst_name: { $asc: true }\n\t},\n\t$using: 'btree'\n}\n```","value":"# CREATE INDEX Statements\n\nTo create a new Index in the database you have to use the `$create` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$create: {\n\t$index: 'idx_last_name',\n\t$table: 'people',\n\t$columns: {\n\t\tlast_name: { $asc: true },\n\t\tfirst_name: { $asc: true }\n\t},\n\t$using: 'btree'\n}\n```"},{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"name":"CreateIndex","summary":"Main operator to generate an `CREATE INDEX` Statement\n\n**Syntax**\n```syntax\nCREATE { UNIQUE [$unique] } INDEX { IF NOT EXISTS [$ine] } <$index>\n\tON <$table> { USING [$using] } ( <$columns> );\n```","params":[{"type":{"names":["Object"]},"description":"Specifies the details of the $create operator","name":"query","typeStr":"Object"}],"longname":"CreateIndex","kind":"member","scope":"global","___id":"T000011R000002","___s":true,"longnameLower":"createindex","depths":["CreateIndex"],"depth0":"CreateIndex","before":"# CREATE INDEX Statements\n\nTo create a new Index in the database you have to use the `$create` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$create: {\n\t$index: 'idx_last_name',\n\t$table: 'people',\n\t$columns: {\n\t\tlast_name: { $asc: true },\n\t\tfirst_name: { $asc: true }\n\t},\n\t$using: 'btree'\n}\n```","isddl":true,"ansi":"true","category":"DDL","arguments":"query","gitRelative":"/lib/ansi/create-index.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-index.js#L14","hashId":"CreateIndex","_id":"EguFK4h8qmj4Eyur"},{"comment":"/**\n\t * @name $index\n\t * @summary Specifies the name of the Index for the `CREATE INDEX` Statement\n\t *\n\t * @memberOf CreateIndex\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param index\t {String}\n\t * Specifies the Name of the Index.\n\t */","meta":{"range":[1233,1465],"filename":"create-index.js","lineno":52,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$index","summary":"Specifies the name of the Index for the `CREATE INDEX` Statement","memberof":"CreateIndex","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Name of the Index.","name":"index","typeStr":"String"}],"scope":"static","longname":"CreateIndex.$index","kind":"member","___id":"T000011R000005","___s":true,"longnameLower":"createindex.$index","depths":["CreateIndex","$index"],"depth0":"CreateIndex","depth1":"$index","isddl":true,"ansi":"true","category":"DDL","arguments":"index","gitRelative":"/lib/ansi/create-index.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-index.js#L52","hashId":"CreateIndex-index","_id":"fHYgVnWDsu0A2R48"},{"comment":"/**\n\t * @name $using\n\t * @summary Specifies the `USING` option for the `CREATE INDEX` statement.\n\t *\n\t * @memberOf CreateIndex\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param value\t {Boolean}\n\t * Specifies the name of the index method to be used. Choices are btree or hash. (additionally for PostgreSQL: gist, spgist, gin, and brin)\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$index: 'idx_people',\n\t * \t$using: 'btree',\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[2066,2530],"filename":"create-index.js","lineno":81,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$using","summary":"Specifies the `USING` option for the `CREATE INDEX` statement.","memberof":"CreateIndex","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"Specifies the name of the index method to be used. Choices are btree or hash. (additionally for PostgreSQL: gist, spgist, gin, and brin)\n\n**Example**\n\n```javascript\n$create: {\n\t$index: 'idx_people',\n\t$using: 'btree',\n\t...\n}\n```","name":"value","typeStr":"Boolean"}],"scope":"static","longname":"CreateIndex.$using","kind":"member","___id":"T000011R000006","___s":true,"longnameLower":"createindex.$using","depths":["CreateIndex","$using"],"depth0":"CreateIndex","depth1":"$using","isddl":true,"ansi":"true","category":"DDL","arguments":"value","gitRelative":"/lib/ansi/create-index.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-index.js#L81","hashId":"CreateIndex-using","_id":"BBFAyrtlr1KMmPGu"},{"comment":"/**\n\t * @before\n\t *\n\t * # CREATE TABLE Statements\n\t *\n\t * To create a new Table in the database you have to use the `$create` operator.\n\t * Check the Syntax and Examples.\n\t *\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\t_id: { $column: { $type: 'VARCHAR', $length: 32, $notNull: true } },\n\t * \t\tfirst_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t * \t\tlast_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t * \t\tage: { $column: { $type: 'INTEGER' } },\n\t *\n\t * \t\tpk_people: { $constraint: { $primary: true, $columns: '_id' } }\n\t * \t}\n\t * }\n\t * ```\n\t *\n\t * @name CreateTable\n\t * @summary Main operator to generate an `CREATE TABLE` Statement\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * CREATE { TEMPORARY [$temp] } TABLE { IF NOT EXISTS [$ine] } <$table>\n\t * \t<$define> (columns, ..., CONSTRAINTS, ...);\n\t * ```\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details of the $create operator\n\t */","meta":{"range":[870,1850],"filename":"create-table.js","lineno":38,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"tags":[{"originalTitle":"before","title":"before","text":"# CREATE TABLE Statements\n\nTo create a new Table in the database you have to use the `$create` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\t_id: { $column: { $type: 'VARCHAR', $length: 32, $notNull: true } },\n\t\tfirst_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t\tlast_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t\tage: { $column: { $type: 'INTEGER' } },\n\n\t\tpk_people: { $constraint: { $primary: true, $columns: '_id' } }\n\t}\n}\n```","value":"# CREATE TABLE Statements\n\nTo create a new Table in the database you have to use the `$create` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\t_id: { $column: { $type: 'VARCHAR', $length: 32, $notNull: true } },\n\t\tfirst_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t\tlast_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t\tage: { $column: { $type: 'INTEGER' } },\n\n\t\tpk_people: { $constraint: { $primary: true, $columns: '_id' } }\n\t}\n}\n```"},{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"name":"CreateTable","summary":"Main operator to generate an `CREATE TABLE` Statement\n\n**Syntax**\n```syntax\nCREATE { TEMPORARY [$temp] } TABLE { IF NOT EXISTS [$ine] } <$table>\n\t<$define> (columns, ..., CONSTRAINTS, ...);\n```","params":[{"type":{"names":["Object"]},"description":"Specifies the details of the $create operator","name":"query","typeStr":"Object"}],"longname":"CreateTable","kind":"member","scope":"global","___id":"T000003R000004","___s":true,"longnameLower":"createtable","depths":["CreateTable"],"depth0":"CreateTable","before":"# CREATE TABLE Statements\n\nTo create a new Table in the database you have to use the `$create` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\t_id: { $column: { $type: 'VARCHAR', $length: 32, $notNull: true } },\n\t\tfirst_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t\tlast_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t\tage: { $column: { $type: 'INTEGER' } },\n\n\t\tpk_people: { $constraint: { $primary: true, $columns: '_id' } }\n\t}\n}\n```","isddl":true,"ansi":"true","category":"DDL","arguments":"query","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L38","hashId":"CreateTable","_id":"eQxjip9IsTYd3DLK"},{"comment":"/**\n\t * @name CreateTable\n\t * @summary Main operator to generate an `CREATE TABLE` Statement for the `MySQL` language dialect.\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * CREATE { TEMPORARY [$temp] } TABLE { IF NOT EXISTS [$ine] } <$table>  (\n\t * \t<$define> (columns, ..., CONSTRAINTS, ...);\n\t *\n\t * )\n\t * { ENGINE [$engine] }\n\t * { DEFAULT COLLATE [$collate] }\n\t * { TABLESPACE [$tablespace] }\n\t * ```\n\t * @isddl true\n\t * @mysql true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details of the $create operator\n\t */","meta":{"range":[87,598],"filename":"create-table.js","lineno":6,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"CreateTable","summary":"Main operator to generate an `CREATE TABLE` Statement for the `MySQL` language dialect.\n\n**Syntax**\n```syntax\nCREATE { TEMPORARY [$temp] } TABLE { IF NOT EXISTS [$ine] } <$table>  (\n\t<$define> (columns, ..., CONSTRAINTS, ...);\n\n)\n{ ENGINE [$engine] }\n{ DEFAULT COLLATE [$collate] }\n{ TABLESPACE [$tablespace] }\n```","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the details of the $create operator","name":"query","typeStr":"Object"}],"longname":"CreateTable","kind":"member","scope":"global","___id":"T000013R000004","___s":true,"longnameLower":"createtable","depths":["CreateTable"],"depth0":"CreateTable","isddl":true,"mysql":"true","category":"DDL","arguments":"query","gitRelative":"/lib/mysql/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/create-table.js#L6","hashId":"CreateTable","_id":"icpEI3mMpwgWOGyT"},{"comment":"/**\n\t * @name CreateTable\n\t * @summary Main operator to generate an `CREATE TABLE` Statement\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * CREATE { TEMPORARY [$temp] } { UNLOGGED [$unlogged] } TABLE { IF NOT EXISTS [$ine] } <$table>  (\n\t * \t<$define> (columns, ..., CONSTRAINTS, ...);\n\t * )\n\t * { WITH [$with] (\n\t * \tOIDS = TRUE|FALSE [$oids]\n\t * )}\n\t * { TABLESPACE [$tablespace] }\n\t * ```\n\t * @isddl true\n\t * @postgres true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details of the $create operator\n\t */","meta":{"range":[87,587],"filename":"create-table.js","lineno":6,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"CreateTable","summary":"Main operator to generate an `CREATE TABLE` Statement\n\n**Syntax**\n```syntax\nCREATE { TEMPORARY [$temp] } { UNLOGGED [$unlogged] } TABLE { IF NOT EXISTS [$ine] } <$table>  (\n\t<$define> (columns, ..., CONSTRAINTS, ...);\n)\n{ WITH [$with] (\n\tOIDS = TRUE|FALSE [$oids]\n)}\n{ TABLESPACE [$tablespace] }\n```","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the details of the $create operator","name":"query","typeStr":"Object"}],"longname":"CreateTable","kind":"member","scope":"global","___id":"T000030R000004","___s":true,"longnameLower":"createtable","depths":["CreateTable"],"depth0":"CreateTable","isddl":true,"postgres":"true","category":"DDL","arguments":"query","gitRelative":"/lib/postgreSQL/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/create-table.js#L6","hashId":"CreateTable","_id":"6D0HFi93tVB2bqoh"},{"comment":"/**\n\t * @name $define\n\t * @summary Specifies the columns and constraints for the `CREATE TABLE` Statement\n\t *\n\t * @memberOf CreateTable\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param columnDef\t {Object}\n\t * Specifies the columns and constraints as Object for the `CREATE TABLE` Statement\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\tpeople_id: { $column: { $type: 'INTEGER', $notNull: true } },\n\t * \t\tfirst_name: { $column: { $type: 'VARCHAR', $length: 32, $notNull: true } },\n\t * \t\tlast_name: { $column: { $type: 'VARCHAR', $length: 32, $notNull: true } },\n\t *\n\t * \t\tpk_people: { $constraint: { $primary: true, $columns: '_id' } }\n\t * \t}\n\t * }\n\t * ```\n\t */","meta":{"range":[2718,3431],"filename":"create-table.js","lineno":100,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$define","summary":"Specifies the columns and constraints for the `CREATE TABLE` Statement","memberof":"CreateTable","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the columns and constraints as Object for the `CREATE TABLE` Statement\n\n**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\tpeople_id: { $column: { $type: 'INTEGER', $notNull: true } },\n\t\tfirst_name: { $column: { $type: 'VARCHAR', $length: 32, $notNull: true } },\n\t\tlast_name: { $column: { $type: 'VARCHAR', $length: 32, $notNull: true } },\n\n\t\tpk_people: { $constraint: { $primary: true, $columns: '_id' } }\n\t}\n}\n```","name":"columnDef","typeStr":"Object"}],"scope":"static","longname":"CreateTable.$define","kind":"member","___id":"T000003R000014","___s":true,"longnameLower":"createtable.$define","depths":["CreateTable","$define"],"depth0":"CreateTable","depth1":"$define","isddl":true,"ansi":"true","category":"DDL","arguments":"columnDef","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L100","hashId":"CreateTable-define","_id":"F6wKtUF1mJSG5gVM"},{"comment":"/**\n\t * @name $column\n\t * @summary Main operator to define a column on the `CREATE TABLE` Statement for the `postgreSQL` language dialect.\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * [$type] [$length]\n\t * \t{ NOT NULL [$notNull] }\n\t * \t{ DEFAULT [$default] }\n\t * \t{ GENERATED (BY DEFAULT | ALWAYS) AS IDENTITY [$identity] }\n\t * \t{ PRIMARY KEY [$primary] }\n\t * \t{ UNIQUE [$unique] }\n\t * \t{ CHECK [$check] }\n\t * \t{ REFERENCES [$references] }\n\t * \t{ COLLATE [$collate] }\n\t * ```\n\t * @memberOf CreateTable.$define\n\t * @isddl true\n\t * @postgres true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details of the $create operator\n\t */","meta":{"range":[872,1492],"filename":"create-table.js","lineno":35,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$column","summary":"Main operator to define a column on the `CREATE TABLE` Statement for the `postgreSQL` language dialect.\n\n**Syntax**\n```syntax\n[$type] [$length]\n\t{ NOT NULL [$notNull] }\n\t{ DEFAULT [$default] }\n\t{ GENERATED (BY DEFAULT | ALWAYS) AS IDENTITY [$identity] }\n\t{ PRIMARY KEY [$primary] }\n\t{ UNIQUE [$unique] }\n\t{ CHECK [$check] }\n\t{ REFERENCES [$references] }\n\t{ COLLATE [$collate] }\n```","memberof":"CreateTable.$define","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the details of the $create operator","name":"query","typeStr":"Object"}],"scope":"static","longname":"CreateTable.$define.$column","kind":"member","___id":"T000030R000005","___s":true,"longnameLower":"createtable.$define.$column","depths":["CreateTable","$define","$column"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","isddl":true,"postgres":"true","category":"DDL","arguments":"query","gitRelative":"/lib/postgreSQL/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/create-table.js#L35","hashId":"CreateTable-define-column","_id":"BBZAa0lZjiVFBTcd"},{"comment":"/**\n\t * @name $column\n\t * @summary Specifies a Column\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * [$type] [$length]\n\t * \t{ NOT NULL [$notNull] }\n\t * \t{ DEFAULT [$default] }\n\t * \t{ PRIMARY KEY [$primary] }\n\t * \t{ UNIQUE [$unique] }\n\t * \t{ CHECK [$check] }\n\t * \t{ REFERENCES [$references] }\n\t * ```\n\t * @memberOf CreateTable.$define\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param column\t {String}\n\t * Specifies a Column.\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\t_id: { $column: { $type: 'VARCHAR', $length: 32, $notNull: true } },\n\t * \t\tfirst_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t * \t\tlast_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t * \t\tage: { $column: { $type: 'INTEGER' } }\n\t * \t}\n\t *\t...\n\t * }\n\t * ```\n\t */","meta":{"range":[4557,5348],"filename":"create-table.js","lineno":173,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$column","summary":"Specifies a Column\n\n**Syntax**\n```syntax\n[$type] [$length]\n\t{ NOT NULL [$notNull] }\n\t{ DEFAULT [$default] }\n\t{ PRIMARY KEY [$primary] }\n\t{ UNIQUE [$unique] }\n\t{ CHECK [$check] }\n\t{ REFERENCES [$references] }\n```","memberof":"CreateTable.$define","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies a Column.\n\n**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\t_id: { $column: { $type: 'VARCHAR', $length: 32, $notNull: true } },\n\t\tfirst_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t\tlast_name: { $column: { $type: 'VARCHAR', $length: 50 } },\n\t\tage: { $column: { $type: 'INTEGER' } }\n\t}\n\t...\n}\n```","name":"column","typeStr":"String"}],"scope":"static","longname":"CreateTable.$define.$column","kind":"member","___id":"T000003R000017","___s":true,"longnameLower":"createtable.$define.$column","depths":["CreateTable","$define","$column"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","isddl":true,"ansi":"true","category":"DDL","arguments":"column","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L173","hashId":"CreateTable-define-column","_id":"9hTJmTMGQs0xElAK"},{"comment":"/**\n\t * @name $autoInc\n\t * @summary Specifies the `AUTO_INCREMENT` option of a column or defines the\n\t * startvalue for the new table if it is used directly as property of $create.\n\t *\n\t * @memberOf CreateTable.$define.$column\n\t * @isddl true\n\t * @mysql true\n\t *\n\t * @param value\t {Number | Boolean}\n\t * To use it, set the value to `true` or Number for the startvalue.\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$autoInc: 100, // start the AUTO_INCREMENT with 100\n\t * \t$define: {\n\t * \t\tid: { $column: { $type: 'INTEGER', $autoInc: true, $primary: true } },\n\t * \t\t...\n\t * \t}\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[1715,2358],"filename":"create-table.js","lineno":67,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$autoInc","summary":"Specifies the `AUTO_INCREMENT` option of a column or defines the\nstartvalue for the new table if it is used directly as property of $create.","memberof":"CreateTable.$define.$column","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Number","Boolean"]},"description":"To use it, set the value to `true` or Number for the startvalue.\n\n**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t$autoInc: 100, // start the AUTO_INCREMENT with 100\n\t$define: {\n\t\tid: { $column: { $type: 'INTEGER', $autoInc: true, $primary: true } },\n\t\t...\n\t}\n\t...\n}\n```","name":"value","typeStr":"Number | Boolean"}],"scope":"static","longname":"CreateTable.$define.$column.$autoInc","kind":"member","___id":"T000013R000006","___s":true,"longnameLower":"createtable.$define.$column.$autoinc","depths":["CreateTable","$define","$column","$autoInc"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","depth3":"$autoInc","isddl":true,"mysql":"true","category":"DDL","arguments":"value","gitRelative":"/lib/mysql/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/create-table.js#L67","hashId":"CreateTable-define-column-autoInc","_id":"L3TReVwopmWUfSIK"},{"comment":"/**\n\t * @name $collate\n\t * @summary Specifies the `COLLATE` option a column.\n\t *\n\t * @memberOf CreateTable.$define.$column\n\t * @isddl true\n\t * @postgres true\n\t *\n\t * @param value\t {String}\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\tlast_name: { $column: { $type: 'TEXT', $collate: 'fr_FR.UTF8' } },\n\t * \t\t...\n\t * \t}\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[2682,3084],"filename":"create-table.js","lineno":103,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$collate","summary":"Specifies the `COLLATE` option a column.","memberof":"CreateTable.$define.$column","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\tlast_name: { $column: { $type: 'TEXT', $collate: 'fr_FR.UTF8' } },\n\t\t...\n\t}\n\t...\n}\n```","name":"value","typeStr":"String"}],"scope":"static","longname":"CreateTable.$define.$column.$collate","kind":"member","___id":"T000030R000007","___s":true,"longnameLower":"createtable.$define.$column.$collate","depths":["CreateTable","$define","$column","$collate"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","depth3":"$collate","isddl":true,"postgres":"true","category":"DDL","arguments":"value","gitRelative":"/lib/postgreSQL/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/create-table.js#L103","hashId":"CreateTable-define-column-collate","_id":"0mfWYPbrcN2HZY9x"},{"comment":"/**\n\t * @name $collate\n\t * @summary Specifies the `COLLATE` option a column.\n\t *\n\t * @memberOf CreateTable.$define.$column\n\t * @isddl true\n\t * @mysql true\n\t *\n\t * @param value\t {String}\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\tlast_name: { $column: { $type: 'TEXT', $collate: 'fr_FR.UTF8' } },\n\t * \t\t...\n\t * \t}\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[2654,3053],"filename":"create-table.js","lineno":103,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$collate","summary":"Specifies the `COLLATE` option a column.","memberof":"CreateTable.$define.$column","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\tlast_name: { $column: { $type: 'TEXT', $collate: 'fr_FR.UTF8' } },\n\t\t...\n\t}\n\t...\n}\n```","name":"value","typeStr":"String"}],"scope":"static","longname":"CreateTable.$define.$column.$collate","kind":"member","___id":"T000013R000007","___s":true,"longnameLower":"createtable.$define.$column.$collate","depths":["CreateTable","$define","$column","$collate"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","depth3":"$collate","isddl":true,"mysql":"true","category":"DDL","arguments":"value","gitRelative":"/lib/mysql/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/create-table.js#L103","hashId":"CreateTable-define-column-collate","_id":"Dp6Hcwv722T9NRtG"},{"comment":"/**\n\t * @name $column\n\t * @summary Main operator to define a column on the `CREATE TABLE` Statement for the `MySQL` language dialect.\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * [$type] [$length]\n\t * \t{ NOT NULL [$notNull] }\n\t * \t{ DEFAULT [$default] }\n\t * \t{ AUTO_INCREMENT [$autoInc] }\n\t * \t{ PRIMARY KEY [$primary] }\n\t * \t{ UNIQUE [$unique] }\n\t * \t{ REFERENCES [$references] }\n\t * \t{ COLLATE [$collate] }\n\t * ```\n\t * @memberOf CreateTable.$define.$column\n\t * @isddl true\n\t * @mysql true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details of the $create operator\n\t */","meta":{"range":[885,1451],"filename":"create-table.js","lineno":35,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$column","summary":"Main operator to define a column on the `CREATE TABLE` Statement for the `MySQL` language dialect.\n\n**Syntax**\n```syntax\n[$type] [$length]\n\t{ NOT NULL [$notNull] }\n\t{ DEFAULT [$default] }\n\t{ AUTO_INCREMENT [$autoInc] }\n\t{ PRIMARY KEY [$primary] }\n\t{ UNIQUE [$unique] }\n\t{ REFERENCES [$references] }\n\t{ COLLATE [$collate] }\n```","memberof":"CreateTable.$define.$column","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the details of the $create operator","name":"query","typeStr":"Object"}],"scope":"static","longname":"CreateTable.$define.$column.$column","kind":"member","___id":"T000013R000005","___s":true,"longnameLower":"createtable.$define.$column.$column","depths":["CreateTable","$define","$column","$column"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","depth3":"$column","isddl":true,"mysql":"true","category":"DDL","arguments":"query","gitRelative":"/lib/mysql/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/create-table.js#L35","hashId":"CreateTable-define-column-column","_id":"ZIMrfHtF9k0BuGOU"},{"comment":"/**\n\t * @name $default\n\t * @summary Specifies the `DEFAULT` option of a Column on the $create\n\t *\n\t * @memberOf CreateTable.$define.$column\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param default\t {Number | String}\n\t * Specifies the `DEFAULT` option of a Column on the $create->$define.$column\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\t// creates a VARCHAR(50) column NOT NULL DEFAULT 'John'\n\t * \t\tlast_name: { $column: { $type: 'VARCHAR', $length: 50, $notNull: true, $default: 'John' } },\n\t * \t}\n\t *\t...\n\t * }\n\t * ```\n\t */","meta":{"range":[7927,8501],"filename":"create-table.js","lineno":311,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$default","summary":"Specifies the `DEFAULT` option of a Column on the $create","memberof":"CreateTable.$define.$column","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Number","String"]},"description":"Specifies the `DEFAULT` option of a Column on the $create->$define.$column\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\t// creates a VARCHAR(50) column NOT NULL DEFAULT 'John'\n\t\tlast_name: { $column: { $type: 'VARCHAR', $length: 50, $notNull: true, $default: 'John' } },\n\t}\n\t...\n}\n```","name":"default","typeStr":"Number | String"}],"scope":"static","longname":"CreateTable.$define.$column.$default","kind":"member","___id":"T000003R000021","___s":true,"longnameLower":"createtable.$define.$column.$default","depths":["CreateTable","$define","$column","$default"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","depth3":"$default","isddl":true,"ansi":"true","category":"DDL","arguments":"default","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L311","hashId":"CreateTable-define-column-default","_id":"oa2NcV7uBgAxx7Vz"},{"comment":"/**\n\t * @name $identity\n\t * @summary Specifies the `GENERATED ALWAYS AS IDENTITY` option a column.\n\t *\n\t * @memberOf CreateTable.$define.$column\n\t * @isddl true\n\t * @postgres true\n\t *\n\t * @param value\t {String | Boolean}\n\t * To use it, set the value to `true` or 'default'\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\tid: { $column: { $type: 'INTEGER', $identity: true } },\n\t * \t\t...\n\t * \t}\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[1808,2283],"filename":"create-table.js","lineno":69,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$identity","summary":"Specifies the `GENERATED ALWAYS AS IDENTITY` option a column.","memberof":"CreateTable.$define.$column","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["String","Boolean"]},"description":"To use it, set the value to `true` or 'default'\n\n**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\tid: { $column: { $type: 'INTEGER', $identity: true } },\n\t\t...\n\t}\n\t...\n}\n```","name":"value","typeStr":"String | Boolean"}],"scope":"static","longname":"CreateTable.$define.$column.$identity","kind":"member","___id":"T000030R000006","___s":true,"longnameLower":"createtable.$define.$column.$identity","depths":["CreateTable","$define","$column","$identity"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","depth3":"$identity","isddl":true,"postgres":"true","category":"DDL","arguments":"value","gitRelative":"/lib/postgreSQL/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/create-table.js#L69","hashId":"CreateTable-define-column-identity","_id":"GKNudtcxXQK3mjLH"},{"comment":"/**\n\t * @name $length\n\t * @summary Specifies the length of Column-Type\n\t *\n\t * @memberOf CreateTable.$define.$column\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param type\t {String}\n\t * Specifies the length of a Datatype used by $create->$define->$column->$type\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\t// creates a VARCHAR(50) column\n\t * \t\tlast_name: { $type: 'VARCHAR', $length: 50 },\n\t * \t}\n\t *\t...\n\t * }\n\t * ```\n\t */","meta":{"range":[6512,6981],"filename":"create-table.js","lineno":253,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$length","summary":"Specifies the length of Column-Type","memberof":"CreateTable.$define.$column","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the length of a Datatype used by $create->$define->$column->$type\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\t// creates a VARCHAR(50) column\n\t\tlast_name: { $type: 'VARCHAR', $length: 50 },\n\t}\n\t...\n}\n```","name":"type","typeStr":"String"}],"scope":"static","longname":"CreateTable.$define.$column.$length","kind":"member","___id":"T000003R000019","___s":true,"longnameLower":"createtable.$define.$column.$length","depths":["CreateTable","$define","$column","$length"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","depth3":"$length","isddl":true,"ansi":"true","category":"DDL","arguments":"type","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L253","hashId":"CreateTable-define-column-length","_id":"BN75iNlDDcbVBQ91"},{"comment":"/**\n\t * @name $notNull\n\t * @summary Specifies the `NOT NULL` option of a Column on the $create\n\t *\n\t * @memberOf CreateTable.$define.$column\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param notNull\t {Boolean}\n\t * Specifies the `NOT NULL` option of a Column on the $create->$define.$column\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\t// creates a VARCHAR(50) column NOT NULL\n\t * \t\tlast_name: { $type: 'VARCHAR', $length: 50, $notNull: true },\n\t * \t}\n\t *\t...\n\t * }\n\t * ```\n\t */","meta":{"range":[7188,7710],"filename":"create-table.js","lineno":282,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$notNull","summary":"Specifies the `NOT NULL` option of a Column on the $create","memberof":"CreateTable.$define.$column","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"Specifies the `NOT NULL` option of a Column on the $create->$define.$column\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\t// creates a VARCHAR(50) column NOT NULL\n\t\tlast_name: { $type: 'VARCHAR', $length: 50, $notNull: true },\n\t}\n\t...\n}\n```","name":"notNull","typeStr":"Boolean"}],"scope":"static","longname":"CreateTable.$define.$column.$notNull","kind":"member","___id":"T000003R000020","___s":true,"longnameLower":"createtable.$define.$column.$notnull","depths":["CreateTable","$define","$column","$notNull"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","depth3":"$notNull","isddl":true,"ansi":"true","category":"DDL","arguments":"notNull","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L282","hashId":"CreateTable-define-column-notNull","_id":"o1oPm3TthjhKOMYN"},{"comment":"/**\n\t * @name $type\n\t * @summary Specifies the Column-Type of a new column to create with `$create`\n\t *\n\t * @memberOf CreateTable.$define.$column\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param type\t {String}\n\t * Specifies the datatype of a Column.\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\t_id: { $type: 'VARCHAR', $length: 32, $notNull: true },\n\t * \t\tfirst_name: { $type: 'VARCHAR', $length: 50 },\n\t * \t\tlast_name: { $type: 'VARCHAR', $length: 50 },\n\t * \t\tage: { $type: 'INTEGER' }\n\t * \t}\n\t *\t...\n\t * }\n\t * ```\n\t */","meta":{"range":[5754,6321],"filename":"create-table.js","lineno":222,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$type","summary":"Specifies the Column-Type of a new column to create with `$create`","memberof":"CreateTable.$define.$column","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the datatype of a Column.\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\t_id: { $type: 'VARCHAR', $length: 32, $notNull: true },\n\t\tfirst_name: { $type: 'VARCHAR', $length: 50 },\n\t\tlast_name: { $type: 'VARCHAR', $length: 50 },\n\t\tage: { $type: 'INTEGER' }\n\t}\n\t...\n}\n```","name":"type","typeStr":"String"}],"scope":"static","longname":"CreateTable.$define.$column.$type","kind":"member","___id":"T000003R000018","___s":true,"longnameLower":"createtable.$define.$column.$type","depths":["CreateTable","$define","$column","$type"],"depth0":"CreateTable","depth1":"$define","depth2":"$column","depth3":"$type","isddl":true,"ansi":"true","category":"DDL","arguments":"type","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L222","hashId":"CreateTable-define-column-type","_id":"vAEDZjljkkRILqVk"},{"comment":"/**\n\t * @name $constraint\n\t * @summary Specifies a `CONSTRAINT` for the `CREATE TABLE` Statement\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * CONSTRAINT\n\t * \t{ PRIMARY KEY [$primary] }\n\t * \t{ UNIQUE [$unique] }\n\t * \t{ FOREIGN KEY [$foreignKey] }\n\t * \t{ CHECK [$check] }\n\t * \t[$columns]\n\t * ```\n\t * @memberOf CreateTable.$define\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param constraint\t {Object}\n\t * Specifies a constraint as Object for the `CREATE TABLE` Statement\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\t... // columns\n\t *\n\t * \t\tpk_people: { $constraint: { $primary: true, $columns: '_id' } },\n\t * \t\tuc_people_name: { $constraint: { $unique: true, $columns: ['first_name', 'last_name'] } }\n\t * \t}\n\t * }\n\t * ```\n\t */","meta":{"range":[8757,9527],"filename":"create-table.js","lineno":340,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$constraint","summary":"Specifies a `CONSTRAINT` for the `CREATE TABLE` Statement\n\n**Syntax**\n```syntax\nCONSTRAINT\n\t{ PRIMARY KEY [$primary] }\n\t{ UNIQUE [$unique] }\n\t{ FOREIGN KEY [$foreignKey] }\n\t{ CHECK [$check] }\n\t[$columns]\n```","memberof":"CreateTable.$define","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies a constraint as Object for the `CREATE TABLE` Statement\n\n**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\t... // columns\n\n\t\tpk_people: { $constraint: { $primary: true, $columns: '_id' } },\n\t\tuc_people_name: { $constraint: { $unique: true, $columns: ['first_name', 'last_name'] } }\n\t}\n}\n```","name":"constraint","typeStr":"Object"}],"scope":"static","longname":"CreateTable.$define.$constraint","kind":"member","___id":"T000003R000022","___s":true,"longnameLower":"createtable.$define.$constraint","depths":["CreateTable","$define","$constraint"],"depth0":"CreateTable","depth1":"$define","depth2":"$constraint","isddl":true,"ansi":"true","category":"DDL","arguments":"constraint","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L340","hashId":"CreateTable-define-constraint","_id":"vAE87boqhYQ7g6UE"},{"comment":"/**\n\t * @name $check\n\t * @summary Specifies the expression of a `CHECK CONSTRAINT` Statement.\n\t *\n\t * @memberOf CreateTable.$define.$constraint\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param check\t {Object}\n\t * Specifies the expression / condition to check\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t...\n\t * \t$define: {\n\t * \t\t$constraint: {\n\t * \t\t\tcheck_people_age: {\n\t * \t\t\t\t$check: {\n\t * \t\t\t\t\tage: { $gte: 18 }\n\t * \t\t\t\t}\n\t * \t\t\t}\n\t * \t\t}\n\t *\t\t...\n\t * \t}\n\t * }\n\t * ```\n\t */","meta":{"range":[14811,15326],"filename":"create-table.js","lineno":568,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$check","summary":"Specifies the expression of a `CHECK CONSTRAINT` Statement.","memberof":"CreateTable.$define.$constraint","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the expression / condition to check\n\n**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t...\n\t$define: {\n\t\t$constraint: {\n\t\t\tcheck_people_age: {\n\t\t\t\t$check: {\n\t\t\t\t\tage: { $gte: 18 }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t...\n\t}\n}\n```","name":"check","typeStr":"Object"}],"scope":"static","longname":"CreateTable.$define.$constraint.$check","kind":"member","___id":"T000003R000033","___s":true,"longnameLower":"createtable.$define.$constraint.$check","depths":["CreateTable","$define","$constraint","$check"],"depth0":"CreateTable","depth1":"$define","depth2":"$constraint","depth3":"$check","isddl":true,"ansi":"true","category":"DDL","arguments":"check","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L568","hashId":"CreateTable-define-constraint-check","_id":"vkyEvtmDQojMu4FG"},{"comment":"/**\n\t * @name $foreignKey\n\t * @summary Specifies the `FOREIGN KEY` option of a `CONSTRAINT` Statement.\n\t * Using `$foreignKey: true` the `$references` helper will be mandatory.\n\t *\n\t * @memberOf CreateTable.$define.$constraint\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param foreignKey\t {Boolean}\n\t * Specifies the `FOREIGN KEY` option of a Constraint on the $create->$define...$constraint\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t...\n\t * \t$define: {\n\t * \t\tfk_users: {\n\t * \t\t\t$constraint: {\n\t * \t\t\t\t$foreignKey: true,\n\t * \t\t\t\t$columns: '_id',\n\t * \t\t\t\t$references: {\n\t * \t\t\t\t\t$table: 'user_emails',\n\t * \t\t\t\t\t$columns: 'user_id',\n\t * \t\t\t\t\t$onDelete: 'CASCADE',\n\t * \t\t\t\t\t$onUpdate: 'RESTRICT'\n\t * \t\t\t\t}\n\t * \t\t\t},\n\t * \t\t}\n\t *\t\t...\n\t * \t}\n\t * }\n\t * ```\n\t */","meta":{"range":[11818,12612],"filename":"create-table.js","lineno":455,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$foreignKey","summary":"Specifies the `FOREIGN KEY` option of a `CONSTRAINT` Statement.\nUsing `$foreignKey: true` the `$references` helper will be mandatory.","memberof":"CreateTable.$define.$constraint","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"Specifies the `FOREIGN KEY` option of a Constraint on the $create->$define...$constraint\n\n**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t...\n\t$define: {\n\t\tfk_users: {\n\t\t\t$constraint: {\n\t\t\t\t$foreignKey: true,\n\t\t\t\t$columns: '_id',\n\t\t\t\t$references: {\n\t\t\t\t\t$table: 'user_emails',\n\t\t\t\t\t$columns: 'user_id',\n\t\t\t\t\t$onDelete: 'CASCADE',\n\t\t\t\t\t$onUpdate: 'RESTRICT'\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t\t...\n\t}\n}\n```","name":"foreignKey","typeStr":"Boolean"}],"scope":"static","longname":"CreateTable.$define.$constraint.$foreignKey","kind":"member","___id":"T000003R000029","___s":true,"longnameLower":"createtable.$define.$constraint.$foreignkey","depths":["CreateTable","$define","$constraint","$foreignKey"],"depth0":"CreateTable","depth1":"$define","depth2":"$constraint","depth3":"$foreignKey","isddl":true,"ansi":"true","category":"DDL","arguments":"foreignKey","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L455","hashId":"CreateTable-define-constraint-foreignKey","_id":"NPOXpn0XbI0sire6"},{"comment":"/**\n\t * @name $references\n\t * @summary Specifies the `REFERENCES` clause on the `FOREIGN KEY CONSTRAINT` Statement.\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * REFERENCES <$table> ( <$columns> )\n\t * \t{ ON DELETE [$onDelete] }\n\t * \t{ ON UPDATE [$onUpdate] }\n\t * ```\n\t * @memberOf CreateTable.$define.$constraint.$foreignKey\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param references\t {Object}\n\t * Specifies the `REFERENCES` clause. Example see [$foreignKey](DDL-Create.html#Create-define-constraint)\n\t */","meta":{"range":[12838,13332],"filename":"create-table.js","lineno":498,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$references","summary":"Specifies the `REFERENCES` clause on the `FOREIGN KEY CONSTRAINT` Statement.\n\n**Syntax**\n```syntax\nREFERENCES <$table> ( <$columns> )\n\t{ ON DELETE [$onDelete] }\n\t{ ON UPDATE [$onUpdate] }\n```","memberof":"CreateTable.$define.$constraint.$foreignKey","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the `REFERENCES` clause. Example see [$foreignKey](DDL-Create.html#Create-define-constraint)","name":"references","typeStr":"Object"}],"scope":"static","longname":"CreateTable.$define.$constraint.$foreignKey.$references","kind":"member","___id":"T000003R000030","___s":true,"longnameLower":"createtable.$define.$constraint.$foreignkey.$references","depths":["CreateTable","$define","$constraint","$foreignKey","$references"],"depth0":"CreateTable","depth1":"$define","depth2":"$constraint","depth3":"$foreignKey","depth4":"$references","isddl":true,"ansi":"true","category":"DDL","arguments":"references","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L498","hashId":"CreateTable-define-constraint-foreignKey-references","_id":"CsugRId1LRh0fRxc"},{"comment":"/**\n\t * @name $onDelete\n\t * @summary Specifies the `ON DELETE` option for the `REFERENCES` clause using the `FOREIGN KEY CONSTRAINT`.\n\t *\n\t * @memberOf CreateTable.$define.$constraint.$foreignKey.$references\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param onDelete\t {String}\n\t * Take one of the follwowing options:\n\t * - CASCADE\n\t * - RESTRICT\n\t * - SET NULL\n\t * - SET DEFAULT\n\t * - NO ACTION\n\t */","meta":{"range":[13597,13992],"filename":"create-table.js","lineno":522,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$onDelete","summary":"Specifies the `ON DELETE` option for the `REFERENCES` clause using the `FOREIGN KEY CONSTRAINT`.","memberof":"CreateTable.$define.$constraint.$foreignKey.$references","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Take one of the follwowing options:\n- CASCADE\n- RESTRICT\n- SET NULL\n- SET DEFAULT\n- NO ACTION","name":"onDelete","typeStr":"String"}],"scope":"static","longname":"CreateTable.$define.$constraint.$foreignKey.$references.$onDelete","kind":"member","___id":"T000003R000031","___s":true,"longnameLower":"createtable.$define.$constraint.$foreignkey.$references.$ondelete","depths":["CreateTable","$define","$constraint","$foreignKey","$references","$onDelete"],"depth0":"CreateTable","depth1":"$define","depth2":"$constraint","depth3":"$foreignKey","depth4":"$references","depth5":"$onDelete","isddl":true,"ansi":"true","category":"DDL","arguments":"onDelete","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L522","hashId":"CreateTable-define-constraint-foreignKey-references-onDelete","_id":"oWh2LhQpzn4BNT0W"},{"comment":"/**\n\t * @name $onUpdate\n\t * @summary Specifies the `ON UPDATE` option for the `REFERENCES` clause using the `FOREIGN KEY CONSTRAINT`.\n\t *\n\t * @memberOf CreateTable.$define.$constraint.$foreignKey.$references\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param onUpdate\t {String}\n\t * Specifies on of the follwowing options:\n\t * - CASCADE\n\t * - RESTRICT\n\t * - SET NULL\n\t * - SET DEFAULT\n\t * - NO ACTION\n\t */","meta":{"range":[14202,14601],"filename":"create-table.js","lineno":545,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$onUpdate","summary":"Specifies the `ON UPDATE` option for the `REFERENCES` clause using the `FOREIGN KEY CONSTRAINT`.","memberof":"CreateTable.$define.$constraint.$foreignKey.$references","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies on of the follwowing options:\n- CASCADE\n- RESTRICT\n- SET NULL\n- SET DEFAULT\n- NO ACTION","name":"onUpdate","typeStr":"String"}],"scope":"static","longname":"CreateTable.$define.$constraint.$foreignKey.$references.$onUpdate","kind":"member","___id":"T000003R000032","___s":true,"longnameLower":"createtable.$define.$constraint.$foreignkey.$references.$onupdate","depths":["CreateTable","$define","$constraint","$foreignKey","$references","$onUpdate"],"depth0":"CreateTable","depth1":"$define","depth2":"$constraint","depth3":"$foreignKey","depth4":"$references","depth5":"$onUpdate","isddl":true,"ansi":"true","category":"DDL","arguments":"onUpdate","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L545","hashId":"CreateTable-define-constraint-foreignKey-references-onUpdate","_id":"vuLUvHO4TvO8JiIy"},{"comment":"/**\n\t * @name $primary\n\t * @summary Specifies the `PRIMARY KEY` option of a `CONSTRAINT` Statement\n\t *\n\t * @memberOf CreateTable.$define.$constraint\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param primary\t {Boolean}\n\t * Specifies the `PRIMARY KEY` option of a Constraint on the $create->$define...$constraint\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$define: {\n\t * \t\t...\n\t * \t\t// creates CONSTRAINT `pk_people` PRIMARY KEY(_id)\n\t * \t\tpk_people: { $constraint: { $primary: true, $columns: '_id' } },\n\t * \t\t...\n\t * \t}\n\t *\t...\n\t * }\n\t * ```\n\t */","meta":{"range":[10194,10778],"filename":"create-table.js","lineno":390,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$primary","summary":"Specifies the `PRIMARY KEY` option of a `CONSTRAINT` Statement","memberof":"CreateTable.$define.$constraint","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"Specifies the `PRIMARY KEY` option of a Constraint on the $create->$define...$constraint\n\n**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t$define: {\n\t\t...\n\t\t// creates CONSTRAINT `pk_people` PRIMARY KEY(_id)\n\t\tpk_people: { $constraint: { $primary: true, $columns: '_id' } },\n\t\t...\n\t}\n\t...\n}\n```","name":"primary","typeStr":"Boolean"}],"scope":"static","longname":"CreateTable.$define.$constraint.$primary","kind":"member","___id":"T000003R000027","___s":true,"longnameLower":"createtable.$define.$constraint.$primary","depths":["CreateTable","$define","$constraint","$primary"],"depth0":"CreateTable","depth1":"$define","depth2":"$constraint","depth3":"$primary","isddl":true,"ansi":"true","category":"DDL","arguments":"primary","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L390","hashId":"CreateTable-define-constraint-primary","_id":"QUXTnpcOvyx6h6I4"},{"comment":"/**\n\t * @name $unique\n\t * @summary Specifies the `UNIQUE KEY` option of a `CONSTRAINT` Statement\n\t *\n\t * @memberOf CreateTable.$define.$constraint\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param unique\t {Boolean}\n\t * Specifies the `UNIQUE` option of a Constraint on the $create->$define...$constraint\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t...\n\t * \t$define: {\n\t * \t\t// creates CONSTRAINT `uk_people` UNIQUE KEY(`first_name`, `last_name`)\n\t * \t\tuk_people: { $constraint: { $unique: true, $columns: ['first_name', 'last_name'] } },\n\t * \t}\n\t *\t...\n\t * }\n\t * ```\n\t */","meta":{"range":[10998,11605],"filename":"create-table.js","lineno":423,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$unique","summary":"Specifies the `UNIQUE KEY` option of a `CONSTRAINT` Statement","memberof":"CreateTable.$define.$constraint","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"Specifies the `UNIQUE` option of a Constraint on the $create->$define...$constraint\n\n**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t...\n\t$define: {\n\t\t// creates CONSTRAINT `uk_people` UNIQUE KEY(`first_name`, `last_name`)\n\t\tuk_people: { $constraint: { $unique: true, $columns: ['first_name', 'last_name'] } },\n\t}\n\t...\n}\n```","name":"unique","typeStr":"Boolean"}],"scope":"static","longname":"CreateTable.$define.$constraint.$unique","kind":"member","___id":"T000003R000028","___s":true,"longnameLower":"createtable.$define.$constraint.$unique","depths":["CreateTable","$define","$constraint","$unique"],"depth0":"CreateTable","depth1":"$define","depth2":"$constraint","depth3":"$unique","isddl":true,"ansi":"true","category":"DDL","arguments":"unique","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L423","hashId":"CreateTable-define-constraint-unique","_id":"GR5S975r3Isu8Y6G"},{"comment":"/**\n\t * @name $engine\n\t * @summary Specifies the `ENGINE` option for the `CREATE TABLE` statement.\n\t *\n\t * @memberOf CreateTable\n\t * @isddl true\n\t * @mysql true\n\t *\n\t * @param value\t {String}\n\t * Specify the Engine as String e.g. 'InnoDb'\n\t *\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$engine: 'InnoDb',\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[3279,3645],"filename":"create-table.js","lineno":134,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$engine","summary":"Specifies the `ENGINE` option for the `CREATE TABLE` statement.","memberof":"CreateTable","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specify the Engine as String e.g. 'InnoDb'\n\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$engine: 'InnoDb',\n\t...\n}\n```","name":"value","typeStr":"String"}],"scope":"static","longname":"CreateTable.$engine","kind":"member","___id":"T000013R000008","___s":true,"longnameLower":"createtable.$engine","depths":["CreateTable","$engine"],"depth0":"CreateTable","depth1":"$engine","isddl":true,"mysql":"true","category":"DDL","arguments":"value","gitRelative":"/lib/mysql/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/create-table.js#L134","hashId":"CreateTable-engine","_id":"ARP09PwJBbaeUzR1"},{"comment":"/**\n\t * @name $oids\n\t * @summary Specifies the `OIDS` option within the `WITH` clause for the `CREATE TABLE` statement.\n\t *\n\t * @memberOf CreateTable\n\t * @isddl true\n\t * @postgres true\n\t *\n\t * @param value\t {Object}\n\t * Specifies the `Storage Parameters` and the `OIDS` support.\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$with: { $oids: true }\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[4532,4938],"filename":"create-table.js","lineno":186,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$oids","summary":"Specifies the `OIDS` option within the `WITH` clause for the `CREATE TABLE` statement.","memberof":"CreateTable","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the `Storage Parameters` and the `OIDS` support.\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$with: { $oids: true }\n\t...\n}\n```","name":"value","typeStr":"Object"}],"scope":"static","longname":"CreateTable.$oids","kind":"member","___id":"T000030R000010","___s":true,"longnameLower":"createtable.$oids","depths":["CreateTable","$oids"],"depth0":"CreateTable","depth1":"$oids","isddl":true,"postgres":"true","category":"DDL","arguments":"value","gitRelative":"/lib/postgreSQL/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/create-table.js#L186","hashId":"CreateTable-oids","_id":"UkRZmQ1KTibXNLu4"},{"comment":"/**\n\t * @name $tablespace\n\t * @summary Specifies the `TABLESPACE` option for the `CREATE TABLE` statement.\n\t *\n\t * @memberOf CreateTable\n\t * @isddl true\n\t * @postgres true\n\t *\n\t * @param value\t {Object}\n\t * Specifies the `TABLESPACE` option.\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$tablespace: 'my_table_space'\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[5164,5540],"filename":"create-table.js","lineno":212,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$tablespace","summary":"Specifies the `TABLESPACE` option for the `CREATE TABLE` statement.","memberof":"CreateTable","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the `TABLESPACE` option.\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$tablespace: 'my_table_space'\n\t...\n}\n```","name":"value","typeStr":"Object"}],"scope":"static","longname":"CreateTable.$tablespace","kind":"member","___id":"T000030R000011","___s":true,"longnameLower":"createtable.$tablespace","depths":["CreateTable","$tablespace"],"depth0":"CreateTable","depth1":"$tablespace","isddl":true,"postgres":"true","category":"DDL","arguments":"value","gitRelative":"/lib/postgreSQL/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/create-table.js#L212","hashId":"CreateTable-tablespace","_id":"0N2vBvsLEjb96hjH"},{"comment":"/**\n\t * @name $tablespace\n\t * @summary Specifies the `TABLESPACE` option for the `CREATE TABLE` statement.\n\t *\n\t * @memberOf CreateTable\n\t * @isddl true\n\t * @mysql true\n\t *\n\t * @param value\t {Object}\n\t * Specifies the `TABLESPACE` option.\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$tablespace: 'my_table_space'\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[3852,4225],"filename":"create-table.js","lineno":161,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$tablespace","summary":"Specifies the `TABLESPACE` option for the `CREATE TABLE` statement.","memberof":"CreateTable","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the `TABLESPACE` option.\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$tablespace: 'my_table_space'\n\t...\n}\n```","name":"value","typeStr":"Object"}],"scope":"static","longname":"CreateTable.$tablespace","kind":"member","___id":"T000013R000009","___s":true,"longnameLower":"createtable.$tablespace","depths":["CreateTable","$tablespace"],"depth0":"CreateTable","depth1":"$tablespace","isddl":true,"mysql":"true","category":"DDL","arguments":"value","gitRelative":"/lib/mysql/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/create-table.js#L161","hashId":"CreateTable-tablespace","_id":"Vvlfj9EzSOyyaEBa"},{"comment":"/**\n\t * @name $temp\n\t * @summary Specifies the `TEMPORARY` option for the `CREATE TABLE` statement.\n\t *\n\t * @memberOf CreateTable\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param value\t {Boolean}\n\t * If the value is set to `true` the `TEMPORARY` option will be used.\n\t *\n\t * **Example**\n\t *\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$temp: true,\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[3956,4345],"filename":"create-table.js","lineno":145,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$temp","summary":"Specifies the `TEMPORARY` option for the `CREATE TABLE` statement.","memberof":"CreateTable","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"If the value is set to `true` the `TEMPORARY` option will be used.\n\n**Example**\n\n```javascript\n$create: {\n\t$table: 'people',\n\t$temp: true,\n\t...\n}\n```","name":"value","typeStr":"Boolean"}],"scope":"static","longname":"CreateTable.$temp","kind":"member","___id":"T000003R000016","___s":true,"longnameLower":"createtable.$temp","depths":["CreateTable","$temp"],"depth0":"CreateTable","depth1":"$temp","isddl":true,"ansi":"true","category":"DDL","arguments":"value","gitRelative":"/lib/ansi/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-table.js#L145","hashId":"CreateTable-temp","_id":"7PV9UzPtN9yS95Fj"},{"comment":"/**\n\t * @name $unlogged\n\t * @summary Specifies the `UNLOGGED` option for the `CREATE TABLE` statement.\n\t *\n\t * @memberOf CreateTable\n\t * @isddl true\n\t * @postgres true\n\t *\n\t * @param value\t {Boolean}\n\t * If the value is set to `true` the `UNLOGGED` option will be used.\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$unlogged: true,\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[3310,3701],"filename":"create-table.js","lineno":134,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$unlogged","summary":"Specifies the `UNLOGGED` option for the `CREATE TABLE` statement.","memberof":"CreateTable","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"If the value is set to `true` the `UNLOGGED` option will be used.\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$unlogged: true,\n\t...\n}\n```","name":"value","typeStr":"Boolean"}],"scope":"static","longname":"CreateTable.$unlogged","kind":"member","___id":"T000030R000008","___s":true,"longnameLower":"createtable.$unlogged","depths":["CreateTable","$unlogged"],"depth0":"CreateTable","depth1":"$unlogged","isddl":true,"postgres":"true","category":"DDL","arguments":"value","gitRelative":"/lib/postgreSQL/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/create-table.js#L134","hashId":"CreateTable-unlogged","_id":"vrJw7WFrvLKzK4Oj"},{"comment":"/**\n\t * @name $with\n\t * @summary Specifies the `WITH` clause for the `CREATE TABLE` statement.\n\t *\n\t * @memberOf CreateTable\n\t * @isddl true\n\t * @postgres true\n\t *\n\t * @param value\t {Object}\n\t * Specifies the `storage parameters` and / or the `OIDS` support.\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$table: 'people',\n\t * \t$with: { $oids: true }\n\t * \t...\n\t * }\n\t * ```\n\t */","meta":{"range":[3920,4306],"filename":"create-table.js","lineno":160,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$with","summary":"Specifies the `WITH` clause for the `CREATE TABLE` statement.","memberof":"CreateTable","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the `storage parameters` and / or the `OIDS` support.\n**Example**\n```javascript\n$create: {\n\t$table: 'people',\n\t$with: { $oids: true }\n\t...\n}\n```","name":"value","typeStr":"Object"}],"scope":"static","longname":"CreateTable.$with","kind":"member","___id":"T000030R000009","___s":true,"longnameLower":"createtable.$with","depths":["CreateTable","$with"],"depth0":"CreateTable","depth1":"$with","isddl":true,"postgres":"true","category":"DDL","arguments":"value","gitRelative":"/lib/postgreSQL/create-table.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/create-table.js#L160","hashId":"CreateTable-with","_id":"WwQFiD09byO9Ho6L"},{"comment":"/**\n\t * @before\n\t *\n\t * # CREATE VIEW Statements\n\t *\n\t * To create a new View in the database you have to use the `$create` together with the `$view` operator.\n\t * Check the Syntax and Examples.\n\t *\n\t * **Example**\n\t * ```javascript\n\t * $create: {\n\t * \t$view: { $cor: 'v_people' },  // $cor = CREATE OR REPLACE\n\t * \t$select: {\n\t * \t\t$from: 'people',\n\t * \t\t$columns: [\n\t * \t\t\t'last_name',\n\t * \t\t\t'first_name'\n\t * \t\t]\n\t * \t}\n\t * }\n\t *\n\t * // Output\n\t * CREATE OR REPLACE VIEW `v_people` AS\n\t * \tSELECT\n\t * \t\t`first_name`,\n\t * \t\t`last_name`\n\t * \tFROM\n\t * \t\t`people`;\n\t * ```\n\t *\n\t * @name CreateView\n\t * @summary Main operator to generate an `CREATE VIEW` Statement\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * CREATE { OR REPLACE [$cor] } VIEW <$view> AS\n\t * \tSELECT <$select>\n\t * ```\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details of the $create operator\n\t */","meta":{"range":[242,1131],"filename":"create-view.js","lineno":12,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"tags":[{"originalTitle":"before","title":"before","text":"# CREATE VIEW Statements\n\nTo create a new View in the database you have to use the `$create` together with the `$view` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$create: {\n\t$view: { $cor: 'v_people' },  // $cor = CREATE OR REPLACE\n\t$select: {\n\t\t$from: 'people',\n\t\t$columns: [\n\t\t\t'last_name',\n\t\t\t'first_name'\n\t\t]\n\t}\n}\n\n// Output\nCREATE OR REPLACE VIEW `v_people` AS\n\tSELECT\n\t\t`first_name`,\n\t\t`last_name`\n\tFROM\n\t\t`people`;\n```","value":"# CREATE VIEW Statements\n\nTo create a new View in the database you have to use the `$create` together with the `$view` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$create: {\n\t$view: { $cor: 'v_people' },  // $cor = CREATE OR REPLACE\n\t$select: {\n\t\t$from: 'people',\n\t\t$columns: [\n\t\t\t'last_name',\n\t\t\t'first_name'\n\t\t]\n\t}\n}\n\n// Output\nCREATE OR REPLACE VIEW `v_people` AS\n\tSELECT\n\t\t`first_name`,\n\t\t`last_name`\n\tFROM\n\t\t`people`;\n```"},{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"name":"CreateView","summary":"Main operator to generate an `CREATE VIEW` Statement\n\n**Syntax**\n```syntax\nCREATE { OR REPLACE [$cor] } VIEW <$view> AS\n\tSELECT <$select>\n```","params":[{"type":{"names":["Object"]},"description":"Specifies the details of the $create operator","name":"query","typeStr":"Object"}],"longname":"CreateView","kind":"member","scope":"global","___id":"T000002R000002","___s":true,"longnameLower":"createview","depths":["CreateView"],"depth0":"CreateView","before":"# CREATE VIEW Statements\n\nTo create a new View in the database you have to use the `$create` together with the `$view` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$create: {\n\t$view: { $cor: 'v_people' },  // $cor = CREATE OR REPLACE\n\t$select: {\n\t\t$from: 'people',\n\t\t$columns: [\n\t\t\t'last_name',\n\t\t\t'first_name'\n\t\t]\n\t}\n}\n\n// Output\nCREATE OR REPLACE VIEW `v_people` AS\n\tSELECT\n\t\t`first_name`,\n\t\t`last_name`\n\tFROM\n\t\t`people`;\n```","isddl":true,"ansi":"true","category":"DDL","arguments":"query","gitRelative":"/lib/ansi/create-view.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-view.js#L12","hashId":"CreateView","_id":"l7KxGwXYvkeFvHCk"},{"comment":"/**\n\t * @name $view\n\t * @summary Specifies the name of the View for the `CREATE VIEW` Statement\n\t *\n\t * @memberOf CreateView\n\t * @isddl true\n\t * @ansi true\n\t *\n\t * @param view\t {String}\n\t * Specifies the Name of the View.\n\t */","meta":{"range":[1286,1512],"filename":"create-view.js","lineno":59,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$view","summary":"Specifies the name of the View for the `CREATE VIEW` Statement","memberof":"CreateView","tags":[{"originalTitle":"isddl","title":"isddl","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Name of the View.","name":"view","typeStr":"String"}],"scope":"static","longname":"CreateView.$view","kind":"member","___id":"T000002R000005","___s":true,"longnameLower":"createview.$view","depths":["CreateView","$view"],"depth0":"CreateView","depth1":"$view","isddl":true,"ansi":"true","category":"DDL","arguments":"view","gitRelative":"/lib/ansi/create-view.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/create-view.js#L59","hashId":"CreateView-view","_id":"GdGsTk7zT2FOuWdX"},{"comment":"/**\n\t * @name Delete\n\t * @summary MySQL operator to generate an `DELETE` Statement.\n\t *\n\t * **Syntax** using `$columns` and `$values` Helper\n\t * ```syntax\n\t * DELETE FROM <$table>\n\t * \t{ WHERE [$where] }\n\t * \t{ ORDER BY [$sort] | [$orderBy] }\n\t * \t{ LIMIT [$limit] }\n\t * ```\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details for the $insert\n\t */","meta":{"range":[87,474],"filename":"delete.js","lineno":6,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"Delete","summary":"MySQL operator to generate an `DELETE` Statement.\n\n**Syntax** using `$columns` and `$values` Helper\n```syntax\nDELETE FROM <$table>\n\t{ WHERE [$where] }\n\t{ ORDER BY [$sort] | [$orderBy] }\n\t{ LIMIT [$limit] }\n```","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the details for the $insert","name":"query","typeStr":"Object"}],"longname":"Delete","kind":"member","scope":"global","___id":"T000009R000004","___s":true,"longnameLower":"delete","depths":["Delete"],"depth0":"Delete","isquerying":true,"mysql":"true","category":"Querying","arguments":"query","gitRelative":"/lib/mysql/delete.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/delete.js#L6","hashId":"Delete","_id":"lMfD0AIRrb7jkWMK"},{"comment":"/**\n\t * @before\n\t *\n\t * # DELETE Statements\n\t *\n\t * To query the database and delete existing records you have to use the `$delete` operator.\n\t * Check the Syntax and Examples.\n\t *\n\t * **Example**\n\t * ```javascript\n\t * $delete: {\n\t * \t$table: 'people',\n\t * \t$where: { age: { $gte: 18 } }\n\t * }\n\t * ```\n\t *\n\t * @name Delete\n\t * @summary Main operator to generate an `DELETE` Statement\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * DELETE FROM <$table>\n\t * \t{ WHERE [$where] }\n\t * ```\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details for the $insert\n\t */","meta":{"range":[211,796],"filename":"delete.js","lineno":12,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"tags":[{"originalTitle":"before","title":"before","text":"# DELETE Statements\n\nTo query the database and delete existing records you have to use the `$delete` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$delete: {\n\t$table: 'people',\n\t$where: { age: { $gte: 18 } }\n}\n```","value":"# DELETE Statements\n\nTo query the database and delete existing records you have to use the `$delete` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$delete: {\n\t$table: 'people',\n\t$where: { age: { $gte: 18 } }\n}\n```"},{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"name":"Delete","summary":"Main operator to generate an `DELETE` Statement\n\n**Syntax**\n```syntax\nDELETE FROM <$table>\n\t{ WHERE [$where] }\n```","params":[{"type":{"names":["Object"]},"description":"Specifies the details for the $insert","name":"query","typeStr":"Object"}],"longname":"Delete","kind":"member","scope":"global","___id":"T000012R000004","___s":true,"longnameLower":"delete","depths":["Delete"],"depth0":"Delete","before":"# DELETE Statements\n\nTo query the database and delete existing records you have to use the `$delete` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$delete: {\n\t$table: 'people',\n\t$where: { age: { $gte: 18 } }\n}\n```","isquerying":true,"ansi":"true","category":"Querying","arguments":"query","gitRelative":"/lib/ansi/delete.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/delete.js#L12","hashId":"Delete","_id":"ISoLxA9iPYC8Rmpo"},{"comment":"/**\n\t * @name Insert\n\t * @summary MySQL operator to generate an `INSERT INTO` Statement with additional support for:\n\t * - `ON DUPLICATE KEY`\n\t *\n\t * **Syntax** using `$columns` and `$values` Helper\n\t * ```syntax\n\t * INSERT { INTO <$into> } (\n\t * \t<$columns>\n\t * )\n\t * { VALUES ( [$values] ) }\n\t * { SELECT [$select] }\n\t * [$onDuplicateKey]\n\t *\n\t * ```\n\t *\n\t * **Syntax** using `$documents` - a more mongo like way\n\t * ```syntax\n\t * INSERT { INTO <$into> } <$documents> [$onDuplicateKey]\n\t * ```\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details for the $insert\n\t */","meta":{"range":[87,695],"filename":"insert.js","lineno":6,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"Insert","summary":"MySQL operator to generate an `INSERT INTO` Statement with additional support for:\n- `ON DUPLICATE KEY`\n\n**Syntax** using `$columns` and `$values` Helper\n```syntax\nINSERT { INTO <$into> } (\n\t<$columns>\n)\n{ VALUES ( [$values] ) }\n{ SELECT [$select] }\n[$onDuplicateKey]\n\n```\n\n**Syntax** using `$documents` - a more mongo like way\n```syntax\nINSERT { INTO <$into> } <$documents> [$onDuplicateKey]\n```","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the details for the $insert","name":"query","typeStr":"Object"}],"longname":"Insert","kind":"member","scope":"global","___id":"T000029R000004","___s":true,"longnameLower":"insert","depths":["Insert"],"depth0":"Insert","isquerying":true,"mysql":"true","category":"Querying","arguments":"query","gitRelative":"/lib/mysql/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/insert.js#L6","hashId":"Insert","_id":"O4OEdGzh1hB1v64Q"},{"comment":"/**\n\t * @before\n\t *\n\t * # INSERT Statements\n\t *\n\t * To query the database and inserting new rows to a table you have to take the `$insert` operator.\n\t * This operator could be used in different ways. Check the Syntax and Examples.\n\t *\n\t * **Example**\n\t * ```javascript\n\t * $insert: {\n\t * \t$into: 'people',\n\t * \t$columns: ['first_name', 'last_name', 'age']\n\t * \t$values: ['John', 'Doe', 45]\n\t * }\n\t * ```\n\t *\n\t * @name Insert\n\t * @summary Main operator to generate an `INSERT INTO` Statement\n\t *\n\t * **Syntax** using `$columns` and `$values` Helper\n\t * ```syntax\n\t * INSERT { INTO <$into> } (\n\t * \t<$columns>\n\t * )\n\t * { VALUES ( [$values] ) }\n\t * { SELECT [$select] }\n\t * );\n\t * ```\n\t *\n\t * **Syntax** using `$documents` - a more mongo like way\n\t * ```syntax\n\t * INSERT { INTO <$into> } <$documents>\n\t * ```\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details for the $insert\n\t */","meta":{"range":[375,1294],"filename":"insert.js","lineno":19,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"tags":[{"originalTitle":"before","title":"before","text":"# INSERT Statements\n\nTo query the database and inserting new rows to a table you have to take the `$insert` operator.\nThis operator could be used in different ways. Check the Syntax and Examples.\n\n**Example**\n```javascript\n$insert: {\n\t$into: 'people',\n\t$columns: ['first_name', 'last_name', 'age']\n\t$values: ['John', 'Doe', 45]\n}\n```","value":"# INSERT Statements\n\nTo query the database and inserting new rows to a table you have to take the `$insert` operator.\nThis operator could be used in different ways. Check the Syntax and Examples.\n\n**Example**\n```javascript\n$insert: {\n\t$into: 'people',\n\t$columns: ['first_name', 'last_name', 'age']\n\t$values: ['John', 'Doe', 45]\n}\n```"},{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"name":"Insert","summary":"Main operator to generate an `INSERT INTO` Statement\n\n**Syntax** using `$columns` and `$values` Helper\n```syntax\nINSERT { INTO <$into> } (\n\t<$columns>\n)\n{ VALUES ( [$values] ) }\n{ SELECT [$select] }\n);\n```\n\n**Syntax** using `$documents` - a more mongo like way\n```syntax\nINSERT { INTO <$into> } <$documents>\n```","params":[{"type":{"names":["Object"]},"description":"Specifies the details for the $insert","name":"query","typeStr":"Object"}],"longname":"Insert","kind":"member","scope":"global","___id":"T000023R000004","___s":true,"longnameLower":"insert","depths":["Insert"],"depth0":"Insert","before":"# INSERT Statements\n\nTo query the database and inserting new rows to a table you have to take the `$insert` operator.\nThis operator could be used in different ways. Check the Syntax and Examples.\n\n**Example**\n```javascript\n$insert: {\n\t$into: 'people',\n\t$columns: ['first_name', 'last_name', 'age']\n\t$values: ['John', 'Doe', 45]\n}\n```","isquerying":true,"ansi":"true","category":"Querying","arguments":"query","gitRelative":"/lib/ansi/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/insert.js#L19","hashId":"Insert","_id":"qyzYDsGdxjiTblV0"},{"comment":"/**\n\t * @name $conflict\n\t * @summary Specifies the `ON CONFLICT` clause\n\t *\n\t * ```syntax\n \t * ON CONFLICT { ( [$checkColumns] ) } | { ON CONSTRAINT [$checkConstraint] }\n \t * \t\t{ DO [$doNothing] }\n \t * \t\t{ DO [$doUpdate] }\n \t * ```\n\t *\n\t * @memberOf Insert\n\t * @isquerying true\n\t * @postgres true\n\t *\n\t * @param conflict \t{Object}\t\tSpecifies the conflict clause\n\t *\n\t * ```javascript\n\t * var outputQuery = sqlbuilder.build({\n\t * \t$insert: {\n\t * \t\t$into: 'people',\n\t * \t\t// $documents as single/plain Object\n\t * \t\t$documents: {\n\t * \t\t\tfirst_name: 'John',\n\t * \t\t\tlast_name: 'Doe',\n\t * \t\t\tage: 45\n\t * \t\t},\n\t * \t\t$conflict: {\n\t * \t\t\t$checkColumns: 'myUniqueField', // or as Array of Strings ['myUniqueField_1', 'myUniqueField_2']\n\t * \t\t\t$doNothing: true // or $doUpdate: { ... }\n\t *\t\t}\n\t * \t}\n\t *\n\t * // using $doUpdatea dn set new values:\n\t * var outputQuery = sqlbuilder.build({\n\t * \t$insert: {\n\t * \t\t$into: 'people',\n\t * \t\t// $documents as single/plain Object\n\t * \t\t$documents: {\n\t * \t\t\tfirst_name: 'John',\n\t * \t\t\tlast_name: 'Doe',\n\t * \t\t\tage: 45\n\t * \t\t},\n\t * \t\t$conflict: {\n\t * \t\t\t$checkColumns: 'myUniqueField', // or as Array of Strings ['myUniqueField_1', 'myUniqueField_2']\n\t * \t\t\t$doUpdate: {\n\t * \t\t\t\tfirst_name: 'J.',\n\t * \t\t\t\tlast_name: 'Doe',\n\t * \t\t\t\tage: 57\n\t * \t\t\t}\n\t *\t\t}\n\t * \t}\n\t * });\n\t * ```\n\t *\n\t */","meta":{"range":[648,1961],"filename":"insert.js","lineno":27,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$conflict","summary":"Specifies the `ON CONFLICT` clause\n\n```syntax\nON CONFLICT { ( [$checkColumns] ) } | { ON CONSTRAINT [$checkConstraint] }\n\t\t{ DO [$doNothing] }\n\t\t{ DO [$doUpdate] }\n```","memberof":"Insert","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the conflict clause\n\n```javascript\nvar outputQuery = sqlbuilder.build({\n\t$insert: {\n\t\t$into: 'people',\n\t\t// $documents as single/plain Object\n\t\t$documents: {\n\t\t\tfirst_name: 'John',\n\t\t\tlast_name: 'Doe',\n\t\t\tage: 45\n\t\t},\n\t\t$conflict: {\n\t\t\t$checkColumns: 'myUniqueField', // or as Array of Strings ['myUniqueField_1', 'myUniqueField_2']\n\t\t\t$doNothing: true // or $doUpdate: { ... }\n\t\t}\n\t}\n\n// using $doUpdatea dn set new values:\nvar outputQuery = sqlbuilder.build({\n\t$insert: {\n\t\t$into: 'people',\n\t\t// $documents as single/plain Object\n\t\t$documents: {\n\t\t\tfirst_name: 'John',\n\t\t\tlast_name: 'Doe',\n\t\t\tage: 45\n\t\t},\n\t\t$conflict: {\n\t\t\t$checkColumns: 'myUniqueField', // or as Array of Strings ['myUniqueField_1', 'myUniqueField_2']\n\t\t\t$doUpdate: {\n\t\t\t\tfirst_name: 'J.',\n\t\t\t\tlast_name: 'Doe',\n\t\t\t\tage: 57\n\t\t\t}\n\t\t}\n\t}\n});\n```","name":"conflict","typeStr":"Object"}],"scope":"static","longname":"Insert.$conflict","kind":"member","___id":"T000016R000004","___s":true,"longnameLower":"insert.$conflict","depths":["Insert","$conflict"],"depth0":"Insert","depth1":"$conflict","isquerying":true,"postgres":"true","category":"Querying","arguments":"conflict","gitRelative":"/lib/postgreSQL/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/insert.js#L27","hashId":"Insert-conflict","_id":"HUptNjB3fVnCpQIL"},{"comment":"/**\n\t * @name $checkColumns\n\t * @summary Specifies the columns tho check for a unique key violation by using `ON CONFLICT` clause\n\t * @memberOf Insert.$conflict\n\t * @isquerying true\n\t * @postgres true\n\t *\n\t * @param checkColumns \t{String | Array}\t\tSpecifies the Columns to check\n \t */","meta":{"range":[2354,2638],"filename":"insert.js","lineno":91,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$checkColumns","summary":"Specifies the columns tho check for a unique key violation by using `ON CONFLICT` clause","memberof":"Insert.$conflict","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["String","Array"]},"description":"Specifies the Columns to check","name":"checkColumns","typeStr":"String | Array"}],"scope":"static","longname":"Insert.$conflict.$checkColumns","kind":"member","___id":"T000016R000005","___s":true,"longnameLower":"insert.$conflict.$checkcolumns","depths":["Insert","$conflict","$checkColumns"],"depth0":"Insert","depth1":"$conflict","depth2":"$checkColumns","isquerying":true,"postgres":"true","category":"Querying","arguments":"checkColumns","gitRelative":"/lib/postgreSQL/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/insert.js#L91","hashId":"Insert-conflict-checkColumns","_id":"IkLEGztnGfKqrBAN"},{"comment":"/**\n\t * @name $checkConstraint\n\t * @summary Specifies the constraint name tho check for a unique key by using `ON CONFLICT` clause\n\t * @memberOf Insert.$conflict\n\t * @isquerying true\n\t * @postgres true\n\t *\n\t * @param checkConstraint \t{String}\t\tSpecifies the Name of the Constraint\n \t */","meta":{"range":[2982,3268],"filename":"insert.js","lineno":109,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$checkConstraint","summary":"Specifies the constraint name tho check for a unique key by using `ON CONFLICT` clause","memberof":"Insert.$conflict","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Name of the Constraint","name":"checkConstraint","typeStr":"String"}],"scope":"static","longname":"Insert.$conflict.$checkConstraint","kind":"member","___id":"T000016R000006","___s":true,"longnameLower":"insert.$conflict.$checkconstraint","depths":["Insert","$conflict","$checkConstraint"],"depth0":"Insert","depth1":"$conflict","depth2":"$checkConstraint","isquerying":true,"postgres":"true","category":"Querying","arguments":"checkConstraint","gitRelative":"/lib/postgreSQL/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/insert.js#L109","hashId":"Insert-conflict-checkConstraint","_id":"ThYb8eay2LA7bz7u"},{"comment":"/**\n\t * @name $doNothing\n\t * @summary Specifies the `DO NOTHING` option while using `ON CONFLICT` clause\n\t * @memberOf Insert.$conflict\n\t * @isquerying true\n\t * @postgres true\n\t *\n\t * @param doNothing \t{String}\t\tMust always set to `true`.\n \t */","meta":{"range":[3603,3847],"filename":"insert.js","lineno":126,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$doNothing","summary":"Specifies the `DO NOTHING` option while using `ON CONFLICT` clause","memberof":"Insert.$conflict","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Must always set to `true`.","name":"doNothing","typeStr":"String"}],"scope":"static","longname":"Insert.$conflict.$doNothing","kind":"member","___id":"T000016R000007","___s":true,"longnameLower":"insert.$conflict.$donothing","depths":["Insert","$conflict","$doNothing"],"depth0":"Insert","depth1":"$conflict","depth2":"$doNothing","isquerying":true,"postgres":"true","category":"Querying","arguments":"doNothing","gitRelative":"/lib/postgreSQL/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/insert.js#L126","hashId":"Insert-conflict-doNothing","_id":"fFovz5BP8HtgYykE"},{"comment":"/**\n\t * @name $doUpdate\n\t * @summary Specifies the `DO UPDATE` option while using `ON CONFLICT` clause\n\t * @memberOf Insert.$conflict\n\t * @isquerying true\n\t * @postgres true\n\t *\n\t * @param doUpdate \t{String}\t\tSpecifies the Update-Part of the conflict handling.\n \t */","meta":{"range":[4165,4431],"filename":"insert.js","lineno":143,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$doUpdate","summary":"Specifies the `DO UPDATE` option while using `ON CONFLICT` clause","memberof":"Insert.$conflict","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Update-Part of the conflict handling.","name":"doUpdate","typeStr":"String"}],"scope":"static","longname":"Insert.$conflict.$doUpdate","kind":"member","___id":"T000016R000008","___s":true,"longnameLower":"insert.$conflict.$doupdate","depths":["Insert","$conflict","$doUpdate"],"depth0":"Insert","depth1":"$conflict","depth2":"$doUpdate","isquerying":true,"postgres":"true","category":"Querying","arguments":"doUpdate","gitRelative":"/lib/postgreSQL/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/insert.js#L143","hashId":"Insert-conflict-doUpdate","_id":"HK2TwUe1nfBM2x4t"},{"comment":"/**\n\t * @name $documents\n\t * @summary Specifies the columns and `VALUES` for the `INSERT INTO` Statement\n\t * @memberOf Insert\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param documents \t{Object | Array}\t\tSpecifies the columns and `VALUES` by using the $insert-operator.\n\t * - documents as **Object**: `{ $into: 'people', $documents: { first_name: 'John', last_name: 'Doe', age: 45 } }`\n\t * - documents as **Array**: `{ $into: 'people', $documents: [ { first_name: 'John', last_name: 'Doe', age: 45 }, { first_name: 'Jasmin', last_name: 'Dan', age: 32 } ] }`\n\t *\n\t * @after\n\t *\n\t * # Examples using `$documents`\n\t *\n\t * ```javascript\n\t * var outputQuery = sqlbuilder.build({\n\t * \t$insert: {\n\t * \t\t$into: 'people',\n\t * \t\t// $documents as single/plain Object\n\t * \t\t$documents: {\n\t * \t\t\tfirst_name: 'John',\n\t * \t\t\tlast_name: 'Doe',\n\t * \t\t\tage: 45\n\t * \t\t}\n\t * \t}\n\t * });\n\t * ```\n\t *\n\t * If you would insert more than one record you can pass an Array of Objects instead of a single Object.\n\t *\n\t * The properties for all objactes have to be the same.\n\t * For the INSERT statement only the properties of the first Array-item will be checked and processed as column-identifiers.\n\t *\n\t * ```javascript\n\t * var outputQuery = sqlbuilder.build({\n\t * \t$insert: {\n\t * \t\t$into: 'people',\n\t * \t\t// $documents as Array of Objects\n\t * \t\t$documents: [\n\t * \t\t\t{ first_name: 'John', last_name: 'Doe', age: 45\t},\n\t * \t\t\t{ first_name: 'Mike', last_name: 'Oldfield', age: 67 },\n\t * \t\t\t{ first_name: 'Jane', last_name: 'Dan',\tage: 32\t}\n\t *\t\t ]\n\t * \t}\n\t * });\n\t *\n\t * ```\n\t */","meta":{"range":[3918,5470],"filename":"insert.js","lineno":136,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$documents","summary":"Specifies the columns and `VALUES` for the `INSERT INTO` Statement","memberof":"Insert","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"},{"originalTitle":"after","title":"after","text":"# Examples using `$documents`\n\n```javascript\nvar outputQuery = sqlbuilder.build({\n\t$insert: {\n\t\t$into: 'people',\n\t\t// $documents as single/plain Object\n\t\t$documents: {\n\t\t\tfirst_name: 'John',\n\t\t\tlast_name: 'Doe',\n\t\t\tage: 45\n\t\t}\n\t}\n});\n```\n\nIf you would insert more than one record you can pass an Array of Objects instead of a single Object.\n\nThe properties for all objactes have to be the same.\nFor the INSERT statement only the properties of the first Array-item will be checked and processed as column-identifiers.\n\n```javascript\nvar outputQuery = sqlbuilder.build({\n\t$insert: {\n\t\t$into: 'people',\n\t\t// $documents as Array of Objects\n\t\t$documents: [\n\t\t\t{ first_name: 'John', last_name: 'Doe', age: 45\t},\n\t\t\t{ first_name: 'Mike', last_name: 'Oldfield', age: 67 },\n\t\t\t{ first_name: 'Jane', last_name: 'Dan',\tage: 32\t}\n\t\t ]\n\t}\n});\n\n```","value":"# Examples using `$documents`\n\n```javascript\nvar outputQuery = sqlbuilder.build({\n\t$insert: {\n\t\t$into: 'people',\n\t\t// $documents as single/plain Object\n\t\t$documents: {\n\t\t\tfirst_name: 'John',\n\t\t\tlast_name: 'Doe',\n\t\t\tage: 45\n\t\t}\n\t}\n});\n```\n\nIf you would insert more than one record you can pass an Array of Objects instead of a single Object.\n\nThe properties for all objactes have to be the same.\nFor the INSERT statement only the properties of the first Array-item will be checked and processed as column-identifiers.\n\n```javascript\nvar outputQuery = sqlbuilder.build({\n\t$insert: {\n\t\t$into: 'people',\n\t\t// $documents as Array of Objects\n\t\t$documents: [\n\t\t\t{ first_name: 'John', last_name: 'Doe', age: 45\t},\n\t\t\t{ first_name: 'Mike', last_name: 'Oldfield', age: 67 },\n\t\t\t{ first_name: 'Jane', last_name: 'Dan',\tage: 32\t}\n\t\t ]\n\t}\n});\n\n```"}],"params":[{"type":{"names":["Object","Array"]},"description":"Specifies the columns and `VALUES` by using the $insert-operator.\n- documents as **Object**: `{ $into: 'people', $documents: { first_name: 'John', last_name: 'Doe', age: 45 } }`\n- documents as **Array**: `{ $into: 'people', $documents: [ { first_name: 'John', last_name: 'Doe', age: 45 }, { first_name: 'Jasmin', last_name: 'Dan', age: 32 } ] }`","name":"documents","typeStr":"Object | Array"}],"scope":"static","longname":"Insert.$documents","kind":"member","___id":"T000023R000009","___s":true,"longnameLower":"insert.$documents","depths":["Insert","$documents"],"depth0":"Insert","depth1":"$documents","isquerying":true,"ansi":"true","after":"# Examples using `$documents`\n\n```javascript\nvar outputQuery = sqlbuilder.build({\n\t$insert: {\n\t\t$into: 'people',\n\t\t// $documents as single/plain Object\n\t\t$documents: {\n\t\t\tfirst_name: 'John',\n\t\t\tlast_name: 'Doe',\n\t\t\tage: 45\n\t\t}\n\t}\n});\n```\n\nIf you would insert more than one record you can pass an Array of Objects instead of a single Object.\n\nThe properties for all objactes have to be the same.\nFor the INSERT statement only the properties of the first Array-item will be checked and processed as column-identifiers.\n\n```javascript\nvar outputQuery = sqlbuilder.build({\n\t$insert: {\n\t\t$into: 'people',\n\t\t// $documents as Array of Objects\n\t\t$documents: [\n\t\t\t{ first_name: 'John', last_name: 'Doe', age: 45\t},\n\t\t\t{ first_name: 'Mike', last_name: 'Oldfield', age: 67 },\n\t\t\t{ first_name: 'Jane', last_name: 'Dan',\tage: 32\t}\n\t\t ]\n\t}\n});\n\n```","category":"Querying","arguments":"documents","gitRelative":"/lib/ansi/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/insert.js#L136","hashId":"Insert-documents","_id":"oEbeDxZGoQotxGVJ"},{"comment":"/**\n\t * @name $into\n\t * @summary Specifies the table-identifier for the `INSERT INTO` Statement\n\t * @memberOf Insert\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param into \t {String}\t\tSpecifies the table-identifier by using the $insert-operator.\n\t * `$insert: { $into: 'people', $columns: [...], $values: [...] }`\n\t */","meta":{"range":[2016,2335],"filename":"insert.js","lineno":76,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$into","summary":"Specifies the table-identifier for the `INSERT INTO` Statement","memberof":"Insert","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the table-identifier by using the $insert-operator.\n`$insert: { $into: 'people', $columns: [...], $values: [...] }`","name":"into","typeStr":"String"}],"scope":"static","longname":"Insert.$into","kind":"member","___id":"T000023R000006","___s":true,"longnameLower":"insert.$into","depths":["Insert","$into"],"depth0":"Insert","depth1":"$into","isquerying":true,"ansi":"true","category":"Querying","arguments":"into","gitRelative":"/lib/ansi/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/insert.js#L76","hashId":"Insert-into","_id":"HJ8OYGN7vFTFmIN9"},{"comment":"/**\n\t * @name $onDuplicateKeyUpdate\n\t * @summary Specifies the `ON DUPLICATE KEY UPDATE` option for the `INSERT` Statement.\n\t * @memberOf Insert\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param onDuplicateKeyUpdate \t {Object} Specifies the update clause on duplicate-key-entry\n\t * ```\n\t * $insert: {\n\t * \t$into: 'people',\n\t * \t$values: {\n\t * \t\tfirst_name: 'John',\n\t * \t\tlast_name: 'Doe',\n\t * \t},\n\t * \t$onDuplicateKeyUpdate: {\n\t * \t\tfirst_name: 'John',\n\t * \t\tlast_name: { $values: 'last_name' }\n\t * }\n\t * ```\n\t */","meta":{"range":[2008,2523],"filename":"insert.js","lineno":70,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$onDuplicateKeyUpdate","summary":"Specifies the `ON DUPLICATE KEY UPDATE` option for the `INSERT` Statement.","memberof":"Insert","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the update clause on duplicate-key-entry\n```\n$insert: {\n\t$into: 'people',\n\t$values: {\n\t\tfirst_name: 'John',\n\t\tlast_name: 'Doe',\n\t},\n\t$onDuplicateKeyUpdate: {\n\t\tfirst_name: 'John',\n\t\tlast_name: { $values: 'last_name' }\n}\n```","name":"onDuplicateKeyUpdate","typeStr":"Object"}],"scope":"static","longname":"Insert.$onDuplicateKeyUpdate","kind":"member","___id":"T000029R000006","___s":true,"longnameLower":"insert.$onduplicatekeyupdate","depths":["Insert","$onDuplicateKeyUpdate"],"depth0":"Insert","depth1":"$onDuplicateKeyUpdate","isquerying":true,"mysql":"true","category":"Querying","arguments":"onDuplicateKeyUpdate","gitRelative":"/lib/mysql/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/insert.js#L70","hashId":"Insert-onDuplicateKeyUpdate","_id":"fvvY6yVXHQsvDhuQ"},{"comment":"/**\n\t * @name $values\n\t * @summary Specifies the `VALUES` function for the `INSERT INTO` Statement on using the `ON DUPLICATE KEY UPDATE` clause.\n\t * @memberOf Insert.$onDuplicateKeyUpdate\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param values \t {String}\n\t * Using `$values` on the $onDuplicateKeyUpdate is must be a string. Otherwise it's an Array.\n\t * `$insert: { ... $onDuplicateKeyUpdate:{ last_name: { $values: 'last_name' } } ... }`\n\t */","meta":{"range":[998,1445],"filename":"insert.js","lineno":44,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$values","summary":"Specifies the `VALUES` function for the `INSERT INTO` Statement on using the `ON DUPLICATE KEY UPDATE` clause.","memberof":"Insert.$onDuplicateKeyUpdate","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Using `$values` on the $onDuplicateKeyUpdate is must be a string. Otherwise it's an Array.\n`$insert: { ... $onDuplicateKeyUpdate:{ last_name: { $values: 'last_name' } } ... }`","name":"values","typeStr":"String"}],"scope":"static","longname":"Insert.$onDuplicateKeyUpdate.$values","kind":"member","___id":"T000029R000005","___s":true,"longnameLower":"insert.$onduplicatekeyupdate.$values","depths":["Insert","$onDuplicateKeyUpdate","$values"],"depth0":"Insert","depth1":"$onDuplicateKeyUpdate","depth2":"$values","isquerying":true,"mysql":"true","category":"Querying","arguments":"values","gitRelative":"/lib/mysql/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/insert.js#L44","hashId":"Insert-onDuplicateKeyUpdate-values","_id":"x1KRFzUfl2Bv7fl4"},{"comment":"/**\n\t * @name $values\n\t * @summary Specifies the `VALUES` for the `INSERT INTO` Statement\n\t * @memberOf Insert\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param values \t {Array}\t\tSpecifies the VALUES by using the $insert-operator.\n\t * `$insert: { $into: 'people', $columns: ['first_name', 'last_name', 'age'], $values: ['John', 'Doe', 45] }`\n\t */","meta":{"range":[2836,3183],"filename":"insert.js","lineno":100,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$values","summary":"Specifies the `VALUES` for the `INSERT INTO` Statement","memberof":"Insert","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Array"]},"description":"Specifies the VALUES by using the $insert-operator.\n`$insert: { $into: 'people', $columns: ['first_name', 'last_name', 'age'], $values: ['John', 'Doe', 45] }`","name":"values","typeStr":"Array"}],"scope":"static","longname":"Insert.$values","kind":"member","___id":"T000023R000007","___s":true,"longnameLower":"insert.$values","depths":["Insert","$values"],"depth0":"Insert","depth1":"$values","isquerying":true,"ansi":"true","category":"Querying","arguments":"values","gitRelative":"/lib/ansi/insert.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/insert.js#L100","hashId":"Insert-values","_id":"zidEMudQfiArmDQR"},{"comment":"/**\n\t * @name $json\n\t * @summary Specifies the to_json function.\n\t * @memberOf JSON\n\t * @ishelper true\n\t * @postgres true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to aggregate.\n\t *\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$select: {\n\t * \t\t$from: 'people',\n\t * \t\t$columns: [\n\t * \t\t\t'user_id',\n\t * \t\t\t{ tokens: { $json: { $jsonAgg: 'hashed_token' } } }\n \t * \t\t],\n\t * \t\t$groupBy: ['user_id']\n \t * \t}\n\t * });\n\t * ```\n\t *\n\t */","meta":{"range":[1150,1701],"filename":"json.js","lineno":50,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$json","summary":"Specifies the to_json function.","memberof":"JSON","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to aggregate.\n\n```javascript\nvar query = sqlbuilder.build({\n\t$select: {\n\t\t$from: 'people',\n\t\t$columns: [\n\t\t\t'user_id',\n\t\t\t{ tokens: { $json: { $jsonAgg: 'hashed_token' } } }\n\t\t],\n\t\t$groupBy: ['user_id']\n\t}\n});\n```","name":"identifier","typeStr":"String"}],"scope":"static","longname":"JSON.$json","kind":"member","___id":"T000028R000010","___s":true,"longnameLower":"json.$json","depths":["JSON","$json"],"depth0":"JSON","depth1":"$json","ishelper":true,"postgres":"true","category":"Helpers","arguments":"expr, identifier","gitRelative":"/lib/postgreSQL/json.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/json.js#L50","hashId":"JSON-json","_id":"u9vhfQzawTbuyoEo"},{"comment":"/**\n\t * @name $jsonAgg\n\t * @summary Specifies the json_agg aggregation.\n\t * @memberOf JSON\n\t * @ishelper true\n\t * @postgres true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to aggregate.\n\t *\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$select: {\n\t * \t\t$from: 'people',\n\t * \t\t$columns: [\n\t * \t\t\t'user_id',\n\t * \t\t\t{ tokens: { $json: { $jsonAgg: 'hashed_token' } } }\n \t * \t\t],\n\t * \t\t$groupBy: ['user_id']\n \t * \t}\n\t * });\n\t * ```\n\t *\n\t */","meta":{"range":[134,692],"filename":"json.js","lineno":8,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$jsonAgg","summary":"Specifies the json_agg aggregation.","memberof":"JSON","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to aggregate.\n\n```javascript\nvar query = sqlbuilder.build({\n\t$select: {\n\t\t$from: 'people',\n\t\t$columns: [\n\t\t\t'user_id',\n\t\t\t{ tokens: { $json: { $jsonAgg: 'hashed_token' } } }\n\t\t],\n\t\t$groupBy: ['user_id']\n\t}\n});\n```","name":"identifier","typeStr":"String"}],"scope":"static","longname":"JSON.$jsonAgg","kind":"member","___id":"T000028R000005","___s":true,"longnameLower":"json.$jsonagg","depths":["JSON","$jsonAgg"],"depth0":"JSON","depth1":"$jsonAgg","ishelper":true,"postgres":"true","category":"Helpers","arguments":"expr, identifier","gitRelative":"/lib/postgreSQL/json.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/json.js#L8","hashId":"JSON-jsonAgg","_id":"zWyOBMkB3FcFwd2v"},{"comment":"/**\n\t * @name $jsonBuildObject\n\t * @summary Specifies the `json_build_object` function.\n\t * @memberOf JSON\n\t * @ishelper true\n\t * @postgres true\n\t *\n\t * @param expr\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param obj\t{Object}\tSpecifies the Object to build.\n\t *\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$select: {\n\t * \t\t$from: 'people',\n\t * \t\t$columns: [\n\t * \t\t\t{ peopleData: { $jsonBuildObject: { firstName: 'John', lastName: 'Doe' } } }\n\t * \t\t]\n\t * \t}\n\t * });\n\t * ```\n\t *\n\t */","meta":{"range":[3093,3628],"filename":"json.js","lineno":132,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$jsonBuildObject","summary":"Specifies the `json_build_object` function.","memberof":"JSON","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Object"]},"description":"Specifies the Object to build.\n\n```javascript\nvar query = sqlbuilder.build({\n\t$select: {\n\t\t$from: 'people',\n\t\t$columns: [\n\t\t\t{ peopleData: { $jsonBuildObject: { firstName: 'John', lastName: 'Doe' } } }\n\t\t]\n\t}\n});\n```","name":"obj","typeStr":"Object"}],"scope":"static","longname":"JSON.$jsonBuildObject","kind":"member","___id":"T000028R000020","___s":true,"longnameLower":"json.$jsonbuildobject","depths":["JSON","$jsonBuildObject"],"depth0":"JSON","depth1":"$jsonBuildObject","ishelper":true,"postgres":"true","category":"Helpers","arguments":"expr, obj","gitRelative":"/lib/postgreSQL/json.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/json.js#L132","hashId":"JSON-jsonBuildObject","_id":"liwQtN2fC8dPWuLd"},{"comment":"/**\n\t * @name $rowToJson\n\t * @summary Specifies the `row_to_json` function.\n\t * @memberOf JSON\n\t * @ishelper true\n\t * @postgres true\n\t *\n\t * @param expr\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param row\t{String}\tSpecifies the record, row to convert as json.\n\t *\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$select: {\n\t * \t\t$from: 'people',\n\t * \t\t$columns: [\n\t * \t\t\t{ peopleData: { $rowToJson: 'people' } }\n \t * \t\t]\n \t * \t}\n\t * });\n\t * ```\n\t *\n\t */","meta":{"range":[2136,2640],"filename":"json.js","lineno":92,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"$rowToJson","summary":"Specifies the `row_to_json` function.","memberof":"JSON","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the record, row to convert as json.\n\n```javascript\nvar query = sqlbuilder.build({\n\t$select: {\n\t\t$from: 'people',\n\t\t$columns: [\n\t\t\t{ peopleData: { $rowToJson: 'people' } }\n\t\t]\n\t}\n});\n```","name":"row","typeStr":"String"}],"scope":"static","longname":"JSON.$rowToJson","kind":"member","___id":"T000028R000015","___s":true,"longnameLower":"json.$rowtojson","depths":["JSON","$rowToJson"],"depth0":"JSON","depth1":"$rowToJson","ishelper":true,"postgres":"true","category":"Helpers","arguments":"expr, row","gitRelative":"/lib/postgreSQL/json.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/json.js#L92","hashId":"JSON-rowToJson","_id":"dkmfzlY0ZCiAdbMb"},{"comment":"/**\n\t * @name $and\n\t * @summary The logical operator joins all given items with a logical AND\n\t * @memberOf Logical\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {Array}\tSpecifies the items that should be joined\n\t */","meta":{"range":[85,311],"filename":"logical.js","lineno":6,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$and","summary":"The logical operator joins all given items with a logical AND","memberof":"Logical","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Array"]},"description":"Specifies the items that should be joined","name":"expr","typeStr":"Array"}],"scope":"static","longname":"Logical.$and","kind":"member","___id":"T000018R000004","___s":true,"longnameLower":"logical.$and","depths":["Logical","$and"],"depth0":"Logical","depth1":"$and","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr","gitRelative":"/lib/ansi/operators/logical.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/logical.js#L6","hashId":"Logical-and","_id":"ZW8amETpSl2lSEw4"},{"comment":"/**\n\t * @name $or\n\t * @summary The logical operator joins all given items with a logical OR\n\t * @memberOf Logical\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param expr \t {Array}\tSpecifies the items that should be joined\n\t */","meta":{"range":[1007,1231],"filename":"logical.js","lineno":48,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$or","summary":"The logical operator joins all given items with a logical OR","memberof":"Logical","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Array"]},"description":"Specifies the items that should be joined","name":"expr","typeStr":"Array"}],"scope":"static","longname":"Logical.$or","kind":"member","___id":"T000018R000006","___s":true,"longnameLower":"logical.$or","depths":["Logical","$or"],"depth0":"Logical","depth1":"$or","ishelper":true,"ansi":"true","category":"Helpers","arguments":"expr","gitRelative":"/lib/ansi/operators/logical.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/logical.js#L48","hashId":"Logical-or","_id":"cz38FSeF8Xk8HXGk"},{"comment":"/**\n\t * @name Select\n\t * @summary Syntax for SELECT Statement using MySQL language dialect.\n\t * ```syntax\n\t * SELECT [$calcFoundRows] [$distinct] [$all]\n\t * \t\t{ <$columns> [$into] }\n\t * \t\t{ FROM [$table] | [$from] }\n\t * \t\t{ WHERE [$where] }\n\t * \t\t{ GROUP BY [$groupBy]\n\t * \t\t\t{ WITH ROLLUP [$rollup] }\n\t * \t\t\t{ HAVING [$having] }\n\t * \t\t}\n\t * \t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t * \t\t{ LIMIT [$limit] { OFFSET [$offset] } }\n\t * ```\n\t * @isquerying true\n\t * @mysql true\n\t */","meta":{"range":[133,610],"filename":"select.js","lineno":7,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"Select","summary":"Syntax for SELECT Statement using MySQL language dialect.\n```syntax\nSELECT [$calcFoundRows] [$distinct] [$all]\n\t\t{ <$columns> [$into] }\n\t\t{ FROM [$table] | [$from] }\n\t\t{ WHERE [$where] }\n\t\t{ GROUP BY [$groupBy]\n\t\t\t{ WITH ROLLUP [$rollup] }\n\t\t\t{ HAVING [$having] }\n\t\t}\n\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t\t{ LIMIT [$limit] { OFFSET [$offset] } }\n```","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"longname":"Select","kind":"member","scope":"global","___id":"T000026R000005","___s":true,"longnameLower":"select","depths":["Select"],"depth0":"Select","isquerying":true,"mysql":"true","category":"Querying","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L7","hashId":"Select","_id":"4JTPvxIg55fu9Iwl"},{"comment":"/**\n\t * @before\n\t *\n\t * # SELECT Statements\n\t *\n\t * To query the database using a select statement you have to take the `$select` operator.\n\t *\n\t * The minimum `$select` must supply the `$columns` operator, to specify at least one column.\n\t * Optionally you can use:\n\t * - $distinct\n\t * - $all\n\t * - $from\n\t * - $where\n\t * - $groupBy\n\t * - $having\n\t * - $sort\n\t * - **and all operators from your specific language dialect**\n\t *\n\t * Just a short example:\n\t * ```javascript\n\t * $select: {\n\t * \t\t$columns: [\n\t * \t\t\t'first_name',\n\t * \t\t\t{ first_name_count: { $count: '*' } }\n\t * \t\t],\n\t * \t\t$from: 'people',\n\t * \t\t$groupBy: ['first_name'],\n\t * \t\t$having: {\n\t * \t\t\t$expr: { $count: '*', $gt: 2 }\n\t * \t\t}\n\t * }\n\t * ```\n\t *\n\t * @name Select\n\t * @summary Main operator to generate a SELECT Statement\n\t * ```syntax\n\t * SELECT [$distinct] [$all]\n\t * \t\t<$columns>\n\t * \t\t{ FROM [$from] }\n\t * \t\t{ WHERE [$where] }\n\t * \t\t{ GROUP BY [$groupBy]\n\t * \t\t\t{ HAVING [$having] }\n\t * \t\t}\n\t * \t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t * ```\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {Object}\t\tSpecifies the details for the $select\n\t */","meta":{"range":[491,1617],"filename":"select.js","lineno":18,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"tags":[{"originalTitle":"before","title":"before","text":"# SELECT Statements\n\nTo query the database using a select statement you have to take the `$select` operator.\n\nThe minimum `$select` must supply the `$columns` operator, to specify at least one column.\nOptionally you can use:\n- $distinct\n- $all\n- $from\n- $where\n- $groupBy\n- $having\n- $sort\n- **and all operators from your specific language dialect**\n\nJust a short example:\n```javascript\n$select: {\n\t\t$columns: [\n\t\t\t'first_name',\n\t\t\t{ first_name_count: { $count: '*' } }\n\t\t],\n\t\t$from: 'people',\n\t\t$groupBy: ['first_name'],\n\t\t$having: {\n\t\t\t$expr: { $count: '*', $gt: 2 }\n\t\t}\n}\n```","value":"# SELECT Statements\n\nTo query the database using a select statement you have to take the `$select` operator.\n\nThe minimum `$select` must supply the `$columns` operator, to specify at least one column.\nOptionally you can use:\n- $distinct\n- $all\n- $from\n- $where\n- $groupBy\n- $having\n- $sort\n- **and all operators from your specific language dialect**\n\nJust a short example:\n```javascript\n$select: {\n\t\t$columns: [\n\t\t\t'first_name',\n\t\t\t{ first_name_count: { $count: '*' } }\n\t\t],\n\t\t$from: 'people',\n\t\t$groupBy: ['first_name'],\n\t\t$having: {\n\t\t\t$expr: { $count: '*', $gt: 2 }\n\t\t}\n}\n```"},{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"name":"Select","summary":"Main operator to generate a SELECT Statement\n```syntax\nSELECT [$distinct] [$all]\n\t\t<$columns>\n\t\t{ FROM [$from] }\n\t\t{ WHERE [$where] }\n\t\t{ GROUP BY [$groupBy]\n\t\t\t{ HAVING [$having] }\n\t\t}\n\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n```","params":[{"type":{"names":["Object"]},"description":"Specifies the details for the $select","name":"expr","typeStr":"Object"}],"longname":"Select","kind":"member","scope":"global","___id":"T000024R000005","___s":true,"longnameLower":"select","depths":["Select"],"depth0":"Select","before":"# SELECT Statements\n\nTo query the database using a select statement you have to take the `$select` operator.\n\nThe minimum `$select` must supply the `$columns` operator, to specify at least one column.\nOptionally you can use:\n- $distinct\n- $all\n- $from\n- $where\n- $groupBy\n- $having\n- $sort\n- **and all operators from your specific language dialect**\n\nJust a short example:\n```javascript\n$select: {\n\t\t$columns: [\n\t\t\t'first_name',\n\t\t\t{ first_name_count: { $count: '*' } }\n\t\t],\n\t\t$from: 'people',\n\t\t$groupBy: ['first_name'],\n\t\t$having: {\n\t\t\t$expr: { $count: '*', $gt: 2 }\n\t\t}\n}\n```","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L18","hashId":"Select","_id":"XRzLgMNaWSjYZOR5"},{"comment":"/**\n\t * @name Select\n\t * @summary Syntax for SELECT Statement using PostgreSQL language dialect.\n\t * ```syntax\n\t * SELECT [$distinct] [$all]\n\t * \t\t{ <$columns> [$into] }\n\t * \t\t{ FROM [$table] | [$from] }\n\t * \t\t{ WHERE [$where] }\n\t * \t\t{ GROUP BY [$groupBy]\n\t * \t\t\t{ HAVING [$having] }\n\t * \t\t}\n\t * \t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t * \t\t{ LIMIT [$limit] { OFFSET [$offset] } }\n\t * ```\n\t * @isquerying true\n\t * @postgres true\n\t */","meta":{"range":[133,568],"filename":"select.js","lineno":7,"path":"/home/rene/nodejs/json-sql-builder/lib/postgreSQL","code":{}},"name":"Select","summary":"Syntax for SELECT Statement using PostgreSQL language dialect.\n```syntax\nSELECT [$distinct] [$all]\n\t\t{ <$columns> [$into] }\n\t\t{ FROM [$table] | [$from] }\n\t\t{ WHERE [$where] }\n\t\t{ GROUP BY [$groupBy]\n\t\t\t{ HAVING [$having] }\n\t\t}\n\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t\t{ LIMIT [$limit] { OFFSET [$offset] } }\n```","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"longname":"Select","kind":"member","scope":"global","___id":"T000019R000005","___s":true,"longnameLower":"select","depths":["Select"],"depth0":"Select","isquerying":true,"postgres":"true","category":"Querying","gitRelative":"/lib/postgreSQL/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/postgreSQL/select.js#L7","hashId":"Select","_id":"dv2TDSN9jqNTeIwx"},{"comment":"/**\n\t * @name $calcFoundRows\n\t * @summary Specifies the SQL\\_CALC\\_FOUND\\_ROWS keyword for the SELECT statement using language MySQL\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param calcFoundRows\t {Boolean}\n\t * Specifies the SQL\\_CALC\\_FOUND\\_ROWS keyword\n\t * - `$select: { $calcFoundRows: true, $columns: [ ... ],  ... }`\n\t */","meta":{"range":[1016,1371],"filename":"select.js","lineno":36,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$calcFoundRows","summary":"Specifies the SQL\\_CALC\\_FOUND\\_ROWS keyword for the SELECT statement using language MySQL","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"Specifies the SQL\\_CALC\\_FOUND\\_ROWS keyword\n- `$select: { $calcFoundRows: true, $columns: [ ... ],  ... }`","name":"calcFoundRows","typeStr":"Boolean"}],"scope":"static","longname":"Select.$calcFoundRows","kind":"member","___id":"T000026R000006","___s":true,"longnameLower":"select.$calcfoundrows","depths":["Select","$calcFoundRows"],"depth0":"Select","depth1":"$calcFoundRows","isquerying":true,"mysql":"true","category":"Querying","arguments":"calcFoundRows","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L36","hashId":"Select-calcFoundRows","_id":"BD0grAGzApdxbbSy"},{"comment":"/**\n\t * @name $columns\n\t * @summary Specifies the columns for the `INSERT` and `SELECT` Statement\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param columns\t {Array | Object}\n\t * Specifies the columns as Array or Object used by §insert or $select\n\t * - columns as **Array** like: `$columns: ['first_name', 'last_name']`\n\t * - columns as **Object** like: `$columns: { first_name: { $as: 'alias_first_name' }, last_name: { $val: 'Always Doe' } }`\n\t */","meta":{"range":[3068,3542],"filename":"select.js","lineno":114,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$columns","summary":"Specifies the columns for the `INSERT` and `SELECT` Statement","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Array","Object"]},"description":"Specifies the columns as Array or Object used by §insert or $select\n- columns as **Array** like: `$columns: ['first_name', 'last_name']`\n- columns as **Object** like: `$columns: { first_name: { $as: 'alias_first_name' }, last_name: { $val: 'Always Doe' } }`","name":"columns","typeStr":"Array | Object"}],"scope":"static","longname":"Select.$columns","kind":"member","___id":"T000024R000011","___s":true,"longnameLower":"select.$columns","depths":["Select","$columns"],"depth0":"Select","depth1":"$columns","isquerying":true,"ansi":"true","category":"Querying","arguments":"columns","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L114","hashId":"Select-columns","_id":"V0VnP4IwzYD35kSW"},{"comment":"/**\n\t * @name $distinct\n\t * @summary Specifies the DISTINCT keyword for an Statement.\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param distinct\t {Boolean}\n\t * Specifies the DISTINCT keyword:\n\t * - example: `$select: { $distinct: true, $columns: [ ... ], ... }`\n\t */","meta":{"range":[9706,9998],"filename":"select.js","lineno":311,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$distinct","summary":"Specifies the DISTINCT keyword for an Statement.","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"Specifies the DISTINCT keyword:\n- example: `$select: { $distinct: true, $columns: [ ... ], ... }`","name":"distinct","typeStr":"Boolean"}],"scope":"static","longname":"Select.$distinct","kind":"member","___id":"T000024R000026","___s":true,"longnameLower":"select.$distinct","depths":["Select","$distinct"],"depth0":"Select","depth1":"$distinct","isquerying":true,"ansi":"true","category":"Querying","arguments":"distinct","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L311","hashId":"Select-distinct","_id":"RL2QLdLAslTq9YII"},{"comment":"/**\n\t * @name $from\n\t * @summary Specifies the FROM clause for the SELECT statement\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param value\t {String | Object}\n\t * Specifies the table-identifier as string or an Object to use an alias\n\t * - value is a **String** like: `$from: 'people'`\n\t * - value is an **Object** like: `$from: { people: { $as: 'alias_people' } }`\n\t *\n\t */","meta":{"range":[2225,2624],"filename":"select.js","lineno":88,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$from","summary":"Specifies the FROM clause for the SELECT statement","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String","Object"]},"description":"Specifies the table-identifier as string or an Object to use an alias\n- value is a **String** like: `$from: 'people'`\n- value is an **Object** like: `$from: { people: { $as: 'alias_people' } }`","name":"value","typeStr":"String | Object"}],"scope":"static","longname":"Select.$from","kind":"member","___id":"T000024R000010","___s":true,"longnameLower":"select.$from","depths":["Select","$from"],"depth0":"Select","depth1":"$from","isquerying":true,"ansi":"true","category":"Querying","arguments":"value","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L88","hashId":"Select-from","_id":"fozrMv31titfeoSj"},{"comment":"/**\n\t * @name $groupBy\n\t * @summary Specifies the GROUP BY clause for the SELECT statement\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param groupBy\t {Array | Object}\n\t * Specifies the GROUP BY clause as Array or Object to use on the select statement\n\t * - groupBy is an **Array** like: `$groupBy: ['first_name', 'last_name']`\n\t */","meta":{"range":[5570,5927],"filename":"select.js","lineno":187,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$groupBy","summary":"Specifies the GROUP BY clause for the SELECT statement","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Array","Object"]},"description":"Specifies the GROUP BY clause as Array or Object to use on the select statement\n- groupBy is an **Array** like: `$groupBy: ['first_name', 'last_name']`","name":"groupBy","typeStr":"Array | Object"}],"scope":"static","longname":"Select.$groupBy","kind":"member","___id":"T000024R000016","___s":true,"longnameLower":"select.$groupby","depths":["Select","$groupBy"],"depth0":"Select","depth1":"$groupBy","isquerying":true,"ansi":"true","category":"Querying","arguments":"groupBy","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L187","hashId":"Select-groupBy","_id":"wq4FfPZDfxzhZRtZ"},{"comment":"/**\n\t * @name $rollup\n\t * @summary Specifies the `WITH ROLLUP` option for the `GROUP BY` clause.\n\t *\n\t * @memberOf Select.$groupBy\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param rollup\t {Boolean}\n\t * - rollup: `... $groupBy: ['job_titel', 'city'], $rollup: true, ...`\n\t */","meta":{"range":[9480,9757],"filename":"select.js","lineno":301,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$rollup","summary":"Specifies the `WITH ROLLUP` option for the `GROUP BY` clause.","memberof":"Select.$groupBy","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"- rollup: `... $groupBy: ['job_titel', 'city'], $rollup: true, ...`","name":"rollup","typeStr":"Boolean"}],"scope":"static","longname":"Select.$groupBy.$rollup","kind":"member","___id":"T000026R000020","___s":true,"longnameLower":"select.$groupby.$rollup","depths":["Select","$groupBy","$rollup"],"depth0":"Select","depth1":"$groupBy","depth2":"$rollup","isquerying":true,"mysql":"true","category":"Querying","arguments":"rollup","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L301","hashId":"Select-groupBy-rollup","_id":"LUfqAEnNIYJBPKpi"},{"comment":"/**\n\t * @name $having\n\t * @summary Specifies the HAVING clause on a SELECT ... GROUP BY Statement\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param having\t {Object}\n\t * Specifies the HAVING clause as an Object\n\t * - having is an **Object** like: `$having: { $expr: { $count: '*', $gt: 2 } }`\n\t */","meta":{"range":[6238,6560],"filename":"select.js","lineno":206,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$having","summary":"Specifies the HAVING clause on a SELECT ... GROUP BY Statement","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the HAVING clause as an Object\n- having is an **Object** like: `$having: { $expr: { $count: '*', $gt: 2 } }`","name":"having","typeStr":"Object"}],"scope":"static","longname":"Select.$having","kind":"member","___id":"T000024R000018","___s":true,"longnameLower":"select.$having","depths":["Select","$having"],"depth0":"Select","depth1":"$having","isquerying":true,"ansi":"true","category":"Querying","arguments":"having","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L206","hashId":"Select-having","_id":"g3iZD18tCFyHhoKs"},{"comment":"/**\n\t * @name $into\n\t * @summary Specifies the INTO clause for the SELECT statement using language dialect MySQL.\n\t *\n\t * **Syntax:**\n\t * ```syntax\n\t * INTO [$outfile] [$dumpfile]\n\t * ```\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param into\t {Array | Object}\n\t * Specifies the INTO clause\n\t * - into as **Array** like: `$select: { $columns: ['first_name', 'last_name'], $into: ['@firstname', '@lastname'], ... }`\n\t * - into as **Object** like: `$select: { $columns: ['first_name', 'last_name'], $into: { $outfile: { ... } }, ... }`\n\t *\n\t * For further details have a look at the operators\n\t * - `$outfile`\n\t * - `$dumpfile`\n\t *\n\t */","meta":{"range":[1644,2305],"filename":"select.js","lineno":56,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$into","summary":"Specifies the INTO clause for the SELECT statement using language dialect MySQL.\n\n**Syntax:**\n```syntax\nINTO [$outfile] [$dumpfile]\n```","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Array","Object"]},"description":"Specifies the INTO clause\n- into as **Array** like: `$select: { $columns: ['first_name', 'last_name'], $into: ['@firstname', '@lastname'], ... }`\n- into as **Object** like: `$select: { $columns: ['first_name', 'last_name'], $into: { $outfile: { ... } }, ... }`\n\nFor further details have a look at the operators\n- `$outfile`\n- `$dumpfile`","name":"into","typeStr":"Array | Object"}],"scope":"static","longname":"Select.$into","kind":"member","___id":"T000026R000007","___s":true,"longnameLower":"select.$into","depths":["Select","$into"],"depth0":"Select","depth1":"$into","isquerying":true,"mysql":"true","category":"Querying","arguments":"into","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L56","hashId":"Select-into","_id":"Vv57zkIydE4pyg5B"},{"comment":"/**\n\t * @name $dumpfile\n\t * @summary Specifies the INTO DUMPFILE clause for the SELECT statement using language dialect MySQL.\n\t *\n\t * **Syntax:**\n\t * ```syntax\n\t * INTO DUMPFILE <$file>\n\t * ```\n\t *\n\t * @memberOf Select.$into\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param dumpfile\t {Object}\n\t * Specifies the INTO DUMPFILE clause\n\t * - dumpfile as **Object** like: `$select: { ... $into: { $dumpfile: { $file: '/tmp/people.csv' } }, ... }`\n\t */","meta":{"range":[8758,9208],"filename":"select.js","lineno":276,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$dumpfile","summary":"Specifies the INTO DUMPFILE clause for the SELECT statement using language dialect MySQL.\n\n**Syntax:**\n```syntax\nINTO DUMPFILE <$file>\n```","memberof":"Select.$into","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the INTO DUMPFILE clause\n- dumpfile as **Object** like: `$select: { ... $into: { $dumpfile: { $file: '/tmp/people.csv' } }, ... }`","name":"dumpfile","typeStr":"Object"}],"scope":"static","longname":"Select.$into.$dumpfile","kind":"member","___id":"T000026R000019","___s":true,"longnameLower":"select.$into.$dumpfile","depths":["Select","$into","$dumpfile"],"depth0":"Select","depth1":"$into","depth2":"$dumpfile","isquerying":true,"mysql":"true","category":"Querying","arguments":"dumpfile","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L276","hashId":"Select-into-dumpfile","_id":"7UF4Opm9Op0r1C0b"},{"comment":"/**\n\t * @name $outfile\n\t * @summary Specifies the INTO OUTFILE clause for the SELECT statement using language dialect MySQL.\n\t *\n\t * **Syntax:**\n\t * ```syntax\n\t * INTO OUTFILE <$file> [$fields] [$lines]\n\t * ```\n\t *\n\t * @memberOf Select.$into\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param outfile\t {Object}\n\t * Specifies the INTO OUTFILE clause\n\t * - outfile as **Object** like: `$select: { ... $into: { $outfile: { $file: '/tmp/people.csv', $fields: { $terminatedBy: ';' } } }, ... }`\n\t *\n\t * For further details have a look at the operators\n\t * - `$fields`\n\t * - `$lines`\n\t */","meta":{"range":[3649,4232],"filename":"select.js","lineno":116,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$outfile","summary":"Specifies the INTO OUTFILE clause for the SELECT statement using language dialect MySQL.\n\n**Syntax:**\n```syntax\nINTO OUTFILE <$file> [$fields] [$lines]\n```","memberof":"Select.$into","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the INTO OUTFILE clause\n- outfile as **Object** like: `$select: { ... $into: { $outfile: { $file: '/tmp/people.csv', $fields: { $terminatedBy: ';' } } }, ... }`\n\nFor further details have a look at the operators\n- `$fields`\n- `$lines`","name":"outfile","typeStr":"Object"}],"scope":"static","longname":"Select.$into.$outfile","kind":"member","___id":"T000026R000012","___s":true,"longnameLower":"select.$into.$outfile","depths":["Select","$into","$outfile"],"depth0":"Select","depth1":"$into","depth2":"$outfile","isquerying":true,"mysql":"true","category":"Querying","arguments":"outfile","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L116","hashId":"Select-into-outfile","_id":"QLXWzNDiW1aGhOw0"},{"comment":"/**\n\t * @name $enclosedBy\n\t * @summary Specifies the `ENCLOSED BY` option for the INTO OUTFILE clause.\n\t *\n\t * @memberOf Select.$into.$outfile\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param enclosedBy\t {String}\n\t * Specifies `ENCLOSED BY` option for INTO OUTFILE clause\n\t * - enclosedBy: `... $fields: { $terminatedBy: ';', $enclosedBy: '\"' }, $lines: { $terminatedBy: '\\n'} ...`\n\t */","meta":{"range":[7503,7892],"filename":"select.js","lineno":236,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$enclosedBy","summary":"Specifies the `ENCLOSED BY` option for the INTO OUTFILE clause.","memberof":"Select.$into.$outfile","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies `ENCLOSED BY` option for INTO OUTFILE clause\n- enclosedBy: `... $fields: { $terminatedBy: ';', $enclosedBy: '\"' }, $lines: { $terminatedBy: '\\n'} ...`","name":"enclosedBy","typeStr":"String"}],"scope":"static","longname":"Select.$into.$outfile.$enclosedBy","kind":"member","___id":"T000026R000017","___s":true,"longnameLower":"select.$into.$outfile.$enclosedby","depths":["Select","$into","$outfile","$enclosedBy"],"depth0":"Select","depth1":"$into","depth2":"$outfile","depth3":"$enclosedBy","isquerying":true,"mysql":"true","category":"Querying","arguments":"enclosedBy","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L236","hashId":"Select-into-outfile-enclosedBy","_id":"QnqILZfBrMjO4anO"},{"comment":"/**\n\t * @name $escapedBy\n\t * @summary Specifies the `ESCAPED BY` option for the INTO OUTFILE clause.\n\t *\n\t * @memberOf Select.$into.$outfile\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param escapedBy\t {String}\n\t * Specifies `ESCAPED BY` option for INTO OUTFILE clause\n\t * - escapedBy: `... $fields: { $terminatedBy: ';', $escapedBy: '\\\\' }, $lines: { $terminatedBy: '\\n'} ...`\n\t */","meta":{"range":[8136,8520],"filename":"select.js","lineno":256,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$escapedBy","summary":"Specifies the `ESCAPED BY` option for the INTO OUTFILE clause.","memberof":"Select.$into.$outfile","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies `ESCAPED BY` option for INTO OUTFILE clause\n- escapedBy: `... $fields: { $terminatedBy: ';', $escapedBy: '\\\\' }, $lines: { $terminatedBy: '\\n'} ...`","name":"escapedBy","typeStr":"String"}],"scope":"static","longname":"Select.$into.$outfile.$escapedBy","kind":"member","___id":"T000026R000018","___s":true,"longnameLower":"select.$into.$outfile.$escapedby","depths":["Select","$into","$outfile","$escapedBy"],"depth0":"Select","depth1":"$into","depth2":"$outfile","depth3":"$escapedBy","isquerying":true,"mysql":"true","category":"Querying","arguments":"escapedBy","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L256","hashId":"Select-into-outfile-escapedBy","_id":"Pv3ifNk7eaaVW1DJ"},{"comment":"/**\n\t * @name $fields\n\t * @summary Specifies the FIELD options for the INTO OUTFILE clause using the SELECT statement with language dialect MySQL.\n\t *\n\t * **Syntax:**\n\t * ```syntax\n\t * FIELDS [$terminatedBy] [$enclosedBy] [$escapedBy]\n\t * ```\n\t *\n\t * @memberOf Select.$into.$outfile\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param fields\t {Object}\n\t * Specifies FIELD options for INTO OUTFILE clause\n\t * - outfile as **Object** like: `$select: { ... $into: { $outfile: { $file: '/tmp/people.csv', $fields: { $terminatedBy: ';' } } }, ... }`\n\t */","meta":{"range":[5137,5686],"filename":"select.js","lineno":165,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$fields","summary":"Specifies the FIELD options for the INTO OUTFILE clause using the SELECT statement with language dialect MySQL.\n\n**Syntax:**\n```syntax\nFIELDS [$terminatedBy] [$enclosedBy] [$escapedBy]\n```","memberof":"Select.$into.$outfile","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies FIELD options for INTO OUTFILE clause\n- outfile as **Object** like: `$select: { ... $into: { $outfile: { $file: '/tmp/people.csv', $fields: { $terminatedBy: ';' } } }, ... }`","name":"fields","typeStr":"Object"}],"scope":"static","longname":"Select.$into.$outfile.$fields","kind":"member","___id":"T000026R000014","___s":true,"longnameLower":"select.$into.$outfile.$fields","depths":["Select","$into","$outfile","$fields"],"depth0":"Select","depth1":"$into","depth2":"$outfile","depth3":"$fields","isquerying":true,"mysql":"true","category":"Querying","arguments":"fields","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L165","hashId":"Select-into-outfile-fields","_id":"0DMKOI9PXbUPgiKc"},{"comment":"/**\n\t * @name $file\n\t * @summary Specifies file for the INTO OUTFILE clause using language dialect MySQL.\n\t *\n\t * @memberOf Select.$into.$outfile\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param file\t {String}\n\t * Specifies the filename for the OUTFILE clause\n\t * - outfile as **Object** like: `$select: { ... $into: { $outfile: { $file: '/tmp/people.csv', $fields: { $terminatedBy: ';' } } }, ... }`\n\t */","meta":{"range":[4532,4940],"filename":"select.js","lineno":145,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$file","summary":"Specifies file for the INTO OUTFILE clause using language dialect MySQL.","memberof":"Select.$into.$outfile","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the filename for the OUTFILE clause\n- outfile as **Object** like: `$select: { ... $into: { $outfile: { $file: '/tmp/people.csv', $fields: { $terminatedBy: ';' } } }, ... }`","name":"file","typeStr":"String"}],"scope":"static","longname":"Select.$into.$outfile.$file","kind":"member","___id":"T000026R000013","___s":true,"longnameLower":"select.$into.$outfile.$file","depths":["Select","$into","$outfile","$file"],"depth0":"Select","depth1":"$into","depth2":"$outfile","depth3":"$file","isquerying":true,"mysql":"true","category":"Querying","arguments":"file","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L145","hashId":"Select-into-outfile-file","_id":"lBXFbb56zIgEnBsp"},{"comment":"/**\n\t * @name $lines\n\t * @summary Specifies the LINES options for the INTO OUTFILE clause using the SELECT statement with language dialect MySQL.\n\t *\n\t * **Syntax:**\n\t * ```syntax\n\t * LINES <$terminatedBy>\n\t * ```\n\t *\n\t * @memberOf Select.$into.$outfile\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param lines\t {Object}\n\t * Specifies LINES options for INTO OUTFILE clause\n\t * - lines as **Object** like: `$select: { ... $into: { $outfile: { $file: '/tmp/people.csv', $fields: { $terminatedBy: ';' }, $lines: { $terminatedBy: '\\n'} } }, ... }`\n\t */","meta":{"range":[5990,6539],"filename":"select.js","lineno":191,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$lines","summary":"Specifies the LINES options for the INTO OUTFILE clause using the SELECT statement with language dialect MySQL.\n\n**Syntax:**\n```syntax\nLINES <$terminatedBy>\n```","memberof":"Select.$into.$outfile","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies LINES options for INTO OUTFILE clause\n- lines as **Object** like: `$select: { ... $into: { $outfile: { $file: '/tmp/people.csv', $fields: { $terminatedBy: ';' }, $lines: { $terminatedBy: '\\n'} } }, ... }`","name":"lines","typeStr":"Object"}],"scope":"static","longname":"Select.$into.$outfile.$lines","kind":"member","___id":"T000026R000015","___s":true,"longnameLower":"select.$into.$outfile.$lines","depths":["Select","$into","$outfile","$lines"],"depth0":"Select","depth1":"$into","depth2":"$outfile","depth3":"$lines","isquerying":true,"mysql":"true","category":"Querying","arguments":"lines","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L191","hashId":"Select-into-outfile-lines","_id":"4jF3zNQzA5t6STmQ"},{"comment":"/**\n\t * @name $terminatedBy\n\t * @summary Specifies the `TERMINATED BY` option for the INTO OUTFILE clause. This belongs to both the `$fields` and `$lines` ooperator.\n\t *\n\t * @memberOf Select.$into.$outfile\n\t * @isquerying true\n\t * @mysql true\n\t *\n\t * @param terminatedBy\t {String}\n\t * Specifies `TERMINATED BY` option for INTO OUTFILE clause\n\t * - terminatedBy: `... $fields: { $terminatedBy: ';' }, $lines: { $terminatedBy: '\\n'} ...`\n\t */","meta":{"range":[6807,7247],"filename":"select.js","lineno":216,"path":"/home/rene/nodejs/json-sql-builder/lib/mysql","code":{}},"name":"$terminatedBy","summary":"Specifies the `TERMINATED BY` option for the INTO OUTFILE clause. This belongs to both the `$fields` and `$lines` ooperator.","memberof":"Select.$into.$outfile","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies `TERMINATED BY` option for INTO OUTFILE clause\n- terminatedBy: `... $fields: { $terminatedBy: ';' }, $lines: { $terminatedBy: '\\n'} ...`","name":"terminatedBy","typeStr":"String"}],"scope":"static","longname":"Select.$into.$outfile.$terminatedBy","kind":"member","___id":"T000026R000016","___s":true,"longnameLower":"select.$into.$outfile.$terminatedby","depths":["Select","$into","$outfile","$terminatedBy"],"depth0":"Select","depth1":"$into","depth2":"$outfile","depth3":"$terminatedBy","isquerying":true,"mysql":"true","category":"Querying","arguments":"terminatedBy","gitRelative":"/lib/mysql/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/mysql/select.js#L216","hashId":"Select-into-outfile-terminatedBy","_id":"34rGzYgPEFEX0ruh"},{"comment":"/**\n\t * @name $joins\n\t * @summary Specifies the Joins-Object for all Tables and Views to join to the current Table or View\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param joins\t {Object}\n\t * Specifies on or more Table, View as Property to join\n\t *\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$select: {\n\t * \t\t$from: 'people',\n\t * \t\t$joins: {\n\t * \t\t\thobbies: { $leftJoin: { 'people.id': $eq: { $column: 'hobbies.people_id' } } },\n\t * \t\t\t...\n \t * \t\t}\n \t * \t}\n\t * });\n\t * ```\n\t */","meta":{"range":[676,1195],"filename":"joins.js","lineno":26,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$joins","summary":"Specifies the Joins-Object for all Tables and Views to join to the current Table or View","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies on or more Table, View as Property to join\n\n```javascript\nvar query = sqlbuilder.build({\n\t$select: {\n\t\t$from: 'people',\n\t\t$joins: {\n\t\t\thobbies: { $leftJoin: { 'people.id': $eq: { $column: 'hobbies.people_id' } } },\n\t\t\t...\n\t\t}\n\t}\n});\n```","name":"joins","typeStr":"Object"}],"scope":"static","longname":"Select.$joins","kind":"member","___id":"T000005R000005","___s":true,"longnameLower":"select.$joins","depths":["Select","$joins"],"depth0":"Select","depth1":"$joins","isquerying":true,"ansi":"true","category":"Querying","arguments":"joins","gitRelative":"/lib/ansi/joins.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/joins.js#L26","hashId":"Select-joins","_id":"IO4r4LqYe9KTZ0RZ"},{"comment":"/**\n\t * @name $fullOuterJoin\n\t * @summary Specifies the `FULL OUTER JOIN` clause\n\t *\n\t * @memberOf Select.$joins\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param fullOuterJoin\t {Object}\n\t * Specifies the table to join using `FULL OUTER JOIN`\n\t *\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$select: {\n\t * \t\t$from: 'people',\n\t * \t\t$joins: {\n\t * \t\t\thobbies: { $fullOuterJoin: { 'people.id': $eq: { $column: 'hobbies.people_id' } } },\n\t * \t\t\t...\n\t * \t\t}\n\t * \t}\n\t * });\n\t * ```\n\t */","meta":{"range":[3641,4135],"filename":"joins.js","lineno":147,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$fullOuterJoin","summary":"Specifies the `FULL OUTER JOIN` clause","memberof":"Select.$joins","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the table to join using `FULL OUTER JOIN`\n\n```javascript\nvar query = sqlbuilder.build({\n\t$select: {\n\t\t$from: 'people',\n\t\t$joins: {\n\t\t\thobbies: { $fullOuterJoin: { 'people.id': $eq: { $column: 'hobbies.people_id' } } },\n\t\t\t...\n\t\t}\n\t}\n});\n```","name":"fullOuterJoin","typeStr":"Object"}],"scope":"static","longname":"Select.$joins.$fullOuterJoin","kind":"member","___id":"T000005R000010","___s":true,"longnameLower":"select.$joins.$fullouterjoin","depths":["Select","$joins","$fullOuterJoin"],"depth0":"Select","depth1":"$joins","depth2":"$fullOuterJoin","isquerying":true,"ansi":"true","category":"Querying","arguments":"fullOuterJoin","gitRelative":"/lib/ansi/joins.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/joins.js#L147","hashId":"Select-joins-fullOuterJoin","_id":"B4dnrfHbPoV3nFbx"},{"comment":"/**\n\t * @name $innerJoin\n\t * @summary Specifies the `INNER JOIN` clause\n\t *\n\t * @memberOf Select.$joins\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param innerJoin\t {Object}\n\t * Specifies the table to join using `INNER JOIN`\n\t *\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$select: {\n\t * \t\t$from: 'people',\n\t * \t\t$joins: {\n\t * \t\t\thobbies: { $innerJoin: { 'people.id': $eq: { $column: 'hobbies.people_id' } } },\n\t * \t\t\t...\n\t * \t\t}\n\t * \t}\n\t * });\n\t * ```\n\t */","meta":{"range":[2990,3462],"filename":"joins.js","lineno":120,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$innerJoin","summary":"Specifies the `INNER JOIN` clause","memberof":"Select.$joins","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the table to join using `INNER JOIN`\n\n```javascript\nvar query = sqlbuilder.build({\n\t$select: {\n\t\t$from: 'people',\n\t\t$joins: {\n\t\t\thobbies: { $innerJoin: { 'people.id': $eq: { $column: 'hobbies.people_id' } } },\n\t\t\t...\n\t\t}\n\t}\n});\n```","name":"innerJoin","typeStr":"Object"}],"scope":"static","longname":"Select.$joins.$innerJoin","kind":"member","___id":"T000005R000009","___s":true,"longnameLower":"select.$joins.$innerjoin","depths":["Select","$joins","$innerJoin"],"depth0":"Select","depth1":"$joins","depth2":"$innerJoin","isquerying":true,"ansi":"true","category":"Querying","arguments":"innerJoin","gitRelative":"/lib/ansi/joins.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/joins.js#L120","hashId":"Select-joins-innerJoin","_id":"Xr7Rkx1v1gmMk6Ex"},{"comment":"/**\n\t * @name $leftJoin\n\t * @summary Specifies the `LEFT JOIN` clause\n\t *\n\t * @memberOf Select.$joins\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param leftJoin\t {Object}\n\t * Specifies the table to join using `LEFT JOIN`\n\t *\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$select: {\n\t * \t\t$from: 'people',\n\t * \t\t$joins: {\n\t * \t\t\thobbies: { $leftJoin: { 'people.id': $eq: { $column: 'hobbies.people_id' } } },\n\t * \t\t\t...\n\t * \t\t}\n\t * \t}\n\t * });\n\t * ```\n\t */","meta":{"range":[1697,2164],"filename":"joins.js","lineno":66,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$leftJoin","summary":"Specifies the `LEFT JOIN` clause","memberof":"Select.$joins","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the table to join using `LEFT JOIN`\n\n```javascript\nvar query = sqlbuilder.build({\n\t$select: {\n\t\t$from: 'people',\n\t\t$joins: {\n\t\t\thobbies: { $leftJoin: { 'people.id': $eq: { $column: 'hobbies.people_id' } } },\n\t\t\t...\n\t\t}\n\t}\n});\n```","name":"leftJoin","typeStr":"Object"}],"scope":"static","longname":"Select.$joins.$leftJoin","kind":"member","___id":"T000005R000007","___s":true,"longnameLower":"select.$joins.$leftjoin","depths":["Select","$joins","$leftJoin"],"depth0":"Select","depth1":"$joins","depth2":"$leftJoin","isquerying":true,"ansi":"true","category":"Querying","arguments":"leftJoin","gitRelative":"/lib/ansi/joins.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/joins.js#L66","hashId":"Select-joins-leftJoin","_id":"ynPlGC1hPoCEVLnA"},{"comment":"/**\n\t * @name $rightJoin\n\t * @summary Specifies the `RIGHT JOIN` clause\n\t *\n\t * @memberOf Select.$joins\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param rightJoin\t {Object}\n\t * Specifies the table to join using `RIGHT JOIN`\n\t *\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$select: {\n\t * \t\t$from: 'people',\n\t * \t\t$joins: {\n\t * \t\t\thobbies: { $leftJoin: { 'people.id': $eq: { $column: 'hobbies.people_id' } } },\n\t * \t\t\t...\n\t * \t\t}\n\t * \t}\n\t * });\n\t * ```\n\t */","meta":{"range":[2340,2811],"filename":"joins.js","lineno":93,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$rightJoin","summary":"Specifies the `RIGHT JOIN` clause","memberof":"Select.$joins","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the table to join using `RIGHT JOIN`\n\n```javascript\nvar query = sqlbuilder.build({\n\t$select: {\n\t\t$from: 'people',\n\t\t$joins: {\n\t\t\thobbies: { $leftJoin: { 'people.id': $eq: { $column: 'hobbies.people_id' } } },\n\t\t\t...\n\t\t}\n\t}\n});\n```","name":"rightJoin","typeStr":"Object"}],"scope":"static","longname":"Select.$joins.$rightJoin","kind":"member","___id":"T000005R000008","___s":true,"longnameLower":"select.$joins.$rightjoin","depths":["Select","$joins","$rightJoin"],"depth0":"Select","depth1":"$joins","depth2":"$rightJoin","isquerying":true,"ansi":"true","category":"Querying","arguments":"rightJoin","gitRelative":"/lib/ansi/joins.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/joins.js#L93","hashId":"Select-joins-rightJoin","_id":"Os2PBeKIciJprYiV"},{"comment":"/**\n\t * @name $limit\n\t * @summary Specifies the `LIMIT` option for the `SELECT` Statement.\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @mysql true\n\t * @postgres true\n\t *\n\t * @param limit\t {String | Number}\n\t * - limit as **String**: `... $limit: 'ALL', $offset: 0, ...`\n\t * - limit as **Number**: `... $limit: 10, $offset: 0, ...`\n\t *\n\t * For MySQL you an use the keyword `ALL`. Within the query the value would be replaced with `18446744073709551615`.\n\t * Further details using `LIMIT ALL` for MySQL see the\n\t * official docs [https://dev.mysql.com/doc/refman/5.7/en/select.html](https://dev.mysql.com/doc/refman/5.7/en/select.html)\n\t */","meta":{"range":[10235,10879],"filename":"select.js","lineno":331,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$limit","summary":"Specifies the `LIMIT` option for the `SELECT` Statement.","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["String","Number"]},"description":"- limit as **String**: `... $limit: 'ALL', $offset: 0, ...`\n- limit as **Number**: `... $limit: 10, $offset: 0, ...`\n\nFor MySQL you an use the keyword `ALL`. Within the query the value would be replaced with `18446744073709551615`.\nFurther details using `LIMIT ALL` for MySQL see the\nofficial docs [https://dev.mysql.com/doc/refman/5.7/en/select.html](https://dev.mysql.com/doc/refman/5.7/en/select.html)","name":"limit","typeStr":"String | Number"}],"scope":"static","longname":"Select.$limit","kind":"member","___id":"T000024R000027","___s":true,"longnameLower":"select.$limit","depths":["Select","$limit"],"depth0":"Select","depth1":"$limit","isquerying":true,"mysql":"true","postgres":"true","category":"Querying","arguments":"limit","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L331","hashId":"Select-limit","_id":"0gJRwE4FS0HAT7qb"},{"comment":"/**\n\t * @name $offset\n\t * @summary Specifies the `OFFSET` option for the `SELECT` Statement.\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @mysql true\n\t * @postgres true\n\t *\n\t * @param offset\t {Number}\n\t * - offset as **Number**: `... $limit: 10, $offset: 500, ...`\n\t *\n\t * For MySQL you have to use `OFFSET` option always with `LIMIT`. See the\n\t * official docs [https://dev.mysql.com/doc/refman/5.7/en/select.html](https://dev.mysql.com/doc/refman/5.7/en/select.html)\n\t */","meta":{"range":[11342,11820],"filename":"select.js","lineno":366,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$offset","summary":"Specifies the `OFFSET` option for the `SELECT` Statement.","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"},{"originalTitle":"postgres","title":"postgres","text":"true","value":"true"}],"params":[{"type":{"names":["Number"]},"description":"- offset as **Number**: `... $limit: 10, $offset: 500, ...`\n\nFor MySQL you have to use `OFFSET` option always with `LIMIT`. See the\nofficial docs [https://dev.mysql.com/doc/refman/5.7/en/select.html](https://dev.mysql.com/doc/refman/5.7/en/select.html)","name":"offset","typeStr":"Number"}],"scope":"static","longname":"Select.$offset","kind":"member","___id":"T000024R000029","___s":true,"longnameLower":"select.$offset","depths":["Select","$offset"],"depth0":"Select","depth1":"$offset","isquerying":true,"mysql":"true","postgres":"true","category":"Querying","arguments":"offset","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L366","hashId":"Select-offset","_id":"djIFZzlgH7P0hhjj"},{"comment":"/**\n\t * @after\n\t *\n\t * # UNION SELECT Statements\n\t *\n\t * To create a query using the `UNION` clause you have to use the `$union` operator and define an Array of $select-Objects.\n\t * Check the Syntax and Examples.\n\t *\n\t * **Example**\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$union: [{\n\t * \t\t$select: {\n\t * \t\t\t$from: 'people',\n\t * \t\t\t$columns: ['first_name', 'last_name'],\n\t * \t\t\t$where: { id: 1 }\n\t * \t\t}}, {\n\t * \t\t$select: {\n\t * \t\t\t$from: 'people_history',\n\t * \t\t\t$columns: ['first_name', 'last_name'],\n\t * \t\t\t$where: { id: 1 }\n\t *\t\t}\n\t *\t}]\n\t * });\n\t * ```\n\t *\n\t * @name $union\n\t * @summary Main operator to generate an `UNION SELECT` Statement\n\t * @memberOf Select\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param union \t {Array}\t\tSpecifies the all $select objects\n\t */","meta":{"range":[908,1699],"filename":"union.js","lineno":32,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"tags":[{"originalTitle":"after","title":"after","text":"# UNION SELECT Statements\n\nTo create a query using the `UNION` clause you have to use the `$union` operator and define an Array of $select-Objects.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\nvar query = sqlbuilder.build({\n\t$union: [{\n\t\t$select: {\n\t\t\t$from: 'people',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}}, {\n\t\t$select: {\n\t\t\t$from: 'people_history',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}\n\t}]\n});\n```","value":"# UNION SELECT Statements\n\nTo create a query using the `UNION` clause you have to use the `$union` operator and define an Array of $select-Objects.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\nvar query = sqlbuilder.build({\n\t$union: [{\n\t\t$select: {\n\t\t\t$from: 'people',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}}, {\n\t\t$select: {\n\t\t\t$from: 'people_history',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}\n\t}]\n});\n```"},{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"name":"$union","summary":"Main operator to generate an `UNION SELECT` Statement","memberof":"Select","params":[{"type":{"names":["Array"]},"description":"Specifies the all $select objects","name":"union","typeStr":"Array"}],"scope":"static","longname":"Select.$union","kind":"member","___id":"T000010R000010","___s":true,"longnameLower":"select.$union","depths":["Select","$union"],"depth0":"Select","depth1":"$union","after":"# UNION SELECT Statements\n\nTo create a query using the `UNION` clause you have to use the `$union` operator and define an Array of $select-Objects.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\nvar query = sqlbuilder.build({\n\t$union: [{\n\t\t$select: {\n\t\t\t$from: 'people',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}}, {\n\t\t$select: {\n\t\t\t$from: 'people_history',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}\n\t}]\n});\n```","isquerying":true,"ansi":"true","category":"Querying","arguments":"union","gitRelative":"/lib/ansi/union.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/union.js#L32","hashId":"Select-union","_id":"jXsVyrmZ9CLkUBIx"},{"comment":"/**\n\t * @after\n\t *\n\t * # Using `$unionAll`\n\t *\n\t * **Example**\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$unionAll: [\n\t * \t\t{ $select: {\n\t * \t\t\t$from: 'people',\n\t * \t\t\t$columns: ['first_name', 'last_name'],\n\t * \t\t\t$where: { id: 1 }\n\t * \t\t}},\n\t * \t\t{ $select: {\n\t * \t\t\t$from: 'people_history',\n\t * \t\t\t$columns: ['first_name', 'last_name'],\n\t * \t\t\t$where: { id: 1 }\n\t *\t\t}}\n\t *\t]\n\t * });\n\t * ```\n\t * @name $unionAll\n\t * @summary Main operator to generate an `UNION ALL SELECT` Statement\n\t * @memberOf Select\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param unionAll \t {Array}\t\tSpecifies the Array of $select objects\n\t */","meta":{"range":[1853,2489],"filename":"union.js","lineno":70,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"tags":[{"originalTitle":"after","title":"after","text":"# Using `$unionAll`\n\n**Example**\n```javascript\nvar query = sqlbuilder.build({\n\t$unionAll: [\n\t\t{ $select: {\n\t\t\t$from: 'people',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}},\n\t\t{ $select: {\n\t\t\t$from: 'people_history',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}}\n\t]\n});\n```","value":"# Using `$unionAll`\n\n**Example**\n```javascript\nvar query = sqlbuilder.build({\n\t$unionAll: [\n\t\t{ $select: {\n\t\t\t$from: 'people',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}},\n\t\t{ $select: {\n\t\t\t$from: 'people_history',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}}\n\t]\n});\n```"},{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"name":"$unionAll","summary":"Main operator to generate an `UNION ALL SELECT` Statement","memberof":"Select","params":[{"type":{"names":["Array"]},"description":"Specifies the Array of $select objects","name":"unionAll","typeStr":"Array"}],"scope":"static","longname":"Select.$unionAll","kind":"member","___id":"T000010R000011","___s":true,"longnameLower":"select.$unionall","depths":["Select","$unionAll"],"depth0":"Select","depth1":"$unionAll","after":"# Using `$unionAll`\n\n**Example**\n```javascript\nvar query = sqlbuilder.build({\n\t$unionAll: [\n\t\t{ $select: {\n\t\t\t$from: 'people',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}},\n\t\t{ $select: {\n\t\t\t$from: 'people_history',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}}\n\t]\n});\n```","isquerying":true,"ansi":"true","category":"Querying","arguments":"unionAll","gitRelative":"/lib/ansi/union.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/union.js#L70","hashId":"Select-unionAll","_id":"3Pn7EeOmytzA3ICS"},{"comment":"/**\n\t * @after\n\t *\n\t * # Using `$unionAllEx`\n\t *\n\t * **Example**\n\t * ```javascript\n\t * var query = sqlbuilder.build({\n\t * \t$unionAllEx: [{\n\t * \t\t\t$from: 'people',\n\t * \t\t\t$columns: ['first_name', 'last_name'],\n\t * \t\t\t$where: { id: 1 }\n\t * \t\t}, {\n\t * \t\t\t$from: 'people_history',\n\t * \t\t\t$columns: ['first_name', 'last_name'],\n\t * \t\t\t$where: { id: 1 }\n\t * \t\t}\n\t *\t]\n\t * });\n\t * ```\n\t * @name $unionAllEx\n\t * @summary Same as `$unionAll`, but you don't have to specifiy the `$select` operator - only inner part.\n\t * This will help you to reduce the complex of the query-structure.\n\t * @memberOf Select\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param unionAllEx \t {Array}\t\tSpecifies the Array of `$select` operators. **ONLY the inner part of the `$select` operator**\n\t */","meta":{"range":[2653,3421],"filename":"union.js","lineno":104,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"tags":[{"originalTitle":"after","title":"after","text":"# Using `$unionAllEx`\n\n**Example**\n```javascript\nvar query = sqlbuilder.build({\n\t$unionAllEx: [{\n\t\t\t$from: 'people',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}, {\n\t\t\t$from: 'people_history',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}\n\t]\n});\n```","value":"# Using `$unionAllEx`\n\n**Example**\n```javascript\nvar query = sqlbuilder.build({\n\t$unionAllEx: [{\n\t\t\t$from: 'people',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}, {\n\t\t\t$from: 'people_history',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}\n\t]\n});\n```"},{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"name":"$unionAllEx","summary":"Same as `$unionAll`, but you don't have to specifiy the `$select` operator - only inner part.\nThis will help you to reduce the complex of the query-structure.","memberof":"Select","params":[{"type":{"names":["Array"]},"description":"Specifies the Array of `$select` operators. **ONLY the inner part of the `$select` operator**","name":"unionAllEx","typeStr":"Array"}],"scope":"static","longname":"Select.$unionAllEx","kind":"member","___id":"T000010R000012","___s":true,"longnameLower":"select.$unionallex","depths":["Select","$unionAllEx"],"depth0":"Select","depth1":"$unionAllEx","after":"# Using `$unionAllEx`\n\n**Example**\n```javascript\nvar query = sqlbuilder.build({\n\t$unionAllEx: [{\n\t\t\t$from: 'people',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}, {\n\t\t\t$from: 'people_history',\n\t\t\t$columns: ['first_name', 'last_name'],\n\t\t\t$where: { id: 1 }\n\t\t}\n\t]\n});\n```","isquerying":true,"ansi":"true","category":"Querying","arguments":"unionAllEx","gitRelative":"/lib/ansi/union.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/union.js#L104","hashId":"Select-unionAllEx","_id":"ldGyBOp4GWWlSOua"},{"comment":"/**\n\t * @name $where\n\t * @summary Specifies the WHERE clause for the SELECT statement\n\t *\n\t * @memberOf Select\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param where\t {Object}\n\t * Specifies the WHERE clause as Object to use on the select statement\n\t * - where is an **Object** like: `$where: { first_name: 'John', last_name: 'Doe' }`\n\t */","meta":{"range":[4993,5333],"filename":"select.js","lineno":170,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$where","summary":"Specifies the WHERE clause for the SELECT statement","memberof":"Select","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"Specifies the WHERE clause as Object to use on the select statement\n- where is an **Object** like: `$where: { first_name: 'John', last_name: 'Doe' }`","name":"where","typeStr":"Object"}],"scope":"static","longname":"Select.$where","kind":"member","___id":"T000024R000014","___s":true,"longnameLower":"select.$where","depths":["Select","$where"],"depth0":"Select","depth1":"$where","isquerying":true,"ansi":"true","category":"Querying","arguments":"where","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L170","hashId":"Select-where","_id":"uwyz1C8OkanO9lmG"},{"comment":"/**\n\t * @name Sorting\n\t * @summary Specifies the ORDER BY clause for a statement\n\t *\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param sort\t {String | Array | Object}\n\t * Specifies the ORDER BY clause in different variations:\n\t * - sort is a **String** like: `$sort: 'last_name'`\n\t * - sort is an **Array** of Strings like: `$sort: ['last_name', 'first_name']`\n\t * - sort is an **Array** of Objects like: `$sort: [ { last_name: 1 }, { first_name: -1 } ]`\n\t * - sort is an **Array** of Objects like: `$sort: [ { last_name: 'ASC' }, { first_name: 'DESC' } ]`\n\t * - sort is an **Object** like: `$sort: { last_name: 'ASC', first_name: 'DESC' }`\n\t * - sort is an **Object** like: `$sort: { last_name: 1, first_name: -1 }`\n\t * - sort is an **Object** like: `$sort: { last_name: { $asc: true }, first_name: { $desc: true } }`\n\t */","meta":{"range":[6852,7674],"filename":"select.js","lineno":224,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"Sorting","summary":"Specifies the ORDER BY clause for a statement","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String","Array","Object"]},"description":"Specifies the ORDER BY clause in different variations:\n- sort is a **String** like: `$sort: 'last_name'`\n- sort is an **Array** of Strings like: `$sort: ['last_name', 'first_name']`\n- sort is an **Array** of Objects like: `$sort: [ { last_name: 1 }, { first_name: -1 } ]`\n- sort is an **Array** of Objects like: `$sort: [ { last_name: 'ASC' }, { first_name: 'DESC' } ]`\n- sort is an **Object** like: `$sort: { last_name: 'ASC', first_name: 'DESC' }`\n- sort is an **Object** like: `$sort: { last_name: 1, first_name: -1 }`\n- sort is an **Object** like: `$sort: { last_name: { $asc: true }, first_name: { $desc: true } }`","name":"sort","typeStr":"String | Array | Object"}],"longname":"Sorting","kind":"member","scope":"global","___id":"T000024R000020","___s":true,"longnameLower":"sorting","depths":["Sorting"],"depth0":"Sorting","ishelper":true,"ansi":"true","category":"Helpers","arguments":"sort","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L224","hashId":"Sorting","_id":"f3YuqW9L1ZmrIqHw"},{"comment":"/**\n\t * @name $asc\n\t * @summary Specifies the order direction ASC for an identifier used on ORDER BY clause\n\t *\n\t * @memberOf Sorting\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param asc\t {Boolean}\n\t * Specifies the ORDER BY clause in different variations:\n\t * - asc is an **Boolean** like: `$sort: { last_name: { $asc: true }, first_name: { $desc: true } }`\n\t */","meta":{"range":[8339,8702],"filename":"select.js","lineno":261,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$asc","summary":"Specifies the order direction ASC for an identifier used on ORDER BY clause","memberof":"Sorting","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"Specifies the ORDER BY clause in different variations:\n- asc is an **Boolean** like: `$sort: { last_name: { $asc: true }, first_name: { $desc: true } }`","name":"asc","typeStr":"Boolean"}],"scope":"static","longname":"Sorting.$asc","kind":"member","___id":"T000024R000024","___s":true,"longnameLower":"sorting.$asc","depths":["Sorting","$asc"],"depth0":"Sorting","depth1":"$asc","ishelper":true,"ansi":"true","category":"Helpers","arguments":"asc","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L261","hashId":"Sorting-asc","_id":"4j8yql9gSPIclLmj"},{"comment":"/**\n\t * @name $desc\n\t * @summary Specifies the order direction DESC for an identifier used on ORDER BY clause\n\t *\n\t * @memberOf Sorting\n\t * @ishelper true\n\t * @ansi true\n\t *\n\t * @param asc\t {Boolean}\n\t * Specifies the ORDER BY clause in different variations:\n\t * - asc is an **Boolean** like: `$sort: { last_name: { $asc: true }, first_name: { $desc: true } }`\n\t */","meta":{"range":[9017,9382],"filename":"select.js","lineno":286,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$desc","summary":"Specifies the order direction DESC for an identifier used on ORDER BY clause","memberof":"Sorting","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Boolean"]},"description":"Specifies the ORDER BY clause in different variations:\n- asc is an **Boolean** like: `$sort: { last_name: { $asc: true }, first_name: { $desc: true } }`","name":"asc","typeStr":"Boolean"}],"scope":"static","longname":"Sorting.$desc","kind":"member","___id":"T000024R000025","___s":true,"longnameLower":"sorting.$desc","depths":["Sorting","$desc"],"depth0":"Sorting","depth1":"$desc","ishelper":true,"ansi":"true","category":"Helpers","arguments":"asc","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L286","hashId":"Sorting-desc","_id":"iS1OB2pbWFG6eETk"},{"comment":"/**\n\t * @name $orderBy\n\t * @summary Specifies the ORDER BY clause for a statement\n\t *\n\t * This is an alias for the `$sort` operator. See [$sort](#Query-select-sort)\n\t *\n\t * @memberOf Sorting\n\t * @ishelper true\n\t * @ansi true\n\t */","meta":{"range":[7889,8118],"filename":"select.js","lineno":246,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$orderBy","summary":"Specifies the ORDER BY clause for a statement\n\nThis is an alias for the `$sort` operator. See [$sort](#Query-select-sort)","memberof":"Sorting","tags":[{"originalTitle":"ishelper","title":"ishelper","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"scope":"static","longname":"Sorting.$orderBy","kind":"member","___id":"T000024R000022","___s":true,"longnameLower":"sorting.$orderby","depths":["Sorting","$orderBy"],"depth0":"Sorting","depth1":"$orderBy","ishelper":true,"ansi":"true","category":"Helpers","gitRelative":"/lib/ansi/select.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/select.js#L246","hashId":"Sorting-orderBy","_id":"VSk4bxZnlrPLnGwt"},{"comment":"/**\n * @before\n * # Build Queries\n *\n * With the NPM package `json-sql-builder` you can build each query you need to run on your database.\n *\n * <div class=\"sub-title\">\n *      Detailed documentation of all available methods and options\n * </div>\n *\n * @namespace SQLBuilder\n * @summary Main Api to build queries.\n * @hide true\n */","meta":{"range":[352,683],"filename":"sqlbuilder.js","lineno":20,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{}},"tags":[{"originalTitle":"before","title":"before","text":"# Build Queries\n\nWith the NPM package `json-sql-builder` you can build each query you need to run on your database.\n\n<div class=\"sub-title\">\n     Detailed documentation of all available methods and options\n</div>","value":"# Build Queries\n\nWith the NPM package `json-sql-builder` you can build each query you need to run on your database.\n\n<div class=\"sub-title\">\n     Detailed documentation of all available methods and options\n</div>"},{"originalTitle":"hide","title":"hide","text":"true","value":"true"}],"kind":"namespace","name":"SQLBuilder","summary":"Main Api to build queries.","longname":"SQLBuilder","scope":"global","___id":"T000031R000009","___s":true,"longnameLower":"sqlbuilder","depths":["SQLBuilder"],"depth0":"SQLBuilder","before":"# Build Queries\n\nWith the NPM package `json-sql-builder` you can build each query you need to run on your database.\n\n<div class=\"sub-title\">\n     Detailed documentation of all available methods and options\n</div>","hide":"true","category":"Api","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L20","hashId":"SQLBuilder","_id":"MEjPz2euEWk1i5tR"},{"comment":"/**\n\t * @summary Creates a new instance of the SQLBuilder.\n\t *\n\t * @param  {String} language\n\t * Specifies the language. If theres was no parameter provided only the ANSI Standards will be loaded.\n\t * - mysql\n\t * - postgreSQL\n\t *\n\t * @return {SQLBuilder} New instance of the SQLBuilder\n\t */","meta":{"range":[997,1603],"filename":"sqlbuilder.js","lineno":46,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000049","name":"SQLBuilder","type":"MethodDefinition","paramnames":["language"]},"vars":null},"summary":"Creates a new instance of the SQLBuilder.","params":[{"type":{"names":["String"]},"description":"Specifies the language. If theres was no parameter provided only the ANSI Standards will be loaded.\n- mysql\n- postgreSQL","name":"language","typeStr":"String"}],"returns":[{"type":{"names":["SQLBuilder"]},"description":"New instance of the SQLBuilder"}],"name":"SQLBuilder","longname":"SQLBuilder","kind":"class","scope":"global","___id":"T000031R000011","___s":true,"longnameLower":"sqlbuilder","depths":["SQLBuilder"],"depth0":"SQLBuilder","category":"Api","arguments":"language","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L46","hashId":"SQLBuilder","_id":"KFNSsTZgiPthEGdL"},{"comment":"/**\n\t * @summary Adds the given value to the current value stack and returns the language specific placeholder as string.\n\t * @memberof SQLBuilder\n\t *\n\t * @param {Primitive} val Specifies the value to add.\n\t */","meta":{"range":[7721,7793],"filename":"sqlbuilder.js","lineno":236,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000650","name":"SQLBuilder#addValue","type":"MethodDefinition","paramnames":["val"]},"vars":null},"summary":"Adds the given value to the current value stack and returns the language specific placeholder as string.","memberof":"SQLBuilder","params":[{"type":{"names":["Primitive"]},"description":"Specifies the value to add.","name":"val","typeStr":"Primitive"}],"name":"addValue","longname":"SQLBuilder#addValue","kind":"function","scope":"instance","___id":"T000031R000042","___s":true,"longnameLower":"sqlbuilder#addvalue","depths":["SQLBuilder","addValue"],"depth0":"SQLBuilder","depth1":"addValue","category":"Api","arguments":"val","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L236","hashId":"SQLBuilder-addValue","_id":"jKUX2AGX5fCYu3U2"},{"comment":"/**\n\t * @summary Builds the given query and returns an new SQLQuery object.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {Object} query\t\t\tSpecifies the JSON query-object.\n\t * @param  {String} [identifier]\t**Optional.** Specifies the identifier detected before.\n\t * @param  {String} [syntax]\t\t**Optional.** Specifies the Syntax that the SQLBuilder has to use for this query.\n\t * @param  {String} [stripMostOuterParentheses]\t\t**Optional.** Specifies whether the most outer parentheses should be stripped before final return or not. Default is **true**\n\t * @return {SQLQuery}\n\t */","meta":{"range":[2337,5440],"filename":"sqlbuilder.js","lineno":89,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000158","name":"SQLBuilder#build","type":"MethodDefinition","paramnames":["query","identifier","syntax","stripMostOuterParentheses"]},"vars":null},"summary":"Builds the given query and returns an new SQLQuery object.","memberof":"SQLBuilder","params":[{"type":{"names":["Object"]},"description":"Specifies the JSON query-object.","name":"query","typeStr":"Object"},{"type":{"names":["String"]},"optional":true,"description":"**Optional.** Specifies the identifier detected before.","name":"identifier","typeStr":"String"},{"type":{"names":["String"]},"optional":true,"description":"**Optional.** Specifies the Syntax that the SQLBuilder has to use for this query.","name":"syntax","typeStr":"String"},{"type":{"names":["String"]},"optional":true,"description":"**Optional.** Specifies whether the most outer parentheses should be stripped before final return or not. Default is **true**","name":"stripMostOuterParentheses","typeStr":"String"}],"returns":[{"type":{"names":["SQLQuery"]}}],"name":"build","longname":"SQLBuilder#build","kind":"function","scope":"instance","___id":"T000031R000024","___s":true,"longnameLower":"sqlbuilder#build","depths":["SQLBuilder","build"],"depth0":"SQLBuilder","depth1":"build","category":"Api","arguments":"query, [identifier], [syntax], [stripMostOuterParentheses]","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L89","hashId":"SQLBuilder-build","_id":"j7EViTN6kbxelwP0"},{"comment":"/**\n\t * @summary Calls the given Helper by name. The Helper will be executed in the context of the current SQLBuilder instance.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} name       Specifies the name of the Helper / Operator.\n\t * @param  {Object} query      Specifies the query-object that should be translated to sql by the specified Helper.\n\t * @param  {Object} [outerQuery] Optional. Specifies the outer object from the given query.\n\t * @param  {String} [identifier] Optional. Specifies the current available identifier.\n\t *\n\t * @return {String} Returns the translated SQL code from the given query.\n\t */","meta":{"range":[8413,8621],"filename":"sqlbuilder.js","lineno":252,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000668","name":"SQLBuilder#callHelper","type":"MethodDefinition","paramnames":["name","query","outerQuery","identifier"]},"vars":null},"summary":"Calls the given Helper by name. The Helper will be executed in the context of the current SQLBuilder instance.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of the Helper / Operator.","name":"name","typeStr":"String"},{"type":{"names":["Object"]},"description":"Specifies the query-object that should be translated to sql by the specified Helper.","name":"query","typeStr":"Object"},{"type":{"names":["Object"]},"optional":true,"description":"Optional. Specifies the outer object from the given query.","name":"outerQuery","typeStr":"Object"},{"type":{"names":["String"]},"optional":true,"description":"Optional. Specifies the current available identifier.","name":"identifier","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"Returns the translated SQL code from the given query."}],"name":"callHelper","longname":"SQLBuilder#callHelper","kind":"function","scope":"instance","___id":"T000031R000043","___s":true,"longnameLower":"sqlbuilder#callhelper","depths":["SQLBuilder","callHelper"],"depth0":"SQLBuilder","depth1":"callHelper","category":"Api","arguments":"name, query, [outerQuery], [identifier]","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L252","hashId":"SQLBuilder-callHelper","_id":"0okp1IhUw2DN9wVY"},{"comment":"/**\n\t * @summary Returns the given, existing Syntax. If the Syntax does not exists an error will be thrown.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} name       Specifies the name of the Syntax.\n\t *\n\t * @return {String} Available Syntax-Definition\n\t */","meta":{"range":[13120,13331],"filename":"sqlbuilder.js","lineno":380,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000805","name":"SQLBuilder#getSyntax","type":"MethodDefinition","paramnames":["name"]},"vars":null},"summary":"Returns the given, existing Syntax. If the Syntax does not exists an error will be thrown.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of the Syntax.","name":"name","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"Available Syntax-Definition"}],"name":"getSyntax","longname":"SQLBuilder#getSyntax","kind":"function","scope":"instance","___id":"T000031R000052","___s":true,"longnameLower":"sqlbuilder#getsyntax","depths":["SQLBuilder","getSyntax"],"depth0":"SQLBuilder","depth1":"getSyntax","category":"Api","arguments":"name","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L380","hashId":"SQLBuilder-getSyntax","_id":"69qjYe9kuvwpBkuJ"},{"comment":"/**\n\t * @summary Checks if the given Helper or Operator is on the current Path. If is currently in use the function returns true, otherwise false.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} name Specifies the name of Heper or Operator\n\t * @return {Boolean}\n\t */","meta":{"range":[8894,9054],"filename":"sqlbuilder.js","lineno":266,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000710","name":"SQLBuilder#isCurrent","type":"MethodDefinition","paramnames":["name"]},"vars":null},"summary":"Checks if the given Helper or Operator is on the current Path. If is currently in use the function returns true, otherwise false.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of Heper or Operator","name":"name","typeStr":"String"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isCurrent","longname":"SQLBuilder#isCurrent","kind":"function","scope":"instance","___id":"T000031R000045","___s":true,"longnameLower":"sqlbuilder#iscurrent","depths":["SQLBuilder","isCurrent"],"depth0":"SQLBuilder","depth1":"isCurrent","category":"Api","arguments":"name","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L266","hashId":"SQLBuilder-isCurrent","_id":"tdBp1pwTQLvpkz9X"},{"comment":"/**\n\t * @summary Specifies the placeholder function for the ANSI SQL Standard. This function can be overwrite from any SQL dialect loaded on instancing the builder.\n\t * @memberof SQLBuilder\n\t *\n\t * @return {String} placeholder\n\t */","meta":{"range":[7475,7506],"filename":"sqlbuilder.js","lineno":226,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000644","name":"SQLBuilder#placeholder","type":"MethodDefinition","paramnames":[]},"vars":null},"summary":"Specifies the placeholder function for the ANSI SQL Standard. This function can be overwrite from any SQL dialect loaded on instancing the builder.","memberof":"SQLBuilder","returns":[{"type":{"names":["String"]},"description":"placeholder"}],"name":"placeholder","longname":"SQLBuilder#placeholder","kind":"function","scope":"instance","params":[],"___id":"T000031R000041","___s":true,"longnameLower":"sqlbuilder#placeholder","depths":["SQLBuilder","placeholder"],"depth0":"SQLBuilder","depth1":"placeholder","category":"Api","arguments":"","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L226","hashId":"SQLBuilder-placeholder","_id":"3OhCe9TuvsbszwiC"},{"comment":"/**\n\t * @summary Quotes the given identifier with the quote-character defined for the specific SQL language dialect.\n\t * @memberof SQLBuilder\n\t *\n\t * @after\n\t * # Quote Identifiers\n\t *\n\t * If you are creating your own helpers and operators you have to quote the generated identifiers.\n\t * For this you can use the standard method that will do the job for you.\n\t *\n\t * If you are passing only one identifier to the method you will receive the the identifier as quoted string.\n\t * On passing two identifiers you will receive the quoted identifiers joined with a dot '.' like `table.column`.\n\t *\n\t * In exception to this a column-identifier with the value ` * ` or `ALL` will returned as unquoted string.\n\t * Also all variable identifiers that starts with ` @ ` will be leave unquoted.\n\t *\n\t * @param  {String} column\tSpecifies the main identifier to quote. Normally it will be a column or an alias name.\n\t * @param  {String} [table]\tOptional. Specifies the table-identifier.\n\t *\n\t * @return {String} Quoted identifier like `table`.`column`\n\t */","meta":{"range":[6487,7239],"filename":"sqlbuilder.js","lineno":201,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000555","name":"SQLBuilder#quote","type":"MethodDefinition","paramnames":["column","table"]},"vars":null},"summary":"Quotes the given identifier with the quote-character defined for the specific SQL language dialect.","memberof":"SQLBuilder","tags":[{"originalTitle":"after","title":"after","text":"# Quote Identifiers\n\nIf you are creating your own helpers and operators you have to quote the generated identifiers.\nFor this you can use the standard method that will do the job for you.\n\nIf you are passing only one identifier to the method you will receive the the identifier as quoted string.\nOn passing two identifiers you will receive the quoted identifiers joined with a dot '.' like `table.column`.\n\nIn exception to this a column-identifier with the value ` * ` or `ALL` will returned as unquoted string.\nAlso all variable identifiers that starts with ` @ ` will be leave unquoted.","value":"# Quote Identifiers\n\nIf you are creating your own helpers and operators you have to quote the generated identifiers.\nFor this you can use the standard method that will do the job for you.\n\nIf you are passing only one identifier to the method you will receive the the identifier as quoted string.\nOn passing two identifiers you will receive the quoted identifiers joined with a dot '.' like `table.column`.\n\nIn exception to this a column-identifier with the value ` * ` or `ALL` will returned as unquoted string.\nAlso all variable identifiers that starts with ` @ ` will be leave unquoted."}],"params":[{"type":{"names":["String"]},"description":"Specifies the main identifier to quote. Normally it will be a column or an alias name.","name":"column","typeStr":"String"},{"type":{"names":["String"]},"optional":true,"description":"Optional. Specifies the table-identifier.","name":"table","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"Quoted identifier like `table`.`column`"}],"name":"quote","longname":"SQLBuilder#quote","kind":"function","scope":"instance","___id":"T000031R000039","___s":true,"longnameLower":"sqlbuilder#quote","depths":["SQLBuilder","quote"],"depth0":"SQLBuilder","depth1":"quote","after":"# Quote Identifiers\n\nIf you are creating your own helpers and operators you have to quote the generated identifiers.\nFor this you can use the standard method that will do the job for you.\n\nIf you are passing only one identifier to the method you will receive the the identifier as quoted string.\nOn passing two identifiers you will receive the quoted identifiers joined with a dot '.' like `table.column`.\n\nIn exception to this a column-identifier with the value ` * ` or `ALL` will returned as unquoted string.\nAlso all variable identifiers that starts with ` @ ` will be leave unquoted.","category":"Api","arguments":"column, [table]","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L201","hashId":"SQLBuilder-quote","_id":"hXcQrVOpCq0pt5mW"},{"comment":"/**\n\t * @after\n\t *\n\t * # Create a new Helper\n\t *\n\t * If you like to extend any language you have to register a new Helper.\n\t *\n\t * **Example**\n\t *\n\t * The Example shows the declaration of a new Helper for the `SELECT... INTO` clause by using the MySQL language dialect.\n\t *\n\t * ```javascript\n// create a new Helper for the MySQL   INTO clause\nsqlBuilder.registerHelper('$into', function(query, outerQuery, identifier){\n\tvar result = '',\n\t\tresults = [];\n\n\t// check the type of the query\n\tif (_.isArray(query)){\n\t\t// Array like example\n\t\t// $into: ['@firstname', '@lastname']\n\t\t_.forEach(query, (column) => {\n\t\t\t// check the type of the column definition, they must all of type String\n\t\t\tif (_.isString(column)){\n\t\t\t\tresults.push(this.quote(column));\n\t\t\t} else {\n\t\t\t\tthrow new Error('The items of the $into array must be type of string.');\n\t\t\t}\n\t\t});\n\n\t\tresult = (results.length > 0 ? 'INTO ' + results.join(', ') : '');\n\t} else if (_.isPlainObject(query)) {\n\t\t// the query is an object like:\n\t\t// $into: {\n\t\t// \t\t$outfile: { $file: '/tmp/people.csv', $terminatedBy: ';' }\n\t\t// }\n\t\t// lets call the build-method, that will do the job!\n\t\t// --> the build-method will call the $outfile helper-function, $file-helper and $terminatedBy-helper\n\t\tresult = 'INTO ' + this.build(query, null, this.getSyntax('$into'));\n\t} else {\n\t\tthrow new Error('$columns must be either array of strings or objects.');\n\t}\n\n\treturn result;\n\n}, 'INTO [$outfile] [$dumpfile]'); // this is our Syntax\n\t *\n\t * ```\n\t * > **Info**\n\t * >\n\t * > After registering the helper don't forget to update the corresponding Syntax and add the new helper.\n\t * >\n\t * > See [SQLBuilder#updateSyntax](#SQLBuilder-updateSyntax)\n\t *\n\t * @summary Registers a new helper, operator for the SQLBuilder.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} \tname\t\tSpecifies the name of the Syntax.\n\t * @param  {Function} \tcallback\tSpecifies the callback-function, which is called each time the SQLBuilder detects the helper inside the query.\n\t * @param  {String} \t[syntax]\t**Optional**. Specifies the Syntax for this query helper. If a Syntax is provided it will be registered with the same name as the helper itself.\n\t */","meta":{"range":[15500,16201],"filename":"sqlbuilder.js","lineno":449,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000832","name":"SQLBuilder#registerHelper","type":"MethodDefinition","paramnames":["name","callback","syntax"]},"vars":null},"tags":[{"originalTitle":"after","title":"after","text":"# Create a new Helper\n\nIf you like to extend any language you have to register a new Helper.\n\n**Example**\n\nThe Example shows the declaration of a new Helper for the `SELECT... INTO` clause by using the MySQL language dialect.\n\n```javascript\n// create a new Helper for the MySQL   INTO clause\nsqlBuilder.registerHelper('$into', function(query, outerQuery, identifier){\n\tvar result = '',\n\t\tresults = [];\n\n\t// check the type of the query\n\tif (_.isArray(query)){\n\t\t// Array like example\n\t\t// $into: ['@firstname', '@lastname']\n\t\t_.forEach(query, (column) => {\n\t\t\t// check the type of the column definition, they must all of type String\n\t\t\tif (_.isString(column)){\n\t\t\t\tresults.push(this.quote(column));\n\t\t\t} else {\n\t\t\t\tthrow new Error('The items of the $into array must be type of string.');\n\t\t\t}\n\t\t});\n\n\t\tresult = (results.length > 0 ? 'INTO ' + results.join(', ') : '');\n\t} else if (_.isPlainObject(query)) {\n\t\t// the query is an object like:\n\t\t// $into: {\n\t\t// \t\t$outfile: { $file: '/tmp/people.csv', $terminatedBy: ';' }\n\t\t// }\n\t\t// lets call the build-method, that will do the job!\n\t\t// --> the build-method will call the $outfile helper-function, $file-helper and $terminatedBy-helper\n\t\tresult = 'INTO ' + this.build(query, null, this.getSyntax('$into'));\n\t} else {\n\t\tthrow new Error('$columns must be either array of strings or objects.');\n\t}\n\n\treturn result;\n\n}, 'INTO [$outfile] [$dumpfile]'); // this is our Syntax\n\n```\n> **Info**\n>\n> After registering the helper don't forget to update the corresponding Syntax and add the new helper.\n>\n> See [SQLBuilder#updateSyntax](#SQLBuilder-updateSyntax)","value":"# Create a new Helper\n\nIf you like to extend any language you have to register a new Helper.\n\n**Example**\n\nThe Example shows the declaration of a new Helper for the `SELECT... INTO` clause by using the MySQL language dialect.\n\n```javascript\n// create a new Helper for the MySQL   INTO clause\nsqlBuilder.registerHelper('$into', function(query, outerQuery, identifier){\n\tvar result = '',\n\t\tresults = [];\n\n\t// check the type of the query\n\tif (_.isArray(query)){\n\t\t// Array like example\n\t\t// $into: ['@firstname', '@lastname']\n\t\t_.forEach(query, (column) => {\n\t\t\t// check the type of the column definition, they must all of type String\n\t\t\tif (_.isString(column)){\n\t\t\t\tresults.push(this.quote(column));\n\t\t\t} else {\n\t\t\t\tthrow new Error('The items of the $into array must be type of string.');\n\t\t\t}\n\t\t});\n\n\t\tresult = (results.length > 0 ? 'INTO ' + results.join(', ') : '');\n\t} else if (_.isPlainObject(query)) {\n\t\t// the query is an object like:\n\t\t// $into: {\n\t\t// \t\t$outfile: { $file: '/tmp/people.csv', $terminatedBy: ';' }\n\t\t// }\n\t\t// lets call the build-method, that will do the job!\n\t\t// --> the build-method will call the $outfile helper-function, $file-helper and $terminatedBy-helper\n\t\tresult = 'INTO ' + this.build(query, null, this.getSyntax('$into'));\n\t} else {\n\t\tthrow new Error('$columns must be either array of strings or objects.');\n\t}\n\n\treturn result;\n\n}, 'INTO [$outfile] [$dumpfile]'); // this is our Syntax\n\n```\n> **Info**\n>\n> After registering the helper don't forget to update the corresponding Syntax and add the new helper.\n>\n> See [SQLBuilder#updateSyntax](#SQLBuilder-updateSyntax)"}],"summary":"Registers a new helper, operator for the SQLBuilder.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of the Syntax.","name":"name","typeStr":"String"},{"type":{"names":["function"]},"description":"Specifies the callback-function, which is called each time the SQLBuilder detects the helper inside the query.","name":"callback","typeStr":"function"},{"type":{"names":["String"]},"optional":true,"description":"**Optional**. Specifies the Syntax for this query helper. If a Syntax is provided it will be registered with the same name as the helper itself.","name":"syntax","typeStr":"String"}],"name":"registerHelper","longname":"SQLBuilder#registerHelper","kind":"function","scope":"instance","___id":"T000031R000053","___s":true,"longnameLower":"sqlbuilder#registerhelper","depths":["SQLBuilder","registerHelper"],"depth0":"SQLBuilder","depth1":"registerHelper","after":"# Create a new Helper\n\nIf you like to extend any language you have to register a new Helper.\n\n**Example**\n\nThe Example shows the declaration of a new Helper for the `SELECT... INTO` clause by using the MySQL language dialect.\n\n```javascript\n// create a new Helper for the MySQL   INTO clause\nsqlBuilder.registerHelper('$into', function(query, outerQuery, identifier){\n\tvar result = '',\n\t\tresults = [];\n\n\t// check the type of the query\n\tif (_.isArray(query)){\n\t\t// Array like example\n\t\t// $into: ['@firstname', '@lastname']\n\t\t_.forEach(query, (column) => {\n\t\t\t// check the type of the column definition, they must all of type String\n\t\t\tif (_.isString(column)){\n\t\t\t\tresults.push(this.quote(column));\n\t\t\t} else {\n\t\t\t\tthrow new Error('The items of the $into array must be type of string.');\n\t\t\t}\n\t\t});\n\n\t\tresult = (results.length > 0 ? 'INTO ' + results.join(', ') : '');\n\t} else if (_.isPlainObject(query)) {\n\t\t// the query is an object like:\n\t\t// $into: {\n\t\t// \t\t$outfile: { $file: '/tmp/people.csv', $terminatedBy: ';' }\n\t\t// }\n\t\t// lets call the build-method, that will do the job!\n\t\t// --> the build-method will call the $outfile helper-function, $file-helper and $terminatedBy-helper\n\t\tresult = 'INTO ' + this.build(query, null, this.getSyntax('$into'));\n\t} else {\n\t\tthrow new Error('$columns must be either array of strings or objects.');\n\t}\n\n\treturn result;\n\n}, 'INTO [$outfile] [$dumpfile]'); // this is our Syntax\n\n```\n> **Info**\n>\n> After registering the helper don't forget to update the corresponding Syntax and add the new helper.\n>\n> See [SQLBuilder#updateSyntax](#SQLBuilder-updateSyntax)","category":"Api","arguments":"name, callback, [syntax]","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L449","hashId":"SQLBuilder-registerHelper","_id":"IxrXEclUHd5f8tuL"},{"comment":"/**\n\t * @after\n\t *\n\t * # Register a new Syntax\n\t *\n\t * If you are creating a new Helper, Operator for the SQLBuilder you may need a Syntax for the build-method.\n\t *\n\t * By using a pre-defined Syntax you achive that the build method will output the\n\t * expected SQL code and detect optional and required helper/operators. On top of this the order of the\n\t * object properties inside the query does not matter.\n\t *\n\t * ## Required helpers/operators\n\t * To define a helper, operator as required you have to use pointed brackets ` < ... > `.\n\t *\n\t * ## Optional helpers/operators\n\t * To define an optional helper, operator you have to use square brackets ` [ ... ] `.\n\t *\n\t * **Example `$select` - Syntax**\n\t * ```javascript\n\t * // ANSI-SELECT Statement Syntax\n\t * sqlBuilder.registerSyntax('$select', `SELECT [$distinct] [$all]\n\t * \t\t\t\t\t\t\t\t\t\t\t  <$columns>\n\t * \t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t * \t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n \t * \t\t\t\t\t\t\t\t\t\t\t}\n\t * \t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }`);\n\t *\n\t * ```\n\t * > **Remarks**\n\t *\n\t * > At this time only the optional and required helpers will be detected. Everything around this will be ignored.\n\t * >\n\t * > In a future version we will use the whole syntactical meanings including the key-words the curly brackets an so on.\n\t * > So If you create a new Syntax please provide a Syntax with all the stuff seen above.\n\t *\n\t * @summary Register a new Syntax to use later on the build process.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} name       Specifies the name of the Syntax.\n\t * @param  {String} syntax     Specifies the Syntax. See the example below.\n\t */","meta":{"range":[10756,11012],"filename":"sqlbuilder.js","lineno":318,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000746","name":"SQLBuilder#registerSyntax","type":"MethodDefinition","paramnames":["name","syntax"]},"vars":null},"tags":[{"originalTitle":"after","title":"after","text":"# Register a new Syntax\n\nIf you are creating a new Helper, Operator for the SQLBuilder you may need a Syntax for the build-method.\n\nBy using a pre-defined Syntax you achive that the build method will output the\nexpected SQL code and detect optional and required helper/operators. On top of this the order of the\nobject properties inside the query does not matter.\n\n## Required helpers/operators\nTo define a helper, operator as required you have to use pointed brackets ` < ... > `.\n\n## Optional helpers/operators\nTo define an optional helper, operator you have to use square brackets ` [ ... ] `.\n\n**Example `$select` - Syntax**\n```javascript\n// ANSI-SELECT Statement Syntax\nsqlBuilder.registerSyntax('$select', `SELECT [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t  <$columns>\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }`);\n\n```\n> **Remarks**\n\n> At this time only the optional and required helpers will be detected. Everything around this will be ignored.\n>\n> In a future version we will use the whole syntactical meanings including the key-words the curly brackets an so on.\n> So If you create a new Syntax please provide a Syntax with all the stuff seen above.","value":"# Register a new Syntax\n\nIf you are creating a new Helper, Operator for the SQLBuilder you may need a Syntax for the build-method.\n\nBy using a pre-defined Syntax you achive that the build method will output the\nexpected SQL code and detect optional and required helper/operators. On top of this the order of the\nobject properties inside the query does not matter.\n\n## Required helpers/operators\nTo define a helper, operator as required you have to use pointed brackets ` < ... > `.\n\n## Optional helpers/operators\nTo define an optional helper, operator you have to use square brackets ` [ ... ] `.\n\n**Example `$select` - Syntax**\n```javascript\n// ANSI-SELECT Statement Syntax\nsqlBuilder.registerSyntax('$select', `SELECT [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t  <$columns>\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }`);\n\n```\n> **Remarks**\n\n> At this time only the optional and required helpers will be detected. Everything around this will be ignored.\n>\n> In a future version we will use the whole syntactical meanings including the key-words the curly brackets an so on.\n> So If you create a new Syntax please provide a Syntax with all the stuff seen above."}],"summary":"Register a new Syntax to use later on the build process.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of the Syntax.","name":"name","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the Syntax. See the example below.","name":"syntax","typeStr":"String"}],"name":"registerSyntax","longname":"SQLBuilder#registerSyntax","kind":"function","scope":"instance","___id":"T000031R000048","___s":true,"longnameLower":"sqlbuilder#registersyntax","depths":["SQLBuilder","registerSyntax"],"depth0":"SQLBuilder","depth1":"registerSyntax","after":"# Register a new Syntax\n\nIf you are creating a new Helper, Operator for the SQLBuilder you may need a Syntax for the build-method.\n\nBy using a pre-defined Syntax you achive that the build method will output the\nexpected SQL code and detect optional and required helper/operators. On top of this the order of the\nobject properties inside the query does not matter.\n\n## Required helpers/operators\nTo define a helper, operator as required you have to use pointed brackets ` < ... > `.\n\n## Optional helpers/operators\nTo define an optional helper, operator you have to use square brackets ` [ ... ] `.\n\n**Example `$select` - Syntax**\n```javascript\n// ANSI-SELECT Statement Syntax\nsqlBuilder.registerSyntax('$select', `SELECT [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t  <$columns>\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }`);\n\n```\n> **Remarks**\n\n> At this time only the optional and required helpers will be detected. Everything around this will be ignored.\n>\n> In a future version we will use the whole syntactical meanings including the key-words the curly brackets an so on.\n> So If you create a new Syntax please provide a Syntax with all the stuff seen above.","category":"Api","arguments":"name, syntax","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L318","hashId":"SQLBuilder-registerSyntax","_id":"8YmQ4sOTRX6Ttj9R"},{"comment":"/**\n\t * @after\n\t *\n\t * # Update an existing Syntax\n\t *\n\t * If you extend an existing Helper - maybe the ` $select ` helper you have to update the existing Syntax.\n\t * On the same way this module archives the different language dialects.\n\t *\n\t * **Example**\n\t *\n\t * The Example shows the update of the ANSI Select helper Syntax with the new one supported by the MySQL Select-Helper.\n\t *\n\t * ```javascript\n\t * // overwrite the SYNTAX for the ANSI SELECT Statement\n\t * sqlBuilder.updateSyntax('$select', `SELECT [$calcFoundRows] [$distinct] [$all]\n\t * \t\t\t\t\t\t\t\t\t\t\t{ <$columns> [$into] }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t * \t\t\t\t\t\t\t\t\t\t\t\t{ WITH ROLLUP [$rollup] }\n\t * \t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n \t * \t\t\t\t\t\t\t\t\t\t\t}\n\t * \t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ LIMIT [$limit] { OFFSET [$offset] } }`);\n\t *\n\t * ```\n\t * As you can see to the example of the `registerSyntax` the MySQL Select - Syntax extends the ANSI Syntax with the following helpers/operators:\n\t * - **[$calcFoundRows]** Helper for `SQL_CALC_FOUND_ROWS`\n\t * - **[$into]** Helper for `SELECT ... INTO OUTFILE` or `SELECT ... INTO DUMPFILE`\n\t * - **[$rollup]** Helper for `WITH ROLLUP` option after the `GROUP BY` clause\n\t * - **[$limit]** and **[$offset]** Helper\n\t *\n\t * @summary Updates an existing Syntax to use later on the build process.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} name\t\tSpecifies the name of the Syntax.\n\t * @param  {String} newSyntax\tSpecifies the Syntax. See the example below.\n\t */","meta":{"range":[12598,12855],"filename":"sqlbuilder.js","lineno":364,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000775","name":"SQLBuilder#updateSyntax","type":"MethodDefinition","paramnames":["name","newSyntax"]},"vars":null},"tags":[{"originalTitle":"after","title":"after","text":"# Update an existing Syntax\n\nIf you extend an existing Helper - maybe the ` $select ` helper you have to update the existing Syntax.\nOn the same way this module archives the different language dialects.\n\n**Example**\n\nThe Example shows the update of the ANSI Select helper Syntax with the new one supported by the MySQL Select-Helper.\n\n```javascript\n// overwrite the SYNTAX for the ANSI SELECT Statement\nsqlBuilder.updateSyntax('$select', `SELECT [$calcFoundRows] [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t{ <$columns> [$into] }\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ WITH ROLLUP [$rollup] }\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t\t\t\t\t\t\t\t\t\t\t{ LIMIT [$limit] { OFFSET [$offset] } }`);\n\n```\nAs you can see to the example of the `registerSyntax` the MySQL Select - Syntax extends the ANSI Syntax with the following helpers/operators:\n- **[$calcFoundRows]** Helper for `SQL_CALC_FOUND_ROWS`\n- **[$into]** Helper for `SELECT ... INTO OUTFILE` or `SELECT ... INTO DUMPFILE`\n- **[$rollup]** Helper for `WITH ROLLUP` option after the `GROUP BY` clause\n- **[$limit]** and **[$offset]** Helper","value":"# Update an existing Syntax\n\nIf you extend an existing Helper - maybe the ` $select ` helper you have to update the existing Syntax.\nOn the same way this module archives the different language dialects.\n\n**Example**\n\nThe Example shows the update of the ANSI Select helper Syntax with the new one supported by the MySQL Select-Helper.\n\n```javascript\n// overwrite the SYNTAX for the ANSI SELECT Statement\nsqlBuilder.updateSyntax('$select', `SELECT [$calcFoundRows] [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t{ <$columns> [$into] }\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ WITH ROLLUP [$rollup] }\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t\t\t\t\t\t\t\t\t\t\t{ LIMIT [$limit] { OFFSET [$offset] } }`);\n\n```\nAs you can see to the example of the `registerSyntax` the MySQL Select - Syntax extends the ANSI Syntax with the following helpers/operators:\n- **[$calcFoundRows]** Helper for `SQL_CALC_FOUND_ROWS`\n- **[$into]** Helper for `SELECT ... INTO OUTFILE` or `SELECT ... INTO DUMPFILE`\n- **[$rollup]** Helper for `WITH ROLLUP` option after the `GROUP BY` clause\n- **[$limit]** and **[$offset]** Helper"}],"summary":"Updates an existing Syntax to use later on the build process.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of the Syntax.","name":"name","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the Syntax. See the example below.","name":"newSyntax","typeStr":"String"}],"name":"updateSyntax","longname":"SQLBuilder#updateSyntax","kind":"function","scope":"instance","___id":"T000031R000050","___s":true,"longnameLower":"sqlbuilder#updatesyntax","depths":["SQLBuilder","updateSyntax"],"depth0":"SQLBuilder","depth1":"updateSyntax","after":"# Update an existing Syntax\n\nIf you extend an existing Helper - maybe the ` $select ` helper you have to update the existing Syntax.\nOn the same way this module archives the different language dialects.\n\n**Example**\n\nThe Example shows the update of the ANSI Select helper Syntax with the new one supported by the MySQL Select-Helper.\n\n```javascript\n// overwrite the SYNTAX for the ANSI SELECT Statement\nsqlBuilder.updateSyntax('$select', `SELECT [$calcFoundRows] [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t{ <$columns> [$into] }\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ WITH ROLLUP [$rollup] }\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t\t\t\t\t\t\t\t\t\t\t{ LIMIT [$limit] { OFFSET [$offset] } }`);\n\n```\nAs you can see to the example of the `registerSyntax` the MySQL Select - Syntax extends the ANSI Syntax with the following helpers/operators:\n- **[$calcFoundRows]** Helper for `SQL_CALC_FOUND_ROWS`\n- **[$into]** Helper for `SELECT ... INTO OUTFILE` or `SELECT ... INTO DUMPFILE`\n- **[$rollup]** Helper for `WITH ROLLUP` option after the `GROUP BY` clause\n- **[$limit]** and **[$offset]** Helper","category":"Api","arguments":"name, newSyntax","gitRelative":"/lib/sqlbuilder.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L364","hashId":"SQLBuilder-updateSyntax","_id":"16iw2Ha5KYEHfcbm"},{"comment":"/**\n\t * @name $concat\n\t * @memberOf String\n\t * @isfunction\n\t * @mysql true\n\t *\n\t * @summary Specifies the `CONCAT()` function.\n\t *\n\t * @param {Array} params  \t\tSpecifies the function parameters.\n\t */","meta":{"range":[812,1011],"filename":"functions.js","lineno":30,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$concat","memberof":"String","tags":[{"originalTitle":"isfunction","title":"isfunction","text":""},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"summary":"Specifies the `CONCAT()` function.","params":[{"type":{"names":["Array"]},"description":"Specifies the function parameters.","name":"params","typeStr":"Array"}],"scope":"static","longname":"String.$concat","kind":"member","___id":"T000021R000005","___s":true,"longnameLower":"string.$concat","depths":["String","$concat"],"depth0":"String","depth1":"$concat","isfunction":true,"mysql":"true","category":"Functions","arguments":"params","gitRelative":"/lib/ansi/operators/functions.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/functions.js#L30","hashId":"String-concat","_id":"pneuKa7g6Or0tJnB"},{"comment":"/**\n\t * @name $left\n\t * @memberOf String\n\t * @isfunction\n\t * @mysql true\n\t *\n\t * @summary Specifies the `LEFT()` function.\n\t *\n\t * @param {Property} identifier\tSpecifies original column, table, ... name.\n\t * @param {String} alias  \t\tSpecifies alias name.\n\t */","meta":{"range":[86,345],"filename":"functions.js","lineno":7,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$left","memberof":"String","tags":[{"originalTitle":"isfunction","title":"isfunction","text":""},{"originalTitle":"mysql","title":"mysql","text":"true","value":"true"}],"summary":"Specifies the `LEFT()` function.","params":[{"type":{"names":["Property"]},"description":"Specifies original column, table, ... name.","name":"identifier","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies alias name.","name":"alias","typeStr":"String"}],"scope":"static","longname":"String.$left","kind":"member","___id":"T000021R000004","___s":true,"longnameLower":"string.$left","depths":["String","$left"],"depth0":"String","depth1":"$left","isfunction":true,"mysql":"true","category":"Functions","arguments":"identifier, alias","gitRelative":"/lib/ansi/operators/functions.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/functions.js#L7","hashId":"String-left","_id":"OMo4qKD7ej7RwUBw"},{"comment":"/**\n\t * @before\n\t *\n\t * # UPDATE Statements\n\t *\n\t * To query the database and update existing records you have to use the `$update` operator.\n\t * Check the Syntax and Examples.\n\t *\n\t * **Example**\n\t * ```javascript\n\t * $update: {\n\t * \t$table: 'people',\n\t * \t$set: {\n\t * \t\tfirst_name: 'John',\n\t * \t\tlast_name: 'Doe',\n\t * \t},\n\t * \t$where: { age: { $gte: 18 } }\n\t * }\n\t * ```\n\t *\n\t * @name Update\n\t * @summary Main operator to generate an `UPDATE` Statement\n\t *\n\t * **Syntax**\n\t * ```syntax\n\t * UPDATE <$table>\n\t * \t{ SET <$set> }\n\t * \t{ WHERE [$where] }\n\t * \t{ ORDER BY [$sort] | [$orderBy] }\n\t * ```\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param query \t {Object}\t\tSpecifies the details for the $insert\n\t */","meta":{"range":[261,971],"filename":"update.js","lineno":14,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"tags":[{"originalTitle":"before","title":"before","text":"# UPDATE Statements\n\nTo query the database and update existing records you have to use the `$update` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$update: {\n\t$table: 'people',\n\t$set: {\n\t\tfirst_name: 'John',\n\t\tlast_name: 'Doe',\n\t},\n\t$where: { age: { $gte: 18 } }\n}\n```","value":"# UPDATE Statements\n\nTo query the database and update existing records you have to use the `$update` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$update: {\n\t$table: 'people',\n\t$set: {\n\t\tfirst_name: 'John',\n\t\tlast_name: 'Doe',\n\t},\n\t$where: { age: { $gte: 18 } }\n}\n```"},{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"name":"Update","summary":"Main operator to generate an `UPDATE` Statement\n\n**Syntax**\n```syntax\nUPDATE <$table>\n\t{ SET <$set> }\n\t{ WHERE [$where] }\n\t{ ORDER BY [$sort] | [$orderBy] }\n```","params":[{"type":{"names":["Object"]},"description":"Specifies the details for the $insert","name":"query","typeStr":"Object"}],"longname":"Update","kind":"member","scope":"global","___id":"T000022R000004","___s":true,"longnameLower":"update","depths":["Update"],"depth0":"Update","before":"# UPDATE Statements\n\nTo query the database and update existing records you have to use the `$update` operator.\nCheck the Syntax and Examples.\n\n**Example**\n```javascript\n$update: {\n\t$table: 'people',\n\t$set: {\n\t\tfirst_name: 'John',\n\t\tlast_name: 'Doe',\n\t},\n\t$where: { age: { $gte: 18 } }\n}\n```","isquerying":true,"ansi":"true","category":"Querying","arguments":"query","gitRelative":"/lib/ansi/update.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/update.js#L14","hashId":"Update","_id":"M9BVayyTTkPtud5z"},{"comment":"/**\n\t * @name $set\n\t * @summary Specifies the `SET` part for the `UPDATE` Statement.\n\t * @memberOf Update\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param set \t {Object}\n\t * ```\n\t * $update: {\n\t * \t$table: 'people',\n\t * \t$set: {\n\t * \t\tfirst_name: 'John',\n\t * \t\tlast_name: 'Doe',\n\t * \t},\n\t * \t$where: { age: { $gte: 18 } }\n\t * }\n\t * ```\n\t */","meta":{"range":[1448,1790],"filename":"update.js","lineno":61,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi","code":{}},"name":"$set","summary":"Specifies the `SET` part for the `UPDATE` Statement.","memberof":"Update","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Object"]},"description":"```\n$update: {\n\t$table: 'people',\n\t$set: {\n\t\tfirst_name: 'John',\n\t\tlast_name: 'Doe',\n\t},\n\t$where: { age: { $gte: 18 } }\n}\n```","name":"set","typeStr":"Object"}],"scope":"static","longname":"Update.$set","kind":"member","___id":"T000022R000006","___s":true,"longnameLower":"update.$set","depths":["Update","$set"],"depth0":"Update","depth1":"$set","isquerying":true,"ansi":"true","category":"Querying","arguments":"set","gitRelative":"/lib/ansi/update.js","gitUrl":"http:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/update.js#L61","hashId":"Update-set","_id":"KmqPSfXGdEMePqEk"}]