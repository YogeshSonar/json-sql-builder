var docs = [{"comment":"/**\n\t * @name $avg\n\t * @summary Specifies the AVG aggregation.\n\t * @memberOf Aggregation\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to used on AVG aggregate.\n\t */","meta":{"range":[2023,2332],"filename":"aggregation.js","lineno":62,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$avg","summary":"Specifies the AVG aggregation.","memberof":"Aggregation","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to used on AVG aggregate.","name":"identifier","typeStr":"String"}],"scope":"static","longname":"Aggregation.$avg","kind":"member","___id":"T000011R000008","___s":true,"longnameLower":"aggregation.$avg","depths":["Aggregation","$avg"],"depth0":"Aggregation","depth1":"$avg","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, identifier","gitRelative":"/lib/ansi/operators/aggregation.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/aggregation.js#L62","hashId":"Aggregation-$avg","_id":"z0t6DestfFFPNFh4"},{"comment":"/**\n\t * @name $count\n\t * @summary Specifies the COUNT aggregation.\n\t * @memberOf Aggregation\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to count.\n\t */","meta":{"range":[95,392],"filename":"aggregation.js","lineno":6,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$count","summary":"Specifies the COUNT aggregation.","memberof":"Aggregation","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to count.","name":"identifier","typeStr":"String"}],"scope":"static","longname":"Aggregation.$count","kind":"member","___id":"T000011R000004","___s":true,"longnameLower":"aggregation.$count","depths":["Aggregation","$count"],"depth0":"Aggregation","depth1":"$count","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, identifier","gitRelative":"/lib/ansi/operators/aggregation.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/aggregation.js#L6","hashId":"Aggregation-$count","_id":"nCKZVbDExUpbDoI5"},{"comment":"/**\n\t * @name $max\n\t * @summary Specifies the MAX aggregation.\n\t * @memberOf Aggregation\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to used on MAX aggregate.\n\t */","meta":{"range":[1539,1848],"filename":"aggregation.js","lineno":48,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$max","summary":"Specifies the MAX aggregation.","memberof":"Aggregation","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to used on MAX aggregate.","name":"identifier","typeStr":"String"}],"scope":"static","longname":"Aggregation.$max","kind":"member","___id":"T000011R000007","___s":true,"longnameLower":"aggregation.$max","depths":["Aggregation","$max"],"depth0":"Aggregation","depth1":"$max","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, identifier","gitRelative":"/lib/ansi/operators/aggregation.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/aggregation.js#L48","hashId":"Aggregation-$max","_id":"KW4kaCb7jEFnpDu0"},{"comment":"/**\n\t * @name $min\n\t * @summary Specifies the MIN aggregation.\n\t * @memberOf Aggregation\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to used on MIN aggregate.\n\t */","meta":{"range":[1055,1364],"filename":"aggregation.js","lineno":34,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$min","summary":"Specifies the MIN aggregation.","memberof":"Aggregation","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to used on MIN aggregate.","name":"identifier","typeStr":"String"}],"scope":"static","longname":"Aggregation.$min","kind":"member","___id":"T000011R000006","___s":true,"longnameLower":"aggregation.$min","depths":["Aggregation","$min"],"depth0":"Aggregation","depth1":"$min","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, identifier","gitRelative":"/lib/ansi/operators/aggregation.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/aggregation.js#L34","hashId":"Aggregation-$min","_id":"qE9uaqd9GBGjcSn8"},{"comment":"/**\n\t * @name $sum\n\t * @summary Specifies the SUM aggregation.\n\t * @memberOf Aggregation\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t \t\t{Property}\tSpecifies an Expression, Column name either table.column or column\n\t * @param identifier\t{String}\tSpecifies the column to used on SUM aggregate.\n\t */","meta":{"range":[571,880],"filename":"aggregation.js","lineno":20,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$sum","summary":"Specifies the SUM aggregation.","memberof":"Aggregation","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies the column to used on SUM aggregate.","name":"identifier","typeStr":"String"}],"scope":"static","longname":"Aggregation.$sum","kind":"member","___id":"T000011R000005","___s":true,"longnameLower":"aggregation.$sum","depths":["Aggregation","$sum"],"depth0":"Aggregation","depth1":"$sum","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, identifier","gitRelative":"/lib/ansi/operators/aggregation.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/aggregation.js#L20","hashId":"Aggregation-$sum","_id":"mRG7TbjFHGE3SdJw"},{"comment":"/**\n\t * @name $alias\n\t * @memberOf Basics\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @summary Specifies an alias for a column, table or any other expression.\n\t *\n\t * @param {Property} identifier\tSpecifies original column, table, ... name.\n\t * @param {String} alias  \t\tSpecifies alias name.\n\t */","meta":{"range":[595,890],"filename":"basic.js","lineno":26,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$alias","memberof":"Basics","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies an alias for a column, table or any other expression.","params":[{"type":{"names":["Property"]},"description":"Specifies original column, table, ... name.","name":"identifier","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies alias name.","name":"alias","typeStr":"String"}],"scope":"static","longname":"Basics.$alias","kind":"member","___id":"T000012R000005","___s":true,"longnameLower":"basics.$alias","depths":["Basics","$alias"],"depth0":"Basics","depth1":"$alias","isquerying":true,"ansi":"true","category":"Querying","arguments":"identifier, alias","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L26","hashId":"Basics-$alias","_id":"yHU61VE1YLLg4cms"},{"comment":"/**\n\t * @name $as\n\t * @memberOf Basics\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @summary Specifies an alias for a column, table or any other expression.\n\t *\n\t * @param {Property} identifier\tSpecifies original column, table, ... name.\n\t * @param {String} alias  \t\tSpecifies alias name.\n\t */","meta":{"range":[86,378],"filename":"basic.js","lineno":7,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$as","memberof":"Basics","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies an alias for a column, table or any other expression.","params":[{"type":{"names":["Property"]},"description":"Specifies original column, table, ... name.","name":"identifier","typeStr":"Property"},{"type":{"names":["String"]},"description":"Specifies alias name.","name":"alias","typeStr":"String"}],"scope":"static","longname":"Basics.$as","kind":"member","___id":"T000012R000004","___s":true,"longnameLower":"basics.$as","depths":["Basics","$as"],"depth0":"Basics","depth1":"$as","isquerying":true,"ansi":"true","category":"Querying","arguments":"identifier, alias","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L7","hashId":"Basics-$as","_id":"Vt57zkEnhqTQpl2k"},{"comment":"/**\n\t * @name $column\n\t * @memberOf Basics\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @summary Specifies a single column.\n\t *\n\t * @param {String} column\tSpecifies the column-identifier.\n\t */","meta":{"range":[1373,1564],"filename":"basic.js","lineno":56,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$column","memberof":"Basics","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies a single column.","params":[{"type":{"names":["String"]},"description":"Specifies the column-identifier.","name":"column","typeStr":"String"}],"scope":"static","longname":"Basics.$column","kind":"member","___id":"T000012R000007","___s":true,"longnameLower":"basics.$column","depths":["Basics","$column"],"depth0":"Basics","depth1":"$column","isquerying":true,"ansi":"true","category":"Querying","arguments":"column","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L56","hashId":"Basics-$column","_id":"uhIh2IFDuqGngsdw"},{"comment":"/**\n\t * @name $expr\n\t * @memberOf Basics\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @summary Specifies an expression\n\t *\n\t * @param {Object} expr\tSpecifies the expression as Object.\n\t */","meta":{"range":[1071,1258],"filename":"basic.js","lineno":42,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$expr","memberof":"Basics","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies an expression","params":[{"type":{"names":["Object"]},"description":"Specifies the expression as Object.","name":"expr","typeStr":"Object"}],"scope":"static","longname":"Basics.$expr","kind":"member","___id":"T000012R000006","___s":true,"longnameLower":"basics.$expr","depths":["Basics","$expr"],"depth0":"Basics","depth1":"$expr","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L42","hashId":"Basics-$expr","_id":"2VQ9aVe1UyVFkVyD"},{"comment":"/**\n\t * @name $val\n\t * @memberOf Basics\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @summary Specifies a fixed value.\n\t *\n\t * @param {Property} identifier\tSpecifies the identifier\n\t * @param {Primitive} val\tSpecifies the value\n\t */","meta":{"range":[1778,2009],"filename":"basic.js","lineno":74,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$val","memberof":"Basics","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"summary":"Specifies a fixed value.","params":[{"type":{"names":["Property"]},"description":"Specifies the identifier","name":"identifier","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value","name":"val","typeStr":"Primitive"}],"scope":"static","longname":"Basics.$val","kind":"member","___id":"T000012R000008","___s":true,"longnameLower":"basics.$val","depths":["Basics","$val"],"depth0":"Basics","depth1":"$val","isquerying":true,"ansi":"true","category":"Querying","arguments":"identifier, val","gitRelative":"/lib/ansi/operators/basic.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/basic.js#L74","hashId":"Basics-$val","_id":"7fCvy8FBPpmassEk"},{"comment":"/**\n\t * @name $between\n\t * @summary Comparison where expression is between the given array item 0 and item 1.\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {Array}\tSpecifies the range, from and til. It must be an Array with exactly 2 items.\n\t *\n\t * @return {String}\t\t`expr` BETWEEN item1 AND item2\n\t */","meta":{"range":[8107,8541],"filename":"comparison.js","lineno":249,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$between","summary":"Comparison where expression is between the given array item 0 and item 1.","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["Array"]},"description":"Specifies the range, from and til. It must be an Array with exactly 2 items.","name":"value","typeStr":"Array"}],"returns":[{"type":{"names":["String"]},"description":"`expr` BETWEEN item1 AND item2"}],"scope":"static","longname":"Comparison.$between","kind":"member","___id":"T000013R000028","___s":true,"longnameLower":"comparison.$between","depths":["Comparison","$between"],"depth0":"Comparison","depth1":"$between","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L249","hashId":"Comparison-$between","_id":"DLS4gqQqIcfYNqZD"},{"comment":"/**\n\t * @name $contains\n\t * @summary Comparison where expression contains a value\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {String}\tSpecifies the value to compare with\n\t *\n\t * @return {String}\t\t`expr` LIKE '%value%'\n\t */","meta":{"range":[6187,6544],"filename":"comparison.js","lineno":190,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$contains","summary":"Comparison where expression contains a value","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the value to compare with","name":"value","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"`expr` LIKE '%value%'"}],"scope":"static","longname":"Comparison.$contains","kind":"member","___id":"T000013R000022","___s":true,"longnameLower":"comparison.$contains","depths":["Comparison","$contains"],"depth0":"Comparison","depth1":"$contains","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L190","hashId":"Comparison-$contains","_id":"GPF4bFRRf6DLePnQ"},{"comment":"/**\n\t * @name $endsWith\n\t * @summary Comparison where expression ends with a value\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {String}\tSpecifies the value to compare with\n\t *\n\t * @return {String}\t\t`expr` LIKE '%value'\n\t */","meta":{"range":[5630,5987],"filename":"comparison.js","lineno":174,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$endsWith","summary":"Comparison where expression ends with a value","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the value to compare with","name":"value","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"`expr` LIKE '%value'"}],"scope":"static","longname":"Comparison.$endsWith","kind":"member","___id":"T000013R000021","___s":true,"longnameLower":"comparison.$endswith","depths":["Comparison","$endsWith"],"depth0":"Comparison","depth1":"$endsWith","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L174","hashId":"Comparison-$endsWith","_id":"Kjmr4k5laovpfqHr"},{"comment":"/**\n\t * @name $eq\n\t * @summary Comparison where expression is equal to a value\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[1263,1574],"filename":"comparison.js","lineno":46,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$eq","summary":"Comparison where expression is equal to a value","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$eq","kind":"member","___id":"T000013R000012","___s":true,"longnameLower":"comparison.$eq","depths":["Comparison","$eq"],"depth0":"Comparison","depth1":"$eq","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L46","hashId":"Comparison-$eq","_id":"7QBcMOWAL1nWoEKe"},{"comment":"/**\n\t * @name $gt\n\t * @summary Comparison where expression is greater than a value\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[2200,2515],"filename":"comparison.js","lineno":74,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$gt","summary":"Comparison where expression is greater than a value","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$gt","kind":"member","___id":"T000013R000014","___s":true,"longnameLower":"comparison.$gt","depths":["Comparison","$gt"],"depth0":"Comparison","depth1":"$gt","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L74","hashId":"Comparison-$gt","_id":"VUCMGkqFlfFhGYVB"},{"comment":"/**\n\t * @name $gte\n\t * @summary Comparison where expression is greater or equal than a value\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[2670,2995],"filename":"comparison.js","lineno":88,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$gte","summary":"Comparison where expression is greater or equal than a value","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$gte","kind":"member","___id":"T000013R000015","___s":true,"longnameLower":"comparison.$gte","depths":["Comparison","$gte"],"depth0":"Comparison","depth1":"$gte","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L88","hashId":"Comparison-$gte","_id":"TlIhtlHkxj71KCT3"},{"comment":"/**\n\t * @name $in\n\t * @summary Comparison where expression is in the given list of items\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {Array}\tSpecifies the items of the IN clause\n\t */","meta":{"range":[4100,4418],"filename":"comparison.js","lineno":130,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$in","summary":"Comparison where expression is in the given list of items","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Array"]},"description":"Specifies the items of the IN clause","name":"value","typeStr":"Array"}],"scope":"static","longname":"Comparison.$in","kind":"member","___id":"T000013R000018","___s":true,"longnameLower":"comparison.$in","depths":["Comparison","$in"],"depth0":"Comparison","depth1":"$in","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L130","hashId":"Comparison-$in","_id":"8NEhHxWX7hFmqLUN"},{"comment":"/**\n\t * @name $isNull\n\t * @summary Comparison where expression IS NULL or IS NOT NULL, depending on the given value `true` or `false`.\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {Boolean}\tSpecifies IS NULL (true) or IS NOT NULL (false)\n\t *\n\t * @return {String}\t\t`expr` IS NULL or `expr` IS NOT NULL\n\t */","meta":{"range":[7293,7731],"filename":"comparison.js","lineno":222,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$isNull","summary":"Comparison where expression IS NULL or IS NOT NULL, depending on the given value `true` or `false`.","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["Boolean"]},"description":"Specifies IS NULL (true) or IS NOT NULL (false)","name":"value","typeStr":"Boolean"}],"returns":[{"type":{"names":["String"]},"description":"`expr` IS NULL or `expr` IS NOT NULL"}],"scope":"static","longname":"Comparison.$isNull","kind":"member","___id":"T000013R000024","___s":true,"longnameLower":"comparison.$isnull","depths":["Comparison","$isNull"],"depth0":"Comparison","depth1":"$isNull","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L222","hashId":"Comparison-$isNull","_id":"PcYJPlFFR6Y58LMK"},{"comment":"/**\n\t * @name $like\n\t * @summary Comparison where expression equals a pattern value\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {String}\tSpecifies the value to compare with\n\t *\n\t * @return {String}\t\t`expr` LIKE <value>\n\t */","meta":{"range":[6764,7121],"filename":"comparison.js","lineno":206,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$like","summary":"Comparison where expression equals a pattern value","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the value to compare with","name":"value","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"`expr` LIKE <value>"}],"scope":"static","longname":"Comparison.$like","kind":"member","___id":"T000013R000023","___s":true,"longnameLower":"comparison.$like","depths":["Comparison","$like"],"depth0":"Comparison","depth1":"$like","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L206","hashId":"Comparison-$like","_id":"Htc8FHsavkwhdW1F"},{"comment":"/**\n\t * @name $lt\n\t * @summary Comparison where expression is lower than a value\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[3152,3465],"filename":"comparison.js","lineno":102,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$lt","summary":"Comparison where expression is lower than a value","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$lt","kind":"member","___id":"T000013R000016","___s":true,"longnameLower":"comparison.$lt","depths":["Comparison","$lt"],"depth0":"Comparison","depth1":"$lt","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L102","hashId":"Comparison-$lt","_id":"LToKMynsl5G1nwGI"},{"comment":"/**\n\t * @name $lte\n\t * @summary Comparison where expression is lower or equal than a value\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[3620,3943],"filename":"comparison.js","lineno":116,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$lte","summary":"Comparison where expression is lower or equal than a value","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$lte","kind":"member","___id":"T000013R000017","___s":true,"longnameLower":"comparison.$lte","depths":["Comparison","$lte"],"depth0":"Comparison","depth1":"$lte","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L116","hashId":"Comparison-$lte","_id":"qZ4YUyGTyCy8SwZi"},{"comment":"/**\n\t * @name $ne\n\t * @summary Comparison where expression is not equal to a value\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {Property}\t\tSpecifies an Expression, Column name either table.column or column\n\t * @param value  {Primitive}\tSpecifies the value to compare with\n\t */","meta":{"range":[1729,2044],"filename":"comparison.js","lineno":60,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$ne","summary":"Comparison where expression is not equal to a value","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Property"]},"description":"Specifies an Expression, Column name either table.column or column","name":"expr","typeStr":"Property"},{"type":{"names":["Primitive"]},"description":"Specifies the value to compare with","name":"value","typeStr":"Primitive"}],"scope":"static","longname":"Comparison.$ne","kind":"member","___id":"T000013R000013","___s":true,"longnameLower":"comparison.$ne","depths":["Comparison","$ne"],"depth0":"Comparison","depth1":"$ne","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L60","hashId":"Comparison-$ne","_id":"jbaQ1oRTD00FNgwK"},{"comment":"/**\n\t * @name $nin\n\t * @summary Comparison where expression is not in the given list of items\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {Array}\tSpecifies the items of the IN clause\n\t */","meta":{"range":[4578,4899],"filename":"comparison.js","lineno":144,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$nin","summary":"Comparison where expression is not in the given list of items","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["Array"]},"description":"Specifies the items of the IN clause","name":"value","typeStr":"Array"}],"scope":"static","longname":"Comparison.$nin","kind":"member","___id":"T000013R000019","___s":true,"longnameLower":"comparison.$nin","depths":["Comparison","$nin"],"depth0":"Comparison","depth1":"$nin","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L144","hashId":"Comparison-$nin","_id":"iFx7DQg0d5WkDtUx"},{"comment":"/**\n\t * @name $startsWith\n\t * @summary Comparison where expression starts with a value\n\t * @memberOf Comparison\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {String}\tSpecifies the Expression, Column name either table.column or column\n\t * @param value  {String}\tSpecifies the value to compare with\n\t *\n\t * @return {String}\t\t`expr` LIKE 'value%'\n\t */","meta":{"range":[5065,5426],"filename":"comparison.js","lineno":158,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$startsWith","summary":"Comparison where expression starts with a value","memberof":"Comparison","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["String"]},"description":"Specifies the Expression, Column name either table.column or column","name":"expr","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the value to compare with","name":"value","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"`expr` LIKE 'value%'"}],"scope":"static","longname":"Comparison.$startsWith","kind":"member","___id":"T000013R000020","___s":true,"longnameLower":"comparison.$startswith","depths":["Comparison","$startsWith"],"depth0":"Comparison","depth1":"$startsWith","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr, value","gitRelative":"/lib/ansi/operators/comparison.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/comparison.js#L158","hashId":"Comparison-$startsWith","_id":"kx9wfFRxLFTee60V"},{"comment":"/**\n\t * @name $and\n\t * @summary The logical operator joins all given items with a logical AND\n\t * @memberOf Logical\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {Array}\tSpecifies the items that should be joined\n\t */","meta":{"range":[85,313],"filename":"logical.js","lineno":6,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$and","summary":"The logical operator joins all given items with a logical AND","memberof":"Logical","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Array"]},"description":"Specifies the items that should be joined","name":"expr","typeStr":"Array"}],"scope":"static","longname":"Logical.$and","kind":"member","___id":"T000009R000004","___s":true,"longnameLower":"logical.$and","depths":["Logical","$and"],"depth0":"Logical","depth1":"$and","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr","gitRelative":"/lib/ansi/operators/logical.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/logical.js#L6","hashId":"Logical-$and","_id":"Yad2mU90q4dP2C49"},{"comment":"/**\n\t * @name $or\n\t * @summary The logical operator joins all given items with a logical OR\n\t * @memberOf Logical\n\t * @isquerying true\n\t * @ansi true\n\t *\n\t * @param expr \t {Array}\tSpecifies the items that should be joined\n\t */","meta":{"range":[1009,1235],"filename":"logical.js","lineno":48,"path":"/home/rene/nodejs/json-sql-builder/lib/ansi/operators","code":{}},"name":"$or","summary":"The logical operator joins all given items with a logical OR","memberof":"Logical","tags":[{"originalTitle":"isquerying","title":"isquerying","text":"true","value":"true"},{"originalTitle":"ansi","title":"ansi","text":"true","value":"true"}],"params":[{"type":{"names":["Array"]},"description":"Specifies the items that should be joined","name":"expr","typeStr":"Array"}],"scope":"static","longname":"Logical.$or","kind":"member","___id":"T000009R000006","___s":true,"longnameLower":"logical.$or","depths":["Logical","$or"],"depth0":"Logical","depth1":"$or","isquerying":true,"ansi":"true","category":"Querying","arguments":"expr","gitRelative":"/lib/ansi/operators/logical.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/ansi/operators/logical.js#L48","hashId":"Logical-$or","_id":"SvZSPYeUkx4TZdCp"},{"comment":"/**\n * @before\n * # Build Queries\n *\n * With the NPM package `json-sql-builder` you can build each query you need to run on your database.\n *\n * <div class=\"sub-title\">\n *      Detailed documentation of all available methods and options\n * </div>\n *\n * @namespace SQLBuilder\n * @summary Main Api to build queries.\n * @hide true\n */","meta":{"range":[352,683],"filename":"sqlbuilder.js","lineno":20,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{}},"tags":[{"originalTitle":"before","title":"before","text":"# Build Queries\n\nWith the NPM package `json-sql-builder` you can build each query you need to run on your database.\n\n<div class=\"sub-title\">\n     Detailed documentation of all available methods and options\n</div>","value":"# Build Queries\n\nWith the NPM package `json-sql-builder` you can build each query you need to run on your database.\n\n<div class=\"sub-title\">\n     Detailed documentation of all available methods and options\n</div>"},{"originalTitle":"hide","title":"hide","text":"true","value":"true"}],"kind":"namespace","name":"SQLBuilder","summary":"Main Api to build queries.","longname":"SQLBuilder","scope":"global","___id":"T000014R000009","___s":true,"longnameLower":"sqlbuilder","depths":["SQLBuilder"],"depth0":"SQLBuilder","before":"# Build Queries\n\nWith the NPM package `json-sql-builder` you can build each query you need to run on your database.\n\n<div class=\"sub-title\">\n     Detailed documentation of all available methods and options\n</div>","hide":"true","category":"Api","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L20","hashId":"SQLBuilder","_id":"FJ4jnpaN0FPzKpBO"},{"comment":"/**\n\t * @summary Creates a new instance of the SQLBuilder.\n\t *\n\t * @param  {String} language\n\t * Specifies the language. If theres was no parameter provided only the ANSI Standards will be loaded.\n\t * - mysql\n\t * - postgreSQL\n\t *\n\t * @return {SQLBuilder} New instance of the SQLBuilder\n\t */","meta":{"range":[997,1572],"filename":"sqlbuilder.js","lineno":46,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000049","name":"SQLBuilder","type":"MethodDefinition","paramnames":["language"]},"vars":null},"summary":"Creates a new instance of the SQLBuilder.","params":[{"type":{"names":["String"]},"description":"Specifies the language. If theres was no parameter provided only the ANSI Standards will be loaded.\n- mysql\n- postgreSQL","name":"language","typeStr":"String"}],"returns":[{"type":{"names":["SQLBuilder"]},"description":"New instance of the SQLBuilder"}],"name":"SQLBuilder","longname":"SQLBuilder","kind":"class","scope":"global","___id":"T000014R000011","___s":true,"longnameLower":"sqlbuilder","depths":["SQLBuilder"],"depth0":"SQLBuilder","category":"Api","arguments":"language","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L46","hashId":"SQLBuilder","_id":"Z3kInx09s3sXd9cd"},{"comment":"/**\n\t * @summary Adds the given value to the current value stack and returns the language specific placeholder as string.\n\t * @memberof SQLBuilder\n\t *\n\t * @param {Primitive} val Specifies the value to add.\n\t */","meta":{"range":[6885,6957],"filename":"sqlbuilder.js","lineno":221,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000593","name":"SQLBuilder#addValue","type":"MethodDefinition","paramnames":["val"]},"vars":null},"summary":"Adds the given value to the current value stack and returns the language specific placeholder as string.","memberof":"SQLBuilder","params":[{"type":{"names":["Primitive"]},"description":"Specifies the value to add.","name":"val","typeStr":"Primitive"}],"name":"addValue","longname":"SQLBuilder#addValue","kind":"function","scope":"instance","___id":"T000014R000038","___s":true,"longnameLower":"sqlbuilder#addvalue","depths":["SQLBuilder","addValue"],"depth0":"SQLBuilder","depth1":"addValue","category":"Api","arguments":"val","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L221","hashId":"SQLBuilder-addValue","_id":"fDGXTlBICl86acwK"},{"comment":"/**\n\t * @summary Builds the given query and returns an new SQLQuery object.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {Object} query\t\t\tSpecifies the JSON query-object.\n\t * @param  {String} [identifier]\tOptional. Specifies the identifier detected before.\n\t * @param  {String} [syntax]\t\tSpecifies the Syntax that the SQLBuilder has to use for this query.\n\t *\n\t * @return {SQLQuery}\n\t */","meta":{"range":[2074,4900],"filename":"sqlbuilder.js","lineno":86,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000146","name":"SQLBuilder#build","type":"MethodDefinition","paramnames":["query","identifier","syntax"]},"vars":null},"summary":"Builds the given query and returns an new SQLQuery object.","memberof":"SQLBuilder","params":[{"type":{"names":["Object"]},"description":"Specifies the JSON query-object.","name":"query","typeStr":"Object"},{"type":{"names":["String"]},"optional":true,"description":"Optional. Specifies the identifier detected before.","name":"identifier","typeStr":"String"},{"type":{"names":["String"]},"optional":true,"description":"Specifies the Syntax that the SQLBuilder has to use for this query.","name":"syntax","typeStr":"String"}],"returns":[{"type":{"names":["SQLQuery"]}}],"name":"build","longname":"SQLBuilder#build","kind":"function","scope":"instance","___id":"T000014R000022","___s":true,"longnameLower":"sqlbuilder#build","depths":["SQLBuilder","build"],"depth0":"SQLBuilder","depth1":"build","category":"Api","arguments":"query, [identifier], [syntax]","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L86","hashId":"SQLBuilder-build","_id":"btEkY7AIzegE3oBe"},{"comment":"/**\n\t * @summary Calls the given Helper by name. The Helper will be executed in the context of the current SQLBuilder instance.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} name       Specifies the name of the Helper / Operator.\n\t * @param  {Object} query      Specifies the query-object that should be translated to sql by the specified Helper.\n\t * @param  {Object} [outerQuery] Optional. Specifies the outer object from the given query.\n\t * @param  {String} [identifier] Optional. Specifies the current available identifier.\n\t *\n\t * @return {String} Returns the translated SQL code from the given query.\n\t */","meta":{"range":[7577,7785],"filename":"sqlbuilder.js","lineno":237,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000611","name":"SQLBuilder#callHelper","type":"MethodDefinition","paramnames":["name","query","outerQuery","identifier"]},"vars":null},"summary":"Calls the given Helper by name. The Helper will be executed in the context of the current SQLBuilder instance.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of the Helper / Operator.","name":"name","typeStr":"String"},{"type":{"names":["Object"]},"description":"Specifies the query-object that should be translated to sql by the specified Helper.","name":"query","typeStr":"Object"},{"type":{"names":["Object"]},"optional":true,"description":"Optional. Specifies the outer object from the given query.","name":"outerQuery","typeStr":"Object"},{"type":{"names":["String"]},"optional":true,"description":"Optional. Specifies the current available identifier.","name":"identifier","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"Returns the translated SQL code from the given query."}],"name":"callHelper","longname":"SQLBuilder#callHelper","kind":"function","scope":"instance","___id":"T000014R000039","___s":true,"longnameLower":"sqlbuilder#callhelper","depths":["SQLBuilder","callHelper"],"depth0":"SQLBuilder","depth1":"callHelper","category":"Api","arguments":"name, query, [outerQuery], [identifier]","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L237","hashId":"SQLBuilder-callHelper","_id":"52a21Gctg3Lo1cmq"},{"comment":"/**\n\t * @summary Returns the given, existing Syntax. If the Syntax does not exists an error will be thrown.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} name       Specifies the name of the Syntax.\n\t *\n\t * @return {String} Available Syntax-Definition\n\t */","meta":{"range":[11851,12063],"filename":"sqlbuilder.js","lineno":349,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000712","name":"SQLBuilder#getSyntax","type":"MethodDefinition","paramnames":["name"]},"vars":null},"summary":"Returns the given, existing Syntax. If the Syntax does not exists an error will be thrown.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of the Syntax.","name":"name","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"Available Syntax-Definition"}],"name":"getSyntax","longname":"SQLBuilder#getSyntax","kind":"function","scope":"instance","___id":"T000014R000045","___s":true,"longnameLower":"sqlbuilder#getsyntax","depths":["SQLBuilder","getSyntax"],"depth0":"SQLBuilder","depth1":"getSyntax","category":"Api","arguments":"name","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L349","hashId":"SQLBuilder-getSyntax","_id":"hnZ7C02VvvTdwHPL"},{"comment":"/**\n\t * @summary Specifies the placeholder function for the ANSI SQL Standard. This function can be overwrite from any SQL dialect loaded on instancing the builder.\n\t * @memberof SQLBuilder\n\t *\n\t * @return {String} placeholder\n\t */","meta":{"range":[6639,6670],"filename":"sqlbuilder.js","lineno":211,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000587","name":"SQLBuilder#placeholder","type":"MethodDefinition","paramnames":[]},"vars":null},"summary":"Specifies the placeholder function for the ANSI SQL Standard. This function can be overwrite from any SQL dialect loaded on instancing the builder.","memberof":"SQLBuilder","returns":[{"type":{"names":["String"]},"description":"placeholder"}],"name":"placeholder","longname":"SQLBuilder#placeholder","kind":"function","scope":"instance","params":[],"___id":"T000014R000037","___s":true,"longnameLower":"sqlbuilder#placeholder","depths":["SQLBuilder","placeholder"],"depth0":"SQLBuilder","depth1":"placeholder","category":"Api","arguments":"","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L211","hashId":"SQLBuilder-placeholder","_id":"O5YlW066UALOytvg"},{"comment":"/**\n\t * @summary Quotes the given identifier with the quote-character defined for the specific SQL language dialect.\n\t * @memberof SQLBuilder\n\t *\n\t * @after\n\t * # Quote Identifiers\n\t *\n\t * If you are creating your own helpers and operators you have to quote the generated identifiers.\n\t * For this you can use the standard method that will do the job for you.\n\t *\n\t * If you are passing only one identifier to the method you will receive the the identifier as quoted string.\n\t * On passing two identifiers you will receive the quoted identifiers joined with a dot '.' like `table.column`.\n\t *\n\t * In exception to this a column-identifier with the value ` * ` or `ALL` will returned as unquoted string.\n\t * Also all variable identifiers that starts with ` @ ` will be leave unquoted.\n\t *\n\t * @param  {String} column\tSpecifies the main identifier to quote. Normally it will be a column or an alias name.\n\t * @param  {String} [table]\tOptional. Specifies the table-identifier.\n\t *\n\t * @return {String} Quoted identifier like `table`.`column`\n\t */","meta":{"range":[5947,6403],"filename":"sqlbuilder.js","lineno":191,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000518","name":"SQLBuilder#quote","type":"MethodDefinition","paramnames":["column","table"]},"vars":null},"summary":"Quotes the given identifier with the quote-character defined for the specific SQL language dialect.","memberof":"SQLBuilder","tags":[{"originalTitle":"after","title":"after","text":"# Quote Identifiers\n\nIf you are creating your own helpers and operators you have to quote the generated identifiers.\nFor this you can use the standard method that will do the job for you.\n\nIf you are passing only one identifier to the method you will receive the the identifier as quoted string.\nOn passing two identifiers you will receive the quoted identifiers joined with a dot '.' like `table.column`.\n\nIn exception to this a column-identifier with the value ` * ` or `ALL` will returned as unquoted string.\nAlso all variable identifiers that starts with ` @ ` will be leave unquoted.","value":"# Quote Identifiers\n\nIf you are creating your own helpers and operators you have to quote the generated identifiers.\nFor this you can use the standard method that will do the job for you.\n\nIf you are passing only one identifier to the method you will receive the the identifier as quoted string.\nOn passing two identifiers you will receive the quoted identifiers joined with a dot '.' like `table.column`.\n\nIn exception to this a column-identifier with the value ` * ` or `ALL` will returned as unquoted string.\nAlso all variable identifiers that starts with ` @ ` will be leave unquoted."}],"params":[{"type":{"names":["String"]},"description":"Specifies the main identifier to quote. Normally it will be a column or an alias name.","name":"column","typeStr":"String"},{"type":{"names":["String"]},"optional":true,"description":"Optional. Specifies the table-identifier.","name":"table","typeStr":"String"}],"returns":[{"type":{"names":["String"]},"description":"Quoted identifier like `table`.`column`"}],"name":"quote","longname":"SQLBuilder#quote","kind":"function","scope":"instance","___id":"T000014R000036","___s":true,"longnameLower":"sqlbuilder#quote","depths":["SQLBuilder","quote"],"depth0":"SQLBuilder","depth1":"quote","after":"# Quote Identifiers\n\nIf you are creating your own helpers and operators you have to quote the generated identifiers.\nFor this you can use the standard method that will do the job for you.\n\nIf you are passing only one identifier to the method you will receive the the identifier as quoted string.\nOn passing two identifiers you will receive the quoted identifiers joined with a dot '.' like `table.column`.\n\nIn exception to this a column-identifier with the value ` * ` or `ALL` will returned as unquoted string.\nAlso all variable identifiers that starts with ` @ ` will be leave unquoted.","category":"Api","arguments":"column, [table]","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L191","hashId":"SQLBuilder-quote","_id":"imsomPB68g8k1Cpi"},{"comment":"/**\n\t * @after\n\t *\n\t * # Create a new Helper\n\t *\n\t * If you like to extend any language you have to register a new Helper.\n\t *\n\t * **Example**\n\t *\n\t * The Example shows the declaration of a new Helper for the `SELECT... INTO` clause by using the MySQL language dialect.\n\t *\n\t * ```javascript\n// create a new Helper for the MySQL   INTO clause\nsqlBuilder.registerHelper('$into', function(query, outerQuery, identifier){\n\tvar result = '',\n\t\tresults = [];\n\n\t// check the type of the query\n\tif (_.isArray(query)){\n\t\t// Array like example\n\t\t// $into: ['@firstname', '@lastname']\n\t\t_.forEach(query, (column) => {\n\t\t\t// check the type of the column definition, they must all of type String\n\t\t\tif (_.isString(column)){\n\t\t\t\tresults.push(this.quote(column));\n\t\t\t} else {\n\t\t\t\tthrow new Error('The items of the $into array must be type of string.');\n\t\t\t}\n\t\t});\n\n\t\tresult = (results.length > 0 ? 'INTO ' + results.join(', ') : '');\n\t} else if (_.isPlainObject(query)) {\n\t\t// the query is an object like:\n\t\t// $into: {\n\t\t// \t\t$outfile: { $file: '/tmp/people.csv', $terminatedBy: ';' }\n\t\t// }\n\t\t// lets call the build-method, that will do the job!\n\t\t// --> the build-method will call the $outfile helper-function, $file-helper and $terminatedBy-helper\n\t\tresult = 'INTO ' + this.build(query, null, this.getSyntax('$into'));\n\t} else {\n\t\tthrow new Error('$columns must be either array of strings or objects.');\n\t}\n\n\treturn result;\n\n}, 'INTO [$outfile] [$dumpfile]'); // this is our Syntax\n\t *\n\t * ```\n\t * > **Info**\n\t * >\n\t * > After registering the helper don't forget to update the corresponding Syntax and add the new helper.\n\t * >\n\t * > See [SQLBuilder#updateSyntax](#SQLBuilder-updateSyntax)\n\t *\n\t * @summary Registers a new helper, operator for the SQLBuilder.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} \tname\t\tSpecifies the name of the Syntax.\n\t * @param  {Function} \tcallback\tSpecifies the callback-function, which is called each time the SQLBuilder detects the helper inside the query.\n\t * @param  {String} \t[syntax]\t**Optional**. Specifies the Syntax for this query helper. If a Syntax is provided it will be registered with the same name as the helper itself.\n\t */","meta":{"range":[14232,14577],"filename":"sqlbuilder.js","lineno":418,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000739","name":"SQLBuilder#registerHelper","type":"MethodDefinition","paramnames":["name","callback","syntax"]},"vars":null},"tags":[{"originalTitle":"after","title":"after","text":"# Create a new Helper\n\nIf you like to extend any language you have to register a new Helper.\n\n**Example**\n\nThe Example shows the declaration of a new Helper for the `SELECT... INTO` clause by using the MySQL language dialect.\n\n```javascript\n// create a new Helper for the MySQL   INTO clause\nsqlBuilder.registerHelper('$into', function(query, outerQuery, identifier){\n\tvar result = '',\n\t\tresults = [];\n\n\t// check the type of the query\n\tif (_.isArray(query)){\n\t\t// Array like example\n\t\t// $into: ['@firstname', '@lastname']\n\t\t_.forEach(query, (column) => {\n\t\t\t// check the type of the column definition, they must all of type String\n\t\t\tif (_.isString(column)){\n\t\t\t\tresults.push(this.quote(column));\n\t\t\t} else {\n\t\t\t\tthrow new Error('The items of the $into array must be type of string.');\n\t\t\t}\n\t\t});\n\n\t\tresult = (results.length > 0 ? 'INTO ' + results.join(', ') : '');\n\t} else if (_.isPlainObject(query)) {\n\t\t// the query is an object like:\n\t\t// $into: {\n\t\t// \t\t$outfile: { $file: '/tmp/people.csv', $terminatedBy: ';' }\n\t\t// }\n\t\t// lets call the build-method, that will do the job!\n\t\t// --> the build-method will call the $outfile helper-function, $file-helper and $terminatedBy-helper\n\t\tresult = 'INTO ' + this.build(query, null, this.getSyntax('$into'));\n\t} else {\n\t\tthrow new Error('$columns must be either array of strings or objects.');\n\t}\n\n\treturn result;\n\n}, 'INTO [$outfile] [$dumpfile]'); // this is our Syntax\n\n```\n> **Info**\n>\n> After registering the helper don't forget to update the corresponding Syntax and add the new helper.\n>\n> See [SQLBuilder#updateSyntax](#SQLBuilder-updateSyntax)","value":"# Create a new Helper\n\nIf you like to extend any language you have to register a new Helper.\n\n**Example**\n\nThe Example shows the declaration of a new Helper for the `SELECT... INTO` clause by using the MySQL language dialect.\n\n```javascript\n// create a new Helper for the MySQL   INTO clause\nsqlBuilder.registerHelper('$into', function(query, outerQuery, identifier){\n\tvar result = '',\n\t\tresults = [];\n\n\t// check the type of the query\n\tif (_.isArray(query)){\n\t\t// Array like example\n\t\t// $into: ['@firstname', '@lastname']\n\t\t_.forEach(query, (column) => {\n\t\t\t// check the type of the column definition, they must all of type String\n\t\t\tif (_.isString(column)){\n\t\t\t\tresults.push(this.quote(column));\n\t\t\t} else {\n\t\t\t\tthrow new Error('The items of the $into array must be type of string.');\n\t\t\t}\n\t\t});\n\n\t\tresult = (results.length > 0 ? 'INTO ' + results.join(', ') : '');\n\t} else if (_.isPlainObject(query)) {\n\t\t// the query is an object like:\n\t\t// $into: {\n\t\t// \t\t$outfile: { $file: '/tmp/people.csv', $terminatedBy: ';' }\n\t\t// }\n\t\t// lets call the build-method, that will do the job!\n\t\t// --> the build-method will call the $outfile helper-function, $file-helper and $terminatedBy-helper\n\t\tresult = 'INTO ' + this.build(query, null, this.getSyntax('$into'));\n\t} else {\n\t\tthrow new Error('$columns must be either array of strings or objects.');\n\t}\n\n\treturn result;\n\n}, 'INTO [$outfile] [$dumpfile]'); // this is our Syntax\n\n```\n> **Info**\n>\n> After registering the helper don't forget to update the corresponding Syntax and add the new helper.\n>\n> See [SQLBuilder#updateSyntax](#SQLBuilder-updateSyntax)"}],"summary":"Registers a new helper, operator for the SQLBuilder.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of the Syntax.","name":"name","typeStr":"String"},{"type":{"names":["function"]},"description":"Specifies the callback-function, which is called each time the SQLBuilder detects the helper inside the query.","name":"callback","typeStr":"function"},{"type":{"names":["String"]},"optional":true,"description":"**Optional**. Specifies the Syntax for this query helper. If a Syntax is provided it will be registered with the same name as the helper itself.","name":"syntax","typeStr":"String"}],"name":"registerHelper","longname":"SQLBuilder#registerHelper","kind":"function","scope":"instance","___id":"T000014R000046","___s":true,"longnameLower":"sqlbuilder#registerhelper","depths":["SQLBuilder","registerHelper"],"depth0":"SQLBuilder","depth1":"registerHelper","after":"# Create a new Helper\n\nIf you like to extend any language you have to register a new Helper.\n\n**Example**\n\nThe Example shows the declaration of a new Helper for the `SELECT... INTO` clause by using the MySQL language dialect.\n\n```javascript\n// create a new Helper for the MySQL   INTO clause\nsqlBuilder.registerHelper('$into', function(query, outerQuery, identifier){\n\tvar result = '',\n\t\tresults = [];\n\n\t// check the type of the query\n\tif (_.isArray(query)){\n\t\t// Array like example\n\t\t// $into: ['@firstname', '@lastname']\n\t\t_.forEach(query, (column) => {\n\t\t\t// check the type of the column definition, they must all of type String\n\t\t\tif (_.isString(column)){\n\t\t\t\tresults.push(this.quote(column));\n\t\t\t} else {\n\t\t\t\tthrow new Error('The items of the $into array must be type of string.');\n\t\t\t}\n\t\t});\n\n\t\tresult = (results.length > 0 ? 'INTO ' + results.join(', ') : '');\n\t} else if (_.isPlainObject(query)) {\n\t\t// the query is an object like:\n\t\t// $into: {\n\t\t// \t\t$outfile: { $file: '/tmp/people.csv', $terminatedBy: ';' }\n\t\t// }\n\t\t// lets call the build-method, that will do the job!\n\t\t// --> the build-method will call the $outfile helper-function, $file-helper and $terminatedBy-helper\n\t\tresult = 'INTO ' + this.build(query, null, this.getSyntax('$into'));\n\t} else {\n\t\tthrow new Error('$columns must be either array of strings or objects.');\n\t}\n\n\treturn result;\n\n}, 'INTO [$outfile] [$dumpfile]'); // this is our Syntax\n\n```\n> **Info**\n>\n> After registering the helper don't forget to update the corresponding Syntax and add the new helper.\n>\n> See [SQLBuilder#updateSyntax](#SQLBuilder-updateSyntax)","category":"Api","arguments":"name, callback, [syntax]","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L418","hashId":"SQLBuilder-registerHelper","_id":"xlEkil3PYoHSd4Bb"},{"comment":"/**\n\t * @after\n\t *\n\t * # Register a new Syntax\n\t *\n\t * If you are creating a new Helper, Operator for the SQLBuilder you may need a Syntax for the build-method.\n\t *\n\t * By using a pre-defined Syntax you achive that the build method will output the\n\t * expected SQL code and detect optional and required helper/operators. On top of this the order of the\n\t * object properties inside the query does not matter.\n\t *\n\t * ## Required helpers/operators\n\t * To define a helper, operator as required you have to use pointed brackets ` < ... > `.\n\t *\n\t * ## Optional helpers/operators\n\t * To define an optional helper, operator you have to use square brackets ` [ ... ] `.\n\t *\n\t * **Example `$select` - Syntax**\n\t * ```javascript\n\t * // ANSI-SELECT Statement Syntax\n\t * sqlBuilder.registerSyntax('$select', `SELECT [$distinct] [$all]\n\t * \t\t\t\t\t\t\t\t\t\t\t  <$columns>\n\t * \t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t * \t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n \t * \t\t\t\t\t\t\t\t\t\t\t}\n\t * \t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }`);\n\t *\n\t * ```\n\t * > **Remarks**\n\t *\n\t * > At this time only the optional and required helpers will be detected. Everything around this will be ignored.\n\t * >\n\t * > In a future version we will use the whole syntactical meanings including the key-words the curly brackets an so on.\n\t * > So If you create a new Syntax please provide a Syntax with all the stuff seen above.\n\t *\n\t * @summary Register a new Syntax to use later on the build process.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} name       Specifies the name of the Syntax.\n\t * @param  {String} syntax     Specifies the Syntax. See the example below.\n\t */","meta":{"range":[9487,9743],"filename":"sqlbuilder.js","lineno":287,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000653","name":"SQLBuilder#registerSyntax","type":"MethodDefinition","paramnames":["name","syntax"]},"vars":null},"tags":[{"originalTitle":"after","title":"after","text":"# Register a new Syntax\n\nIf you are creating a new Helper, Operator for the SQLBuilder you may need a Syntax for the build-method.\n\nBy using a pre-defined Syntax you achive that the build method will output the\nexpected SQL code and detect optional and required helper/operators. On top of this the order of the\nobject properties inside the query does not matter.\n\n## Required helpers/operators\nTo define a helper, operator as required you have to use pointed brackets ` < ... > `.\n\n## Optional helpers/operators\nTo define an optional helper, operator you have to use square brackets ` [ ... ] `.\n\n**Example `$select` - Syntax**\n```javascript\n// ANSI-SELECT Statement Syntax\nsqlBuilder.registerSyntax('$select', `SELECT [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t  <$columns>\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }`);\n\n```\n> **Remarks**\n\n> At this time only the optional and required helpers will be detected. Everything around this will be ignored.\n>\n> In a future version we will use the whole syntactical meanings including the key-words the curly brackets an so on.\n> So If you create a new Syntax please provide a Syntax with all the stuff seen above.","value":"# Register a new Syntax\n\nIf you are creating a new Helper, Operator for the SQLBuilder you may need a Syntax for the build-method.\n\nBy using a pre-defined Syntax you achive that the build method will output the\nexpected SQL code and detect optional and required helper/operators. On top of this the order of the\nobject properties inside the query does not matter.\n\n## Required helpers/operators\nTo define a helper, operator as required you have to use pointed brackets ` < ... > `.\n\n## Optional helpers/operators\nTo define an optional helper, operator you have to use square brackets ` [ ... ] `.\n\n**Example `$select` - Syntax**\n```javascript\n// ANSI-SELECT Statement Syntax\nsqlBuilder.registerSyntax('$select', `SELECT [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t  <$columns>\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }`);\n\n```\n> **Remarks**\n\n> At this time only the optional and required helpers will be detected. Everything around this will be ignored.\n>\n> In a future version we will use the whole syntactical meanings including the key-words the curly brackets an so on.\n> So If you create a new Syntax please provide a Syntax with all the stuff seen above."}],"summary":"Register a new Syntax to use later on the build process.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of the Syntax.","name":"name","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the Syntax. See the example below.","name":"syntax","typeStr":"String"}],"name":"registerSyntax","longname":"SQLBuilder#registerSyntax","kind":"function","scope":"instance","___id":"T000014R000041","___s":true,"longnameLower":"sqlbuilder#registersyntax","depths":["SQLBuilder","registerSyntax"],"depth0":"SQLBuilder","depth1":"registerSyntax","after":"# Register a new Syntax\n\nIf you are creating a new Helper, Operator for the SQLBuilder you may need a Syntax for the build-method.\n\nBy using a pre-defined Syntax you achive that the build method will output the\nexpected SQL code and detect optional and required helper/operators. On top of this the order of the\nobject properties inside the query does not matter.\n\n## Required helpers/operators\nTo define a helper, operator as required you have to use pointed brackets ` < ... > `.\n\n## Optional helpers/operators\nTo define an optional helper, operator you have to use square brackets ` [ ... ] `.\n\n**Example `$select` - Syntax**\n```javascript\n// ANSI-SELECT Statement Syntax\nsqlBuilder.registerSyntax('$select', `SELECT [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t  <$columns>\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }`);\n\n```\n> **Remarks**\n\n> At this time only the optional and required helpers will be detected. Everything around this will be ignored.\n>\n> In a future version we will use the whole syntactical meanings including the key-words the curly brackets an so on.\n> So If you create a new Syntax please provide a Syntax with all the stuff seen above.","category":"Api","arguments":"name, syntax","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L287","hashId":"SQLBuilder-registerSyntax","_id":"johJxw4nH6UYiBsg"},{"comment":"/**\n\t * @after\n\t *\n\t * # Update an existing Syntax\n\t *\n\t * If you extend an existing Helper - maybe the ` $select ` helper you have to update the existing Syntax.\n\t * On the same way this module archives the different language dialects.\n\t *\n\t * **Example**\n\t *\n\t * The Example shows the update of the ANSI Select helper Syntax with the new one supported by the MySQL Select-Helper.\n\t *\n\t * ```javascript\n\t * // overwrite the SYNTAX for the ANSI SELECT Statement\n\t * sqlBuilder.updateSyntax('$select', `SELECT [$calcFoundRows] [$distinct] [$all]\n\t * \t\t\t\t\t\t\t\t\t\t\t{ <$columns> [$into] }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t * \t\t\t\t\t\t\t\t\t\t\t\t{ WITH ROLLUP [$rollup] }\n\t * \t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n \t * \t\t\t\t\t\t\t\t\t\t\t}\n\t * \t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t * \t\t\t\t\t\t\t\t\t\t\t{ LIMIT [$limit] { OFFSET [$offset] } }`);\n\t *\n\t * ```\n\t * As you can see to the example of the `registerSyntax` the MySQL Select - Syntax extends the ANSI Syntax with the following helpers/operators:\n\t * - **[$calcFoundRows]** Helper for `SQL_CALC_FOUND_ROWS`\n\t * - **[$into]** Helper for `SELECT ... INTO OUTFILE` or `SELECT ... INTO DUMPFILE`\n\t * - **[$rollup]** Helper for `WITH ROLLUP` option after the `GROUP BY` clause\n\t * - **[$limit]** and **[$offset]** Helper\n\t *\n\t * @summary Updates an existing Syntax to use later on the build process.\n\t * @memberof SQLBuilder\n\t *\n\t * @param  {String} name\t\tSpecifies the name of the Syntax.\n\t * @param  {String} newSyntax\tSpecifies the Syntax. See the example below.\n\t */","meta":{"range":[11329,11586],"filename":"sqlbuilder.js","lineno":333,"path":"/home/rene/nodejs/json-sql-builder/lib","code":{"id":"astnode100000682","name":"SQLBuilder#updateSyntax","type":"MethodDefinition","paramnames":["name","newSyntax"]},"vars":null},"tags":[{"originalTitle":"after","title":"after","text":"# Update an existing Syntax\n\nIf you extend an existing Helper - maybe the ` $select ` helper you have to update the existing Syntax.\nOn the same way this module archives the different language dialects.\n\n**Example**\n\nThe Example shows the update of the ANSI Select helper Syntax with the new one supported by the MySQL Select-Helper.\n\n```javascript\n// overwrite the SYNTAX for the ANSI SELECT Statement\nsqlBuilder.updateSyntax('$select', `SELECT [$calcFoundRows] [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t{ <$columns> [$into] }\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ WITH ROLLUP [$rollup] }\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t\t\t\t\t\t\t\t\t\t\t{ LIMIT [$limit] { OFFSET [$offset] } }`);\n\n```\nAs you can see to the example of the `registerSyntax` the MySQL Select - Syntax extends the ANSI Syntax with the following helpers/operators:\n- **[$calcFoundRows]** Helper for `SQL_CALC_FOUND_ROWS`\n- **[$into]** Helper for `SELECT ... INTO OUTFILE` or `SELECT ... INTO DUMPFILE`\n- **[$rollup]** Helper for `WITH ROLLUP` option after the `GROUP BY` clause\n- **[$limit]** and **[$offset]** Helper","value":"# Update an existing Syntax\n\nIf you extend an existing Helper - maybe the ` $select ` helper you have to update the existing Syntax.\nOn the same way this module archives the different language dialects.\n\n**Example**\n\nThe Example shows the update of the ANSI Select helper Syntax with the new one supported by the MySQL Select-Helper.\n\n```javascript\n// overwrite the SYNTAX for the ANSI SELECT Statement\nsqlBuilder.updateSyntax('$select', `SELECT [$calcFoundRows] [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t{ <$columns> [$into] }\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ WITH ROLLUP [$rollup] }\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t\t\t\t\t\t\t\t\t\t\t{ LIMIT [$limit] { OFFSET [$offset] } }`);\n\n```\nAs you can see to the example of the `registerSyntax` the MySQL Select - Syntax extends the ANSI Syntax with the following helpers/operators:\n- **[$calcFoundRows]** Helper for `SQL_CALC_FOUND_ROWS`\n- **[$into]** Helper for `SELECT ... INTO OUTFILE` or `SELECT ... INTO DUMPFILE`\n- **[$rollup]** Helper for `WITH ROLLUP` option after the `GROUP BY` clause\n- **[$limit]** and **[$offset]** Helper"}],"summary":"Updates an existing Syntax to use later on the build process.","memberof":"SQLBuilder","params":[{"type":{"names":["String"]},"description":"Specifies the name of the Syntax.","name":"name","typeStr":"String"},{"type":{"names":["String"]},"description":"Specifies the Syntax. See the example below.","name":"newSyntax","typeStr":"String"}],"name":"updateSyntax","longname":"SQLBuilder#updateSyntax","kind":"function","scope":"instance","___id":"T000014R000043","___s":true,"longnameLower":"sqlbuilder#updatesyntax","depths":["SQLBuilder","updateSyntax"],"depth0":"SQLBuilder","depth1":"updateSyntax","after":"# Update an existing Syntax\n\nIf you extend an existing Helper - maybe the ` $select ` helper you have to update the existing Syntax.\nOn the same way this module archives the different language dialects.\n\n**Example**\n\nThe Example shows the update of the ANSI Select helper Syntax with the new one supported by the MySQL Select-Helper.\n\n```javascript\n// overwrite the SYNTAX for the ANSI SELECT Statement\nsqlBuilder.updateSyntax('$select', `SELECT [$calcFoundRows] [$distinct] [$all]\n\t\t\t\t\t\t\t\t\t\t\t{ <$columns> [$into] }\n\t\t\t\t\t\t\t\t\t\t\t{ FROM [$table] | [$from] }\n\t\t\t\t\t\t\t\t\t\t\t{ WHERE [$where] }\n\t\t\t\t\t\t\t\t\t\t\t{ GROUP BY [$groupBy]\n\t\t\t\t\t\t\t\t\t\t\t\t{ WITH ROLLUP [$rollup] }\n\t\t\t\t\t\t\t\t\t\t\t\t{ HAVING [$having] }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{ ORDER BY { [$sort] | [$orderBy] } }\n\t\t\t\t\t\t\t\t\t\t\t{ LIMIT [$limit] { OFFSET [$offset] } }`);\n\n```\nAs you can see to the example of the `registerSyntax` the MySQL Select - Syntax extends the ANSI Syntax with the following helpers/operators:\n- **[$calcFoundRows]** Helper for `SQL_CALC_FOUND_ROWS`\n- **[$into]** Helper for `SELECT ... INTO OUTFILE` or `SELECT ... INTO DUMPFILE`\n- **[$rollup]** Helper for `WITH ROLLUP` option after the `GROUP BY` clause\n- **[$limit]** and **[$offset]** Helper","category":"Api","arguments":"name, newSyntax","gitRelative":"/lib/sqlbuilder.js","gitUrl":"https:/github.com/planetarydev/json-sql-builder/blob/master/lib/sqlbuilder.js#L333","hashId":"SQLBuilder-updateSyntax","_id":"uNrOIdWEunkY8A5H"}]